<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__x_task_create_static" kind="group">
    <compoundname>xTaskCreateStatic</compoundname>
    <title>xTaskCreateStatic</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>task. h <preformatted>
TaskHandle_t xTaskCreateStatic( TaskFunction_t pvTaskCode,
                             const char * const pcName,
                             uint32_t ulStackDepth,
                             void *pvParameters,
                             UBaseType_t uxPriority,
                             StackType_t *pxStackBuffer,
                             StaticTask_t *pxTaskBuffer );</preformatted></para>
<para>Create a new task and add it to the list of tasks that are ready to run.</para>
<para>Internally, within the FreeRTOS implementation, tasks use two blocks of memory. The first block is used to hold the task&apos;s data structures. The second block is used by the task as its stack. If a task is created using xTaskCreate() then both blocks of memory are automatically dynamically allocated inside the xTaskCreate() function. (see <ulink url="http://www.freertos.org/a00111.html">http://www.freertos.org/a00111.html</ulink>). If a task is created using xTaskCreateStatic() then the application writer must provide the required memory. xTaskCreateStatic() therefore allows a task to be created without using any dynamic memory allocation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pvTaskCode</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the task entry function. Tasks must be implemented to never return (i.e. continuous loop).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcName</parametername>
</parameternamelist>
<parameterdescription>
<para>A descriptive name for the task. This is mainly used to facilitate debugging. The maximum length of the string is defined by configMAX_TASK_NAME_LEN in <ref refid="_free_r_t_o_s_config_8h" kindref="compound">FreeRTOSConfig.h</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ulStackDepth</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the task stack specified as the number of variables the stack can hold - not the number of bytes. For example, if the stack is 32-bits wide and ulStackDepth is defined as 100 then 400 bytes will be allocated for stack storage.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvParameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer that will be used as the parameter for the task being created.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uxPriority</parametername>
</parameternamelist>
<parameterdescription>
<para>The priority at which the task will run.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxStackBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Must point to a StackType_t array that has at least ulStackDepth indexes - the array will then be used as the task&apos;s stack, removing the need for the stack to be allocated dynamically.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxTaskBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Must point to a variable of type StaticTask_t, which will then be used to hold the task&apos;s data structures, removing the need for the memory to be allocated dynamically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If neither pxStackBuffer or pxTaskBuffer are NULL, then the task will be created and a handle to the created task is returned. If either pxStackBuffer or pxTaskBuffer are NULL then the task will not be created and NULL is returned.</para>
</simplesect>
Example usage: <preformatted></preformatted></para>
<para><preformatted>   // Dimensions the buffer that the task being created will use as its stack.
   // NOTE:  This is the number of words the stack will hold, not the number of
   // bytes.  For example, if each stack item is 32-bits, and this is set to 100,
   // then 400 bytes (100 * 32-bits) will be allocated.
   #define STACK_SIZE 200</preformatted></para>
<para><preformatted>   // Structure that will hold the TCB of the task being created.
   StaticTask_t xTaskBuffer;</preformatted></para>
<para><preformatted>   // Buffer that the task being created will use as its stack.  Note this is
   // an array of StackType_t variables.  The size of StackType_t is dependent on
   // the RTOS port.
   StackType_t xStack[ STACK_SIZE ];</preformatted></para>
<para><preformatted>   // Function that implements the task being created.
   void vTaskCode( void * pvParameters )
   {
       // The parameter value is expected to be 1 as 1 is passed in the
       // pvParameters value in the call to xTaskCreateStatic().
       configASSERT( ( uint32_t ) pvParameters == 1UL );</preformatted></para>
<para><preformatted>       for( ;; )
       {
           // Task code goes here.
       }
   }</preformatted></para>
<para><preformatted>   // Function that creates a task.
   void vOtherFunction( void )
   {
       TaskHandle_t xHandle = NULL;</preformatted></para>
<para><preformatted>       // Create the task without using any dynamic memory allocation.
       xHandle = xTaskCreateStatic(
                     vTaskCode,       // Function that implements the task.
                     &quot;NAME&quot;,          // Text name for the task.
                     STACK_SIZE,      // Stack size in words, not bytes.
                     ( void * ) 1,    // Parameter passed into the task.
                     tskIDLE_PRIORITY,// Priority at which the task is created.
                     xStack,          // Array to use as the task&apos;s stack.
                     &amp;xTaskBuffer );  // Variable to hold the task&apos;s data structure.</preformatted></para>
<para><preformatted>       // puxStackBuffer and pxTaskBuffer were not NULL, so the task will have
       // been created, and xHandle will be the task&apos;s handle.  Use the handle
       // to suspend the task.
       vTaskSuspend( xHandle );
   }
  </preformatted> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
