<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="timers_8h" kind="file" language="C++">
    <compoundname>timers.h</compoundname>
    <includes refid="task_8h" local="yes">task.h</includes>
    <includedby refid="event__groups_8h" local="yes">Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>Middlewares/Third_Party/FreeRTOS/Source/include/timers.h</label>
        <link refid="timers_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>list.h</label>
        <link refid="list_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>Middlewares/Third_Party/FreeRTOS/Source/include/timers.h</label>
        <link refid="timers_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h</label>
        <link refid="event__groups_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="timers_8h_1aff0b8d2d5d743afef9d52861618139bf" prot="public" static="no">
        <name>tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR</name>
        <initializer>( ( BaseType_t ) -2 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="54" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1aca42f545424488ce7dfd43c0d70ca610" prot="public" static="no">
        <name>tmrCOMMAND_EXECUTE_CALLBACK</name>
        <initializer>( ( BaseType_t ) -1 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="55" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1adcc4f4391b0850b18596974d7618bdfc" prot="public" static="no">
        <name>tmrCOMMAND_START_DONT_TRACE</name>
        <initializer>( ( BaseType_t ) 0 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="56" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1afc38af63403775cc4ced3995f920343a" prot="public" static="no">
        <name>tmrCOMMAND_START</name>
        <initializer>( ( BaseType_t ) 1 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="57" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1a0a63f701c021371d186adca7c590e923" prot="public" static="no">
        <name>tmrCOMMAND_RESET</name>
        <initializer>( ( BaseType_t ) 2 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="58" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1a0cd6f6a41dcd52d2fc06c350f43516c0" prot="public" static="no">
        <name>tmrCOMMAND_STOP</name>
        <initializer>( ( BaseType_t ) 3 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="59" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1adb27881a1a1118b9cc4d711391c89414" prot="public" static="no">
        <name>tmrCOMMAND_CHANGE_PERIOD</name>
        <initializer>( ( BaseType_t ) 4 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="60" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1a5a5586339a9dbc1320153fd96a1c2f33" prot="public" static="no">
        <name>tmrCOMMAND_DELETE</name>
        <initializer>( ( BaseType_t ) 5 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="61" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1afab5e13e40f49f678d62925ab8bc44a1" prot="public" static="no">
        <name>tmrFIRST_FROM_ISR_COMMAND</name>
        <initializer>( ( BaseType_t ) 6 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="63" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1add053fdcf41607ba790004590c11844f" prot="public" static="no">
        <name>tmrCOMMAND_START_FROM_ISR</name>
        <initializer>( ( BaseType_t ) 6 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="64" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1a1d69bd5e47301570a4aa149bd868534a" prot="public" static="no">
        <name>tmrCOMMAND_RESET_FROM_ISR</name>
        <initializer>( ( BaseType_t ) 7 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="65" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1acbf988b64a5897a1c030da417cc654de" prot="public" static="no">
        <name>tmrCOMMAND_STOP_FROM_ISR</name>
        <initializer>( ( BaseType_t ) 8 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="66" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1ab520106084753fbb137ac275ab3ff20b" prot="public" static="no">
        <name>tmrCOMMAND_CHANGE_PERIOD_FROM_ISR</name>
        <initializer>( ( BaseType_t ) 9 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="67" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" prot="public" static="no">
        <name>xTimerStart</name>
        <param><defname>xTimer</defname></param>
        <param><defname>xTicksToWait</defname></param>
        <initializer><ref refid="timers_8h_1a1ee4da95d99c4e81bfa14c0350fbd594" kindref="member">xTimerGenericCommand</ref>( ( xTimer ), <ref refid="timers_8h_1afc38af63403775cc4ced3995f920343a" kindref="member">tmrCOMMAND_START</ref>, ( <ref refid="task_8h_1a753ecfe23e7386066ecccad5d16422f7" kindref="member">xTaskGetTickCount</ref>() ), NULL, ( xTicksToWait ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BaseType_t <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart( TimerHandle_t xTimer, TickType_t xTicksToWait )</ref>;</para>
<para>Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task through a queue called the timer command queue. The timer command queue is private to the kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.</para>
<para><ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref> starts a timer that was previously created using the xTimerCreate() API function. If the timer had already been started and was already in the active state, then <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref> has equivalent functionality to the <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref> API function.</para>
<para>Starting a timer ensures the timer is in the active state. If the timer is not stopped, deleted, or reset in the mean time, the callback function associated with the timer will get called &apos;n&apos; ticks after <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref> was called, where &apos;n&apos; is the timers defined period.</para>
<para>It is valid to call <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref> before the scheduler has been started, but when this is done the timer will not actually start until the scheduler is started, and the timers expiry time will be relative to when the scheduler is started, not relative to when <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref> was called.</para>
<para>The configUSE_TIMERS configuration constant must be set to 1 for <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref> to be available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer being started/restarted.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTicksToWait</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the time, in ticks, that the calling task should be held in the Blocked state to wait for the start command to be successfully sent to the timer command queue, should the queue already be full when <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref> was called. xTicksToWait is ignored if <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref> is called before the scheduler is started.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdFAIL will be returned if the start command could not be sent to the timer command queue even after xTicksToWait ticks had passed. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system, although the timers expiry time is relative to when <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref> is actually called. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</para>
</simplesect>
Example usage:</para>
<para>See the xTimerCreate() API function example usage scenario. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="504" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1a8327c7fc10aee414cb163b445c5269a4" prot="public" static="no">
        <name>xTimerStop</name>
        <param><defname>xTimer</defname></param>
        <param><defname>xTicksToWait</defname></param>
        <initializer><ref refid="timers_8h_1a1ee4da95d99c4e81bfa14c0350fbd594" kindref="member">xTimerGenericCommand</ref>( ( xTimer ), <ref refid="timers_8h_1a0cd6f6a41dcd52d2fc06c350f43516c0" kindref="member">tmrCOMMAND_STOP</ref>, 0U, NULL, ( xTicksToWait ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BaseType_t <ref refid="timers_8h_1a8327c7fc10aee414cb163b445c5269a4" kindref="member">xTimerStop( TimerHandle_t xTimer, TickType_t xTicksToWait )</ref>;</para>
<para>Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task through a queue called the timer command queue. The timer command queue is private to the kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.</para>
<para><ref refid="timers_8h_1a8327c7fc10aee414cb163b445c5269a4" kindref="member">xTimerStop()</ref> stops a timer that was previously started using either of the The <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref>, <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref>, <ref refid="timers_8h_1adab5809f9679e44a343b8dbb8fb7c67f" kindref="member">xTimerStartFromISR()</ref>, <ref refid="timers_8h_1a448138d0cebf76044f107ca56c842230" kindref="member">xTimerResetFromISR()</ref>, <ref refid="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" kindref="member">xTimerChangePeriod()</ref> or <ref refid="timers_8h_1a6d89ca6afb6e692e98932b5038c9e14a" kindref="member">xTimerChangePeriodFromISR()</ref> API functions.</para>
<para>Stopping a timer ensures the timer is not in the active state.</para>
<para>The configUSE_TIMERS configuration constant must be set to 1 for <ref refid="timers_8h_1a8327c7fc10aee414cb163b445c5269a4" kindref="member">xTimerStop()</ref> to be available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer being stopped.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTicksToWait</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the time, in ticks, that the calling task should be held in the Blocked state to wait for the stop command to be successfully sent to the timer command queue, should the queue already be full when <ref refid="timers_8h_1a8327c7fc10aee414cb163b445c5269a4" kindref="member">xTimerStop()</ref> was called. xTicksToWait is ignored if <ref refid="timers_8h_1a8327c7fc10aee414cb163b445c5269a4" kindref="member">xTimerStop()</ref> is called before the scheduler is started.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdFAIL will be returned if the stop command could not be sent to the timer command queue even after xTicksToWait ticks had passed. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</para>
</simplesect>
Example usage:</para>
<para>See the xTimerCreate() API function example usage scenario. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="546" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" prot="public" static="no">
        <name>xTimerChangePeriod</name>
        <param><defname>xTimer</defname></param>
        <param><defname>xNewPeriod</defname></param>
        <param><defname>xTicksToWait</defname></param>
        <initializer><ref refid="timers_8h_1a1ee4da95d99c4e81bfa14c0350fbd594" kindref="member">xTimerGenericCommand</ref>( ( xTimer ), <ref refid="timers_8h_1adb27881a1a1118b9cc4d711391c89414" kindref="member">tmrCOMMAND_CHANGE_PERIOD</ref>, ( xNewPeriod ), NULL, ( xTicksToWait ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BaseType_t xTimerChangePeriod( TimerHandle_t xTimer, TickType_t xNewPeriod, TickType_t xTicksToWait );</para>
<para>Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task through a queue called the timer command queue. The timer command queue is private to the kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.</para>
<para><ref refid="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" kindref="member">xTimerChangePeriod()</ref> changes the period of a timer that was previously created using the xTimerCreate() API function.</para>
<para><ref refid="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" kindref="member">xTimerChangePeriod()</ref> can be called to change the period of an active or dormant state timer.</para>
<para>The configUSE_TIMERS configuration constant must be set to 1 for <ref refid="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" kindref="member">xTimerChangePeriod()</ref> to be available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer that is having its period changed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xNewPeriod</parametername>
</parameternamelist>
<parameterdescription>
<para>The new period for xTimer. Timer periods are specified in tick periods, so the constant portTICK_PERIOD_MS can be used to convert a time that has been specified in milliseconds. For example, if the timer must expire after 100 ticks, then xNewPeriod should be set to 100. Alternatively, if the timer must expire after 500ms, then xNewPeriod can be set to ( 500 / portTICK_PERIOD_MS ) provided configTICK_RATE_HZ is less than or equal to 1000.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTicksToWait</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the time, in ticks, that the calling task should be held in the Blocked state to wait for the change period command to be successfully sent to the timer command queue, should the queue already be full when <ref refid="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" kindref="member">xTimerChangePeriod()</ref> was called. xTicksToWait is ignored if <ref refid="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" kindref="member">xTimerChangePeriod()</ref> is called before the scheduler is started.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdFAIL will be returned if the change period command could not be sent to the timer command queue even after xTicksToWait ticks had passed. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</para>
</simplesect>
Example usage: <verbatim>* // This function assumes xTimer has already been created.  If the timer
* // referenced by xTimer is already active when it is called, then the timer
* // is deleted.  If the timer referenced by xTimer is not active when it is
* // called, then the period of the timer is set to 500ms and the timer is
* // started.
* void vAFunction( TimerHandle_t xTimer )
* {
*     if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently &quot;if( xTimerIsTimerActive( xTimer ) )&quot;
*     {
*         // xTimer is already active - delete it.
*         xTimerDelete( xTimer );
*     }
*     else
*     {
*         // xTimer is not active, change its period to 500ms.  This will also
*         // cause the timer to start.  Block for a maximum of 100 ticks if the
*         // change period command cannot immediately be sent to the timer
*         // command queue.
*         if( xTimerChangePeriod( xTimer, 500 / portTICK_PERIOD_MS, 100 ) == pdPASS )
*         {
*             // The command was successfully sent.
*         }
*         else
*         {
*             // The command could not be sent, even after waiting for 100 ticks
*             // to pass.  Take appropriate action here.
*         }
*     }
* }
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="626" column="10" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1a8c8e21f05ebe92e15449addc5d269d10" prot="public" static="no">
        <name>xTimerDelete</name>
        <param><defname>xTimer</defname></param>
        <param><defname>xTicksToWait</defname></param>
        <initializer><ref refid="timers_8h_1a1ee4da95d99c4e81bfa14c0350fbd594" kindref="member">xTimerGenericCommand</ref>( ( xTimer ), <ref refid="timers_8h_1a5a5586339a9dbc1320153fd96a1c2f33" kindref="member">tmrCOMMAND_DELETE</ref>, 0U, NULL, ( xTicksToWait ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BaseType_t <ref refid="timers_8h_1a8c8e21f05ebe92e15449addc5d269d10" kindref="member">xTimerDelete( TimerHandle_t xTimer, TickType_t xTicksToWait )</ref>;</para>
<para>Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task through a queue called the timer command queue. The timer command queue is private to the kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.</para>
<para><ref refid="timers_8h_1a8c8e21f05ebe92e15449addc5d269d10" kindref="member">xTimerDelete()</ref> deletes a timer that was previously created using the xTimerCreate() API function.</para>
<para>The configUSE_TIMERS configuration constant must be set to 1 for <ref refid="timers_8h_1a8c8e21f05ebe92e15449addc5d269d10" kindref="member">xTimerDelete()</ref> to be available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer being deleted.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTicksToWait</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the time, in ticks, that the calling task should be held in the Blocked state to wait for the delete command to be successfully sent to the timer command queue, should the queue already be full when <ref refid="timers_8h_1a8c8e21f05ebe92e15449addc5d269d10" kindref="member">xTimerDelete()</ref> was called. xTicksToWait is ignored if <ref refid="timers_8h_1a8c8e21f05ebe92e15449addc5d269d10" kindref="member">xTimerDelete()</ref> is called before the scheduler is started.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdFAIL will be returned if the delete command could not be sent to the timer command queue even after xTicksToWait ticks had passed. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</para>
</simplesect>
Example usage:</para>
<para>See the <ref refid="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" kindref="member">xTimerChangePeriod()</ref> API function example usage scenario. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="664" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1a8081b4541b752908dc55df2693e53287" prot="public" static="no">
        <name>xTimerReset</name>
        <param><defname>xTimer</defname></param>
        <param><defname>xTicksToWait</defname></param>
        <initializer><ref refid="timers_8h_1a1ee4da95d99c4e81bfa14c0350fbd594" kindref="member">xTimerGenericCommand</ref>( ( xTimer ), <ref refid="timers_8h_1a0a63f701c021371d186adca7c590e923" kindref="member">tmrCOMMAND_RESET</ref>, ( <ref refid="task_8h_1a753ecfe23e7386066ecccad5d16422f7" kindref="member">xTaskGetTickCount</ref>() ), NULL, ( xTicksToWait ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BaseType_t <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset( TimerHandle_t xTimer, TickType_t xTicksToWait )</ref>;</para>
<para>Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task through a queue called the timer command queue. The timer command queue is private to the kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.</para>
<para><ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref> re-starts a timer that was previously created using the xTimerCreate() API function. If the timer had already been started and was already in the active state, then <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref> will cause the timer to re-evaluate its expiry time so that it is relative to when <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref> was called. If the timer was in the dormant state then <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref> has equivalent functionality to the <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref> API function.</para>
<para>Resetting a timer ensures the timer is in the active state. If the timer is not stopped, deleted, or reset in the mean time, the callback function associated with the timer will get called &apos;n&apos; ticks after <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref> was called, where &apos;n&apos; is the timers defined period.</para>
<para>It is valid to call <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref> before the scheduler has been started, but when this is done the timer will not actually start until the scheduler is started, and the timers expiry time will be relative to when the scheduler is started, not relative to when <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref> was called.</para>
<para>The configUSE_TIMERS configuration constant must be set to 1 for <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref> to be available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer being reset/started/restarted.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTicksToWait</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the time, in ticks, that the calling task should be held in the Blocked state to wait for the reset command to be successfully sent to the timer command queue, should the queue already be full when <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref> was called. xTicksToWait is ignored if <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref> is called before the scheduler is started.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdFAIL will be returned if the reset command could not be sent to the timer command queue even after xTicksToWait ticks had passed. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system, although the timers expiry time is relative to when <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref> is actually called. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</para>
</simplesect>
Example usage: <verbatim>* // When a key is pressed, an LCD back-light is switched on.  If 5 seconds pass
* // without a key being pressed, then the LCD back-light is switched off.  In
* // this case, the timer is a one-shot timer.
*
* TimerHandle_t xBacklightTimer = NULL;
*
* // The callback function assigned to the one-shot timer.  In this case the
* // parameter is not used.
* void vBacklightTimerCallback( TimerHandle_t pxTimer )
* {
*     // The timer expired, therefore 5 seconds must have passed since a key
*     // was pressed.  Switch off the LCD back-light.
*     vSetBacklightState( BACKLIGHT_OFF );
* }
*
* // The key press event handler.
* void vKeyPressEventHandler( char cKey )
* {
*     // Ensure the LCD back-light is on, then reset the timer that is
*     // responsible for turning the back-light off after 5 seconds of
*     // key inactivity.  Wait 10 ticks for the command to be successfully sent
*     // if it cannot be sent immediately.
*     vSetBacklightState( BACKLIGHT_ON );
*     if( xTimerReset( xBacklightTimer, 100 ) != pdPASS )
*     {
*         // The reset command was not executed successfully.  Take appropriate
*         // action here.
*     }
*
*     // Perform the rest of the key processing here.
* }
*
* void main( void )
* {
* int32_t x;
*
*     // Create then start the one-shot timer that is responsible for turning
*     // the back-light off if no keys are pressed within a 5 second period.
*     xBacklightTimer = xTimerCreate( &quot;BacklightTimer&quot;,           // Just a text name, not used by the kernel.
*                                     ( 5000 / portTICK_PERIOD_MS), // The timer period in ticks.
*                                     pdFALSE,                    // The timer is a one-shot timer.
*                                     0,                          // The id is not used by the callback so can take any value.
*                                     vBacklightTimerCallback     // The callback function that switches the LCD back-light off.
*                                   );
*
*     if( xBacklightTimer == NULL )
*     {
*         // The timer was not created.
*     }
*     else
*     {
*         // Start the timer.  No block time is specified, and even if one was
*         // it would be ignored because the scheduler has not yet been
*         // started.
*         if( xTimerStart( xBacklightTimer, 0 ) != pdPASS )
*         {
*             // The timer could not be set into the Active state.
*         }
*     }
*
*     // ...
*     // Create tasks here.
*     // ...
*
*     // Starting the scheduler will start the timer running as it has already
*     // been set into the active state.
*     vTaskStartScheduler();
*
*     // Should not reach here.
*     for( ;; );
* }
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="788" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1adab5809f9679e44a343b8dbb8fb7c67f" prot="public" static="no">
        <name>xTimerStartFromISR</name>
        <param><defname>xTimer</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer><ref refid="timers_8h_1a1ee4da95d99c4e81bfa14c0350fbd594" kindref="member">xTimerGenericCommand</ref>( ( xTimer ), <ref refid="timers_8h_1add053fdcf41607ba790004590c11844f" kindref="member">tmrCOMMAND_START_FROM_ISR</ref>, ( <ref refid="task_8h_1a092be3fd5752625303c307620be523ff" kindref="member">xTaskGetTickCountFromISR</ref>() ), ( pxHigherPriorityTaskWoken ), 0U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BaseType_t xTimerStartFromISR( TimerHandle_t xTimer, BaseType_t *pxHigherPriorityTaskWoken );</para>
<para>A version of <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref> that can be called from an interrupt service routine.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer being started/restarted.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxHigherPriorityTaskWoken</parametername>
</parameternamelist>
<parameterdescription>
<para>The timer service/daemon task spends most of its time in the Blocked state, waiting for messages to arrive on the timer command queue. Calling <ref refid="timers_8h_1adab5809f9679e44a343b8dbb8fb7c67f" kindref="member">xTimerStartFromISR()</ref> writes a message to the timer command queue, so has the potential to transition the timer service/daemon task out of the Blocked state. If calling <ref refid="timers_8h_1adab5809f9679e44a343b8dbb8fb7c67f" kindref="member">xTimerStartFromISR()</ref> causes the timer service/daemon task to leave the Blocked state, and the timer service/ daemon task has a priority equal to or greater than the currently executing task (the task that was interrupted), then *pxHigherPriorityTaskWoken will get set to pdTRUE internally within the <ref refid="timers_8h_1adab5809f9679e44a343b8dbb8fb7c67f" kindref="member">xTimerStartFromISR()</ref> function. If <ref refid="timers_8h_1adab5809f9679e44a343b8dbb8fb7c67f" kindref="member">xTimerStartFromISR()</ref> sets this value to pdTRUE then a context switch should be performed before the interrupt exits.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdFAIL will be returned if the start command could not be sent to the timer command queue. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system, although the timers expiry time is relative to when <ref refid="timers_8h_1adab5809f9679e44a343b8dbb8fb7c67f" kindref="member">xTimerStartFromISR()</ref> is actually called. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</para>
</simplesect>
Example usage: <verbatim>* // This scenario assumes xBacklightTimer has already been created.  When a
* // key is pressed, an LCD back-light is switched on.  If 5 seconds pass
* // without a key being pressed, then the LCD back-light is switched off.  In
* // this case, the timer is a one-shot timer, and unlike the example given for
* // the xTimerReset() function, the key press event handler is an interrupt
* // service routine.
*
* // The callback function assigned to the one-shot timer.  In this case the
* // parameter is not used.
* void vBacklightTimerCallback( TimerHandle_t pxTimer )
* {
*     // The timer expired, therefore 5 seconds must have passed since a key
*     // was pressed.  Switch off the LCD back-light.
*     vSetBacklightState( BACKLIGHT_OFF );
* }
*
* // The key press interrupt service routine.
* void vKeyPressEventInterruptHandler( void )
* {
* BaseType_t xHigherPriorityTaskWoken = pdFALSE;
*
*     // Ensure the LCD back-light is on, then restart the timer that is
*     // responsible for turning the back-light off after 5 seconds of
*     // key inactivity.  This is an interrupt service routine so can only
*     // call FreeRTOS API functions that end in &quot;FromISR&quot;.
*     vSetBacklightState( BACKLIGHT_ON );
*
*     // xTimerStartFromISR() or xTimerResetFromISR() could be called here
*     // as both cause the timer to re-calculate its expiry time.
*     // xHigherPriorityTaskWoken was initialised to pdFALSE when it was
*     // declared (in this function).
*     if( xTimerStartFromISR( xBacklightTimer, &amp;xHigherPriorityTaskWoken ) != pdPASS )
*     {
*         // The start command was not executed successfully.  Take appropriate
*         // action here.
*     }
*
*     // Perform the rest of the key processing here.
*
*     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
*     // should be performed.  The syntax required to perform a context switch
*     // from inside an ISR varies from port to port, and from compiler to
*     // compiler.  Inspect the demos for the port you are using to find the
*     // actual syntax required.
*     if( xHigherPriorityTaskWoken != pdFALSE )
*     {
*         // Call the interrupt safe yield function here (actual function
*         // depends on the FreeRTOS port being used).
*     }
* }
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="874" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="874" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1aef0f53e7ecfaa881621da83d61072db7" prot="public" static="no">
        <name>xTimerStopFromISR</name>
        <param><defname>xTimer</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer><ref refid="timers_8h_1a1ee4da95d99c4e81bfa14c0350fbd594" kindref="member">xTimerGenericCommand</ref>( ( xTimer ), <ref refid="timers_8h_1acbf988b64a5897a1c030da417cc654de" kindref="member">tmrCOMMAND_STOP_FROM_ISR</ref>, 0, ( pxHigherPriorityTaskWoken ), 0U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BaseType_t xTimerStopFromISR( TimerHandle_t xTimer, BaseType_t *pxHigherPriorityTaskWoken );</para>
<para>A version of <ref refid="timers_8h_1a8327c7fc10aee414cb163b445c5269a4" kindref="member">xTimerStop()</ref> that can be called from an interrupt service routine.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer being stopped.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxHigherPriorityTaskWoken</parametername>
</parameternamelist>
<parameterdescription>
<para>The timer service/daemon task spends most of its time in the Blocked state, waiting for messages to arrive on the timer command queue. Calling <ref refid="timers_8h_1aef0f53e7ecfaa881621da83d61072db7" kindref="member">xTimerStopFromISR()</ref> writes a message to the timer command queue, so has the potential to transition the timer service/daemon task out of the Blocked state. If calling <ref refid="timers_8h_1aef0f53e7ecfaa881621da83d61072db7" kindref="member">xTimerStopFromISR()</ref> causes the timer service/daemon task to leave the Blocked state, and the timer service/ daemon task has a priority equal to or greater than the currently executing task (the task that was interrupted), then *pxHigherPriorityTaskWoken will get set to pdTRUE internally within the <ref refid="timers_8h_1aef0f53e7ecfaa881621da83d61072db7" kindref="member">xTimerStopFromISR()</ref> function. If <ref refid="timers_8h_1aef0f53e7ecfaa881621da83d61072db7" kindref="member">xTimerStopFromISR()</ref> sets this value to pdTRUE then a context switch should be performed before the interrupt exits.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdFAIL will be returned if the stop command could not be sent to the timer command queue. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</para>
</simplesect>
Example usage: <verbatim>* // This scenario assumes xTimer has already been created and started.  When
* // an interrupt occurs, the timer should be simply stopped.
*
* // The interrupt service routine that stops the timer.
* void vAnExampleInterruptServiceRoutine( void )
* {
* BaseType_t xHigherPriorityTaskWoken = pdFALSE;
*
*     // The interrupt has occurred - simply stop the timer.
*     // xHigherPriorityTaskWoken was set to pdFALSE where it was defined
*     // (within this function).  As this is an interrupt service routine, only
*     // FreeRTOS API functions that end in &quot;FromISR&quot; can be used.
*     if( xTimerStopFromISR( xTimer, &amp;xHigherPriorityTaskWoken ) != pdPASS )
*     {
*         // The stop command was not executed successfully.  Take appropriate
*         // action here.
*     }
*
*     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
*     // should be performed.  The syntax required to perform a context switch
*     // from inside an ISR varies from port to port, and from compiler to
*     // compiler.  Inspect the demos for the port you are using to find the
*     // actual syntax required.
*     if( xHigherPriorityTaskWoken != pdFALSE )
*     {
*         // Call the interrupt safe yield function here (actual function
*         // depends on the FreeRTOS port being used).
*     }
* }
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="937" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="937" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1a6d89ca6afb6e692e98932b5038c9e14a" prot="public" static="no">
        <name>xTimerChangePeriodFromISR</name>
        <param><defname>xTimer</defname></param>
        <param><defname>xNewPeriod</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer><ref refid="timers_8h_1a1ee4da95d99c4e81bfa14c0350fbd594" kindref="member">xTimerGenericCommand</ref>( ( xTimer ), <ref refid="timers_8h_1ab520106084753fbb137ac275ab3ff20b" kindref="member">tmrCOMMAND_CHANGE_PERIOD_FROM_ISR</ref>, ( xNewPeriod ), ( pxHigherPriorityTaskWoken ), 0U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BaseType_t xTimerChangePeriodFromISR( TimerHandle_t xTimer, TickType_t xNewPeriod, BaseType_t *pxHigherPriorityTaskWoken );</para>
<para>A version of <ref refid="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" kindref="member">xTimerChangePeriod()</ref> that can be called from an interrupt service routine.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer that is having its period changed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xNewPeriod</parametername>
</parameternamelist>
<parameterdescription>
<para>The new period for xTimer. Timer periods are specified in tick periods, so the constant portTICK_PERIOD_MS can be used to convert a time that has been specified in milliseconds. For example, if the timer must expire after 100 ticks, then xNewPeriod should be set to 100. Alternatively, if the timer must expire after 500ms, then xNewPeriod can be set to ( 500 / portTICK_PERIOD_MS ) provided configTICK_RATE_HZ is less than or equal to 1000.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxHigherPriorityTaskWoken</parametername>
</parameternamelist>
<parameterdescription>
<para>The timer service/daemon task spends most of its time in the Blocked state, waiting for messages to arrive on the timer command queue. Calling <ref refid="timers_8h_1a6d89ca6afb6e692e98932b5038c9e14a" kindref="member">xTimerChangePeriodFromISR()</ref> writes a message to the timer command queue, so has the potential to transition the timer service/ daemon task out of the Blocked state. If calling <ref refid="timers_8h_1a6d89ca6afb6e692e98932b5038c9e14a" kindref="member">xTimerChangePeriodFromISR()</ref> causes the timer service/daemon task to leave the Blocked state, and the timer service/daemon task has a priority equal to or greater than the currently executing task (the task that was interrupted), then *pxHigherPriorityTaskWoken will get set to pdTRUE internally within the <ref refid="timers_8h_1a6d89ca6afb6e692e98932b5038c9e14a" kindref="member">xTimerChangePeriodFromISR()</ref> function. If <ref refid="timers_8h_1a6d89ca6afb6e692e98932b5038c9e14a" kindref="member">xTimerChangePeriodFromISR()</ref> sets this value to pdTRUE then a context switch should be performed before the interrupt exits.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdFAIL will be returned if the command to change the timers period could not be sent to the timer command queue. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</para>
</simplesect>
Example usage: <verbatim>* // This scenario assumes xTimer has already been created and started.  When
* // an interrupt occurs, the period of xTimer should be changed to 500ms.
*
* // The interrupt service routine that changes the period of xTimer.
* void vAnExampleInterruptServiceRoutine( void )
* {
* BaseType_t xHigherPriorityTaskWoken = pdFALSE;
*
*     // The interrupt has occurred - change the period of xTimer to 500ms.
*     // xHigherPriorityTaskWoken was set to pdFALSE where it was defined
*     // (within this function).  As this is an interrupt service routine, only
*     // FreeRTOS API functions that end in &quot;FromISR&quot; can be used.
*     if( xTimerChangePeriodFromISR( xTimer, &amp;xHigherPriorityTaskWoken ) != pdPASS )
*     {
*         // The command to change the timers period was not executed
*         // successfully.  Take appropriate action here.
*     }
*
*     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
*     // should be performed.  The syntax required to perform a context switch
*     // from inside an ISR varies from port to port, and from compiler to
*     // compiler.  Inspect the demos for the port you are using to find the
*     // actual syntax required.
*     if( xHigherPriorityTaskWoken != pdFALSE )
*     {
*         // Call the interrupt safe yield function here (actual function
*         // depends on the FreeRTOS port being used).
*     }
* }
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="1010" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="1010" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="timers_8h_1a448138d0cebf76044f107ca56c842230" prot="public" static="no">
        <name>xTimerResetFromISR</name>
        <param><defname>xTimer</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer><ref refid="timers_8h_1a1ee4da95d99c4e81bfa14c0350fbd594" kindref="member">xTimerGenericCommand</ref>( ( xTimer ), <ref refid="timers_8h_1a1d69bd5e47301570a4aa149bd868534a" kindref="member">tmrCOMMAND_RESET_FROM_ISR</ref>, ( <ref refid="task_8h_1a092be3fd5752625303c307620be523ff" kindref="member">xTaskGetTickCountFromISR</ref>() ), ( pxHigherPriorityTaskWoken ), 0U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BaseType_t xTimerResetFromISR( TimerHandle_t xTimer, BaseType_t *pxHigherPriorityTaskWoken );</para>
<para>A version of <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref> that can be called from an interrupt service routine.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer that is to be started, reset, or restarted.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxHigherPriorityTaskWoken</parametername>
</parameternamelist>
<parameterdescription>
<para>The timer service/daemon task spends most of its time in the Blocked state, waiting for messages to arrive on the timer command queue. Calling <ref refid="timers_8h_1a448138d0cebf76044f107ca56c842230" kindref="member">xTimerResetFromISR()</ref> writes a message to the timer command queue, so has the potential to transition the timer service/daemon task out of the Blocked state. If calling <ref refid="timers_8h_1a448138d0cebf76044f107ca56c842230" kindref="member">xTimerResetFromISR()</ref> causes the timer service/daemon task to leave the Blocked state, and the timer service/ daemon task has a priority equal to or greater than the currently executing task (the task that was interrupted), then *pxHigherPriorityTaskWoken will get set to pdTRUE internally within the <ref refid="timers_8h_1a448138d0cebf76044f107ca56c842230" kindref="member">xTimerResetFromISR()</ref> function. If <ref refid="timers_8h_1a448138d0cebf76044f107ca56c842230" kindref="member">xTimerResetFromISR()</ref> sets this value to pdTRUE then a context switch should be performed before the interrupt exits.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdFAIL will be returned if the reset command could not be sent to the timer command queue. pdPASS will be returned if the command was successfully sent to the timer command queue. When the command is actually processed will depend on the priority of the timer service/daemon task relative to other tasks in the system, although the timers expiry time is relative to when <ref refid="timers_8h_1a448138d0cebf76044f107ca56c842230" kindref="member">xTimerResetFromISR()</ref> is actually called. The timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY configuration constant.</para>
</simplesect>
Example usage: <verbatim>* // This scenario assumes xBacklightTimer has already been created.  When a
* // key is pressed, an LCD back-light is switched on.  If 5 seconds pass
* // without a key being pressed, then the LCD back-light is switched off.  In
* // this case, the timer is a one-shot timer, and unlike the example given for
* // the xTimerReset() function, the key press event handler is an interrupt
* // service routine.
*
* // The callback function assigned to the one-shot timer.  In this case the
* // parameter is not used.
* void vBacklightTimerCallback( TimerHandle_t pxTimer )
* {
*     // The timer expired, therefore 5 seconds must have passed since a key
*     // was pressed.  Switch off the LCD back-light.
*     vSetBacklightState( BACKLIGHT_OFF );
* }
*
* // The key press interrupt service routine.
* void vKeyPressEventInterruptHandler( void )
* {
* BaseType_t xHigherPriorityTaskWoken = pdFALSE;
*
*     // Ensure the LCD back-light is on, then reset the timer that is
*     // responsible for turning the back-light off after 5 seconds of
*     // key inactivity.  This is an interrupt service routine so can only
*     // call FreeRTOS API functions that end in &quot;FromISR&quot;.
*     vSetBacklightState( BACKLIGHT_ON );
*
*     // xTimerStartFromISR() or xTimerResetFromISR() could be called here
*     // as both cause the timer to re-calculate its expiry time.
*     // xHigherPriorityTaskWoken was initialised to pdFALSE when it was
*     // declared (in this function).
*     if( xTimerResetFromISR( xBacklightTimer, &amp;xHigherPriorityTaskWoken ) != pdPASS )
*     {
*         // The reset command was not executed successfully.  Take appropriate
*         // action here.
*     }
*
*     // Perform the rest of the key processing here.
*
*     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
*     // should be performed.  The syntax required to perform a context switch
*     // from inside an ISR varies from port to port, and from compiler to
*     // compiler.  Inspect the demos for the port you are using to find the
*     // actual syntax required.
*     if( xHigherPriorityTaskWoken != pdFALSE )
*     {
*         // Call the interrupt safe yield function here (actual function
*         // depends on the FreeRTOS port being used).
*     }
* }
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="1096" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="1096" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" prot="public" static="no">
        <type>struct tmrTimerControl *</type>
        <definition>typedef struct tmrTimerControl* TimerHandle_t</definition>
        <argsstring></argsstring>
        <name>TimerHandle_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="77" column="31" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="timers_8h_1a5cf6d1f61ccd4871022ed8ad454c6027" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* TimerCallbackFunction_t) (TimerHandle_t xTimer)</definition>
        <argsstring>)(TimerHandle_t xTimer)</argsstring>
        <name>TimerCallbackFunction_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="82" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="timers_8h_1af6e8e2be58df2be9f9bb808fcdc51622" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PendedFunction_t) (void *, uint32_t)</definition>
        <argsstring>)(void *, uint32_t)</argsstring>
        <name>PendedFunction_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="88" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="timers_8h_1ae20907a90360107d72283eb9099685ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* pvTimerGetTimerID</definition>
        <argsstring>(const TimerHandle_t xTimer) PRIVILEGED_FUNCTION</argsstring>
        <name>pvTimerGetTimerID</name>
        <param>
          <type>const <ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref></type>
          <declname>xTimer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TimerHandle_t xTimerCreate( const char * const pcTimerName, TickType_t xTimerPeriodInTicks, UBaseType_t uxAutoReload, void * pvTimerID, TimerCallbackFunction_t pxCallbackFunction );</para>
<para>Creates a new software timer instance, and returns a handle by which the created software timer can be referenced.</para>
<para>Internally, within the FreeRTOS implementation, software timers use a block of memory, in which the timer data structure is stored. If a software timer is created using xTimerCreate() then the required memory is automatically dynamically allocated inside the xTimerCreate() function. (see <ulink url="http://www.freertos.org/a00111.html">http://www.freertos.org/a00111.html</ulink>). If a software timer is created using xTimerCreateStatic() then the application writer must provide the memory that will get used by the software timer. xTimerCreateStatic() therefore allows a software timer to be created without using any dynamic memory allocation.</para>
<para>Timers are created in the dormant state. The <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref>, <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref>, <ref refid="timers_8h_1adab5809f9679e44a343b8dbb8fb7c67f" kindref="member">xTimerStartFromISR()</ref>, <ref refid="timers_8h_1a448138d0cebf76044f107ca56c842230" kindref="member">xTimerResetFromISR()</ref>, <ref refid="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" kindref="member">xTimerChangePeriod()</ref> and <ref refid="timers_8h_1a6d89ca6afb6e692e98932b5038c9e14a" kindref="member">xTimerChangePeriodFromISR()</ref> API functions can all be used to transition a timer into the active state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcTimerName</parametername>
</parameternamelist>
<parameterdescription>
<para>A text name that is assigned to the timer. This is done purely to assist debugging. The kernel itself only ever references a timer by its handle, and never by its name.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTimerPeriodInTicks</parametername>
</parameternamelist>
<parameterdescription>
<para>The timer period. The time is defined in tick periods so the constant portTICK_PERIOD_MS can be used to convert a time that has been specified in milliseconds. For example, if the timer must expire after 100 ticks, then xTimerPeriodInTicks should be set to 100. Alternatively, if the timer must expire after 500ms, then xPeriod can be set to ( 500 / portTICK_PERIOD_MS ) provided configTICK_RATE_HZ is less than or equal to 1000. Time timer period must be greater than 0.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uxAutoReload</parametername>
</parameternamelist>
<parameterdescription>
<para>If uxAutoReload is set to pdTRUE then the timer will expire repeatedly with a frequency set by the xTimerPeriodInTicks parameter. If uxAutoReload is set to pdFALSE then the timer will be a one-shot timer and enter the dormant state after it expires.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvTimerID</parametername>
</parameternamelist>
<parameterdescription>
<para>An identifier that is assigned to the timer being created. Typically this would be used in the timer callback function to identify which timer expired when the same callback function is assigned to more than one timer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxCallbackFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call when the timer expires. Callback functions must have the prototype defined by TimerCallbackFunction_t, which is &quot;void vCallbackFunction( TimerHandle_t xTimer );&quot;.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the timer is successfully created then a handle to the newly created timer is returned. If the timer cannot be created because there is insufficient FreeRTOS heap remaining to allocate the timer structures then NULL is returned.</para>
</simplesect>
Example usage: <verbatim>* #define NUM_TIMERS 5
*
* // An array to hold handles to the created timers.
* TimerHandle_t xTimers[ NUM_TIMERS ];
*
* // An array to hold a count of the number of times each timer expires.
* int32_t lExpireCounters[ NUM_TIMERS ] = { 0 };
*
* // Define a callback function that will be used by multiple timer instances.
* // The callback function does nothing but count the number of times the
* // associated timer expires, and stop the timer once the timer has expired
* // 10 times.
* void vTimerCallback( TimerHandle_t pxTimer )
* {
* int32_t lArrayIndex;
* const int32_t xMaxExpiryCountBeforeStopping = 10;
*
*      // Optionally do something if the pxTimer parameter is NULL.
*      configASSERT( pxTimer );
*
*     // Which timer expired?
*     lArrayIndex = ( int32_t ) pvTimerGetTimerID( pxTimer );
*
*     // Increment the number of times that pxTimer has expired.
*     lExpireCounters[ lArrayIndex ] += 1;
*
*     // If the timer has expired 10 times then stop it from running.
*     if( lExpireCounters[ lArrayIndex ] == xMaxExpiryCountBeforeStopping )
*     {
*         // Do not use a block time if calling a timer API function from a
*         // timer callback function, as doing so could cause a deadlock!
*         xTimerStop( pxTimer, 0 );
*     }
* }
*
* void main( void )
* {
* int32_t x;
*
*     // Create then start some timers.  Starting the timers before the scheduler
*     // has been started means the timers will start running immediately that
*     // the scheduler starts.
*     for( x = 0; x &lt; NUM_TIMERS; x++ )
*     {
*         xTimers[ x ] = xTimerCreate(    &quot;Timer&quot;,       // Just a text name, not used by the kernel.
*                                         ( 100 * x ),   // The timer period in ticks.
*                                         pdTRUE,        // The timers will auto-reload themselves when they expire.
*                                         ( void * ) x,  // Assign each timer a unique id equal to its array index.
*                                         vTimerCallback // Each timer calls the same callback when it expires.
*                                     );
*
*         if( xTimers[ x ] == NULL )
*         {
*             // The timer was not created.
*         }
*         else
*         {
*             // Start the timer.  No block time is specified, and even if one was
*             // it would be ignored because the scheduler has not yet been
*             // started.
*             if( xTimerStart( xTimers[ x ], 0 ) != pdPASS )
*             {
*                 // The timer could not be set into the Active state.
*             }
*         }
*     }
*
*     // ...
*     // Create tasks here.
*     // ...
*
*     // Starting the scheduler will start the timers running as they have already
*     // been set into the active state.
*     vTaskStartScheduler();
*
*     // Should not reach here.
*     for( ;; );
* }
* </verbatim> TimerHandle_t xTimerCreateStatic(const char * const pcTimerName, TickType_t xTimerPeriodInTicks, UBaseType_t uxAutoReload, void * pvTimerID, TimerCallbackFunction_t pxCallbackFunction, StaticTimer_t *pxTimerBuffer );</para>
<para>Creates a new software timer instance, and returns a handle by which the created software timer can be referenced.</para>
<para>Internally, within the FreeRTOS implementation, software timers use a block of memory, in which the timer data structure is stored. If a software timer is created using xTimerCreate() then the required memory is automatically dynamically allocated inside the xTimerCreate() function. (see <ulink url="http://www.freertos.org/a00111.html">http://www.freertos.org/a00111.html</ulink>). If a software timer is created using xTimerCreateStatic() then the application writer must provide the memory that will get used by the software timer. xTimerCreateStatic() therefore allows a software timer to be created without using any dynamic memory allocation.</para>
<para>Timers are created in the dormant state. The <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref>, <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref>, <ref refid="timers_8h_1adab5809f9679e44a343b8dbb8fb7c67f" kindref="member">xTimerStartFromISR()</ref>, <ref refid="timers_8h_1a448138d0cebf76044f107ca56c842230" kindref="member">xTimerResetFromISR()</ref>, <ref refid="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" kindref="member">xTimerChangePeriod()</ref> and <ref refid="timers_8h_1a6d89ca6afb6e692e98932b5038c9e14a" kindref="member">xTimerChangePeriodFromISR()</ref> API functions can all be used to transition a timer into the active state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pcTimerName</parametername>
</parameternamelist>
<parameterdescription>
<para>A text name that is assigned to the timer. This is done purely to assist debugging. The kernel itself only ever references a timer by its handle, and never by its name.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTimerPeriodInTicks</parametername>
</parameternamelist>
<parameterdescription>
<para>The timer period. The time is defined in tick periods so the constant portTICK_PERIOD_MS can be used to convert a time that has been specified in milliseconds. For example, if the timer must expire after 100 ticks, then xTimerPeriodInTicks should be set to 100. Alternatively, if the timer must expire after 500ms, then xPeriod can be set to ( 500 / portTICK_PERIOD_MS ) provided configTICK_RATE_HZ is less than or equal to 1000. The timer period must be greater than 0.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uxAutoReload</parametername>
</parameternamelist>
<parameterdescription>
<para>If uxAutoReload is set to pdTRUE then the timer will expire repeatedly with a frequency set by the xTimerPeriodInTicks parameter. If uxAutoReload is set to pdFALSE then the timer will be a one-shot timer and enter the dormant state after it expires.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvTimerID</parametername>
</parameternamelist>
<parameterdescription>
<para>An identifier that is assigned to the timer being created. Typically this would be used in the timer callback function to identify which timer expired when the same callback function is assigned to more than one timer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxCallbackFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call when the timer expires. Callback functions must have the prototype defined by TimerCallbackFunction_t, which is &quot;void vCallbackFunction( TimerHandle_t xTimer );&quot;.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxTimerBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Must point to a variable of type StaticTimer_t, which will be then be used to hold the software timer&apos;s data structures, removing the need for the memory to be allocated dynamically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the timer is created then a handle to the created timer is returned. If pxTimerBuffer was NULL then NULL is returned.</para>
</simplesect>
Example usage: <verbatim>*
* // The buffer used to hold the software timer&apos;s data structure.
* static StaticTimer_t xTimerBuffer;
*
* // A variable that will be incremented by the software timer&apos;s callback
* // function.
* UBaseType_t uxVariableToIncrement = 0;
*
* // A software timer callback function that increments a variable passed to
* // it when the software timer was created.  After the 5th increment the
* // callback function stops the software timer.
* static void prvTimerCallback( TimerHandle_t xExpiredTimer )
* {
* UBaseType_t *puxVariableToIncrement;
* BaseType_t xReturned;
*
*     // Obtain the address of the variable to increment from the timer ID.
*     puxVariableToIncrement = ( UBaseType_t * ) pvTimerGetTimerID( xExpiredTimer );
*
*     // Increment the variable to show the timer callback has executed.
*     ( *puxVariableToIncrement )++;
*
*     // If this callback has executed the required number of times, stop the
*     // timer.
*     if( *puxVariableToIncrement == 5 )
*     {
*         // This is called from a timer callback so must not block.
*         xTimerStop( xExpiredTimer, staticDONT_BLOCK );
*     }
* }
*
*
* void main( void )
* {
*     // Create the software time.  xTimerCreateStatic() has an extra parameter
*     // than the normal xTimerCreate() API function.  The parameter is a pointer
*     // to the StaticTimer_t structure that will hold the software timer
*     // structure.  If the parameter is passed as NULL then the structure will be
*     // allocated dynamically, just as if xTimerCreate() had been called.
*     xTimer = xTimerCreateStatic( &quot;T1&quot;,             // Text name for the task.  Helps debugging only.  Not used by FreeRTOS.
*                                  xTimerPeriod,     // The period of the timer in ticks.
*                                  pdTRUE,           // This is an auto-reload timer.
*                                  ( void * ) &amp;uxVariableToIncrement,    // A variable incremented by the software timer&apos;s callback function
*                                  prvTimerCallback, // The function to execute when the timer expires.
*                                  &amp;xTimerBuffer );  // The buffer that will hold the software timer structure.
*
*     // The scheduler has not started yet so a block time is not used.
*     xReturned = xTimerStart( xTimer, 0 );
*
*     // ...
*     // Create tasks here.
*     // ...
*
*     // Starting the scheduler will start the timers running as they have already
*     // been set into the active state.
*     vTaskStartScheduler();
*
*     // Should not reach here.
*     for( ;; );
* }
* </verbatim> void *pvTimerGetTimerID( TimerHandle_t xTimer );</para>
<para>Returns the ID assigned to the timer.</para>
<para>IDs are assigned to timers using the pvTimerID parameter of the call to xTimerCreated() that was used to create the timer, and by calling the <ref refid="timers_8h_1a1f06045a953481dd7012d4c7762990cb" kindref="member">vTimerSetTimerID()</ref> API function.</para>
<para>If the same callback function is assigned to multiple timers then the timer ID can be used as time specific (timer local) storage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The timer being queried.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ID assigned to the timer being queried.</para>
</simplesect>
Example usage:</para>
<para>See the xTimerCreate() API function example usage scenario. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="386" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="386" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="timers_8h_1a1f06045a953481dd7012d4c7762990cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTimerSetTimerID</definition>
        <argsstring>(TimerHandle_t xTimer, void *pvNewID) PRIVILEGED_FUNCTION</argsstring>
        <name>vTimerSetTimerID</name>
        <param>
          <type><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref></type>
          <declname>xTimer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pvNewID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>void <ref refid="timers_8h_1a1f06045a953481dd7012d4c7762990cb" kindref="member">vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )</ref>;</para>
<para>Sets the ID assigned to the timer.</para>
<para>IDs are assigned to timers using the pvTimerID parameter of the call to xTimerCreated() that was used to create the timer.</para>
<para>If the same callback function is assigned to multiple timers then the timer ID can be used as time specific (timer local) storage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The timer being updated.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvNewID</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID to assign to the timer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage:</para>
<para>See the xTimerCreate() API function example usage scenario. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="407" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="407" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="timers_8h_1a2cd9b1399fb25203be698f123846dc33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTimerIsTimerActive</definition>
        <argsstring>(TimerHandle_t xTimer) PRIVILEGED_FUNCTION</argsstring>
        <name>xTimerIsTimerActive</name>
        <param>
          <type><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref></type>
          <declname>xTimer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BaseType_t <ref refid="timers_8h_1a2cd9b1399fb25203be698f123846dc33" kindref="member">xTimerIsTimerActive( TimerHandle_t xTimer )</ref>;</para>
<para>Queries a timer to see if it is active or dormant.</para>
<para>A timer will be dormant if: 1) It has been created but not started, or 2) It is an expired one-shot timer that has not been restarted.</para>
<para>Timers are created in the dormant state. The <ref refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" kindref="member">xTimerStart()</ref>, <ref refid="timers_8h_1a8081b4541b752908dc55df2693e53287" kindref="member">xTimerReset()</ref>, <ref refid="timers_8h_1adab5809f9679e44a343b8dbb8fb7c67f" kindref="member">xTimerStartFromISR()</ref>, <ref refid="timers_8h_1a448138d0cebf76044f107ca56c842230" kindref="member">xTimerResetFromISR()</ref>, <ref refid="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" kindref="member">xTimerChangePeriod()</ref> and <ref refid="timers_8h_1a6d89ca6afb6e692e98932b5038c9e14a" kindref="member">xTimerChangePeriodFromISR()</ref> API functions can all be used to transition a timer into the active state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The timer being queried.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdFALSE will be returned if the timer is dormant. A value other than pdFALSE will be returned if the timer is active.</para>
</simplesect>
Example usage: <verbatim>* // This function assumes xTimer has already been created.
* void vAFunction( TimerHandle_t xTimer )
* {
*     if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently &quot;if( xTimerIsTimerActive( xTimer ) )&quot;
*     {
*         // xTimer is active, do something.
*     }
*     else
*     {
*         // xTimer is not active, do something else.
*     }
* }
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="444" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="444" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="timers_8h_1ad2a0d15a1e213493bd898e748d9f7555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
        <definition>TaskHandle_t xTimerGetTimerDaemonTaskHandle</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>xTimerGetTimerDaemonTaskHandle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TaskHandle_t <ref refid="timers_8h_1ad2a0d15a1e213493bd898e748d9f7555" kindref="member">xTimerGetTimerDaemonTaskHandle( void )</ref>;</para>
<para>Simply returns the handle of the timer service/daemon task. It it not valid to call <ref refid="timers_8h_1ad2a0d15a1e213493bd898e748d9f7555" kindref="member">xTimerGetTimerDaemonTaskHandle()</ref> before the scheduler has been started. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="452" column="14" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="452" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="timers_8h_1ae0d9338933037e6feebe6437763fa299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTimerPendFunctionCallFromISR</definition>
        <argsstring>(PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken) PRIVILEGED_FUNCTION</argsstring>
        <name>xTimerPendFunctionCallFromISR</name>
        <param>
          <type><ref refid="timers_8h_1af6e8e2be58df2be9f9bb808fcdc51622" kindref="member">PendedFunction_t</ref></type>
          <declname>xFunctionToPend</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pvParameter1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ulParameter2</declname>
        </param>
        <param>
          <type>BaseType_t *</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken );</para>
<para>Used from application interrupt service routines to defer the execution of a function to the RTOS daemon task (the timer service task, hence this function is implemented in timers.c and is prefixed with &apos;Timer&apos;).</para>
<para>Ideally an interrupt service routine (ISR) is kept as short as possible, but sometimes an ISR either has a lot of processing to do, or needs to perform processing that is not deterministic. In these cases <ref refid="timers_8h_1ae0d9338933037e6feebe6437763fa299" kindref="member">xTimerPendFunctionCallFromISR()</ref> can be used to defer processing of a function to the RTOS daemon task.</para>
<para>A mechanism is provided that allows the interrupt to return directly to the task that will subsequently execute the pended callback function. This allows the callback function to execute contiguously in time with the interrupt - just as if the callback had executed in the interrupt itself.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xFunctionToPend</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to execute from the timer service/ daemon task. The function must conform to the PendedFunction_t prototype.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvParameter1</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the callback function&apos;s first parameter. The parameter has a void * type to allow it to be used to pass any type. For example, unsigned longs can be cast to a void *, or the void * can be used to point to a structure.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ulParameter2</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the callback function&apos;s second parameter.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxHigherPriorityTaskWoken</parametername>
</parameternamelist>
<parameterdescription>
<para>As mentioned above, calling this function will result in a message being sent to the timer daemon task. If the priority of the timer daemon task (which is set using configTIMER_TASK_PRIORITY in <ref refid="_free_r_t_o_s_config_8h" kindref="compound">FreeRTOSConfig.h</ref>) is higher than the priority of the currently running task (the task the interrupt interrupted) then *pxHigherPriorityTaskWoken will be set to pdTRUE within <ref refid="timers_8h_1ae0d9338933037e6feebe6437763fa299" kindref="member">xTimerPendFunctionCallFromISR()</ref>, indicating that a context switch should be requested before the interrupt exits. For that reason *pxHigherPriorityTaskWoken must be initialised to pdFALSE. See the example code below.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdPASS is returned if the message was successfully sent to the timer daemon task, otherwise pdFALSE is returned.</para>
</simplesect>
Example usage: <verbatim>*
*   // The callback function that will execute in the context of the daemon task.
*  // Note callback functions must all use this same prototype.
*  void vProcessInterface( void *pvParameter1, uint32_t ulParameter2 )
*   {
*       BaseType_t xInterfaceToService;
*
*       // The interface that requires servicing is passed in the second
*      // parameter.  The first parameter is not used in this case.
*       xInterfaceToService = ( BaseType_t ) ulParameter2;
*
*       // ...Perform the processing here...
*   }
*
*   // An ISR that receives data packets from multiple interfaces
*  void vAnISR( void )
*   {
*       BaseType_t xInterfaceToService, xHigherPriorityTaskWoken;
*
*       // Query the hardware to determine which interface needs processing.
*       xInterfaceToService = prvCheckInterfaces();
*
*      // The actual processing is to be deferred to a task.  Request the
*      // vProcessInterface() callback function is executed, passing in the
*       // number of the interface that needs processing.  The interface to
*       // service is passed in the second parameter.  The first parameter is
*       // not used in this case.
*       xHigherPriorityTaskWoken = pdFALSE;
*       xTimerPendFunctionCallFromISR( vProcessInterface, NULL, ( uint32_t ) xInterfaceToService, &amp;xHigherPriorityTaskWoken );
*
*       // If xHigherPriorityTaskWoken is now set to pdTRUE then a context
*       // switch should be requested.  The macro used is port specific and will
*       // be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
*       // the documentation page for the port being used.
*       portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
*
*   }
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="1187" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="1187" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="timers_8h_1a04e031135bd3276caaedd656d464dc23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTimerPendFunctionCall</definition>
        <argsstring>(PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>xTimerPendFunctionCall</name>
        <param>
          <type><ref refid="timers_8h_1af6e8e2be58df2be9f9bb808fcdc51622" kindref="member">PendedFunction_t</ref></type>
          <declname>xFunctionToPend</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pvParameter1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ulParameter2</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait );</para>
<para>Used to defer the execution of a function to the RTOS daemon task (the timer service task, hence this function is implemented in timers.c and is prefixed with &apos;Timer&apos;).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xFunctionToPend</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to execute from the timer service/ daemon task. The function must conform to the PendedFunction_t prototype.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvParameter1</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the callback function&apos;s first parameter. The parameter has a void * type to allow it to be used to pass any type. For example, unsigned longs can be cast to a void *, or the void * can be used to point to a structure.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ulParameter2</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the callback function&apos;s second parameter.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTicksToWait</parametername>
</parameternamelist>
<parameterdescription>
<para>Calling this function will result in a message being sent to the timer daemon task on a queue. xTicksToWait is the amount of time the calling task should remain in the Blocked state (so not using any processing time) for space to become available on the timer queue if the queue is found to be full.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdPASS is returned if the message was successfully sent to the timer daemon task, otherwise pdFALSE is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="1221" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="1221" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="timers_8h_1a43c9186d441d03fc6f97b542f853bd1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* pcTimerGetName</definition>
        <argsstring>(TimerHandle_t xTimer) PRIVILEGED_FUNCTION</argsstring>
        <name>pcTimerGetName</name>
        <param>
          <type><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref></type>
          <declname>xTimer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>const char * const <ref refid="timers_8h_1a43c9186d441d03fc6f97b542f853bd1a" kindref="member">pcTimerGetName( TimerHandle_t xTimer )</ref>;</para>
<para>Returns the name that was assigned to a timer when the timer was created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer being queried.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The name assigned to the timer specified by the xTimer parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="1232" column="13" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="1232" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="timers_8h_1a27ecb4105b9180a2f354384ee00e6848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTimerSetReloadMode</definition>
        <argsstring>(TimerHandle_t xTimer, const UBaseType_t uxAutoReload) PRIVILEGED_FUNCTION</argsstring>
        <name>vTimerSetReloadMode</name>
        <param>
          <type><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref></type>
          <declname>xTimer</declname>
        </param>
        <param>
          <type>const UBaseType_t</type>
          <declname>uxAutoReload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>void <ref refid="timers_8h_1a27ecb4105b9180a2f354384ee00e6848" kindref="member">vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )</ref>;</para>
<para>Updates a timer to be either an auto-reload timer, in which case the timer automatically resets itself each time it expires, or a one-shot timer, in which case the timer will only expire once unless it is manually restarted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer being updated.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uxAutoReload</parametername>
</parameternamelist>
<parameterdescription>
<para>If uxAutoReload is set to pdTRUE then the timer will expire repeatedly with a frequency set by the timer&apos;s period (see the xTimerPeriodInTicks parameter of the xTimerCreate() API function). If uxAutoReload is set to pdFALSE then the timer will be a one-shot timer and enter the dormant state after it expires. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="1249" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="1249" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="timers_8h_1a0e66306f2e9c482a28e750e90eec3d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UBaseType_t</type>
        <definition>UBaseType_t uxTimerGetReloadMode</definition>
        <argsstring>(TimerHandle_t xTimer) PRIVILEGED_FUNCTION</argsstring>
        <name>uxTimerGetReloadMode</name>
        <param>
          <type><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref></type>
          <declname>xTimer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>UBaseType_t <ref refid="timers_8h_1a0e66306f2e9c482a28e750e90eec3d65" kindref="member">uxTimerGetReloadMode( TimerHandle_t xTimer )</ref>;</para>
<para>Queries a timer to determine if it is an auto-reload timer, in which case the timer automatically resets itself each time it expires, or a one-shot timer, in which case the timer will only expire once unless it is manually restarted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer being queried.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the timer is an auto-reload timer then pdTRUE is returned, otherwise pdFALSE is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="1263" column="13" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="1263" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="timers_8h_1a2735e79e155b2ca2a3809958ebb7431e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TickType_t</type>
        <definition>TickType_t xTimerGetPeriod</definition>
        <argsstring>(TimerHandle_t xTimer) PRIVILEGED_FUNCTION</argsstring>
        <name>xTimerGetPeriod</name>
        <param>
          <type><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref></type>
          <declname>xTimer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TickType_t <ref refid="timers_8h_1a2735e79e155b2ca2a3809958ebb7431e" kindref="member">xTimerGetPeriod( TimerHandle_t xTimer )</ref>;</para>
<para>Returns the period of a timer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer being queried.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The period of the timer in ticks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="1274" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="1274" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="timers_8h_1a06cdc26759c622eeb575070064e26025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TickType_t</type>
        <definition>TickType_t xTimerGetExpiryTime</definition>
        <argsstring>(TimerHandle_t xTimer) PRIVILEGED_FUNCTION</argsstring>
        <name>xTimerGetExpiryTime</name>
        <param>
          <type><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref></type>
          <declname>xTimer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TickType_t <ref refid="timers_8h_1a06cdc26759c622eeb575070064e26025" kindref="member">xTimerGetExpiryTime( TimerHandle_t xTimer )</ref>;</para>
<para>Returns the time in ticks at which the timer will expire. If this is less than the current tick count then the expiry time has overflowed from the current time.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTimer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the timer being queried.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the timer is running then the time in ticks at which the timer will next expire is returned. If the timer is not running then the return value is undefined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="1289" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="1289" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="timers_8h_1af777ab3e9ac04abd5dd21be739fa1321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTimerCreateTimerTask</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>xTimerCreateTimerTask</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="1295" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="1295" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="timers_8h_1a1ee4da95d99c4e81bfa14c0350fbd594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTimerGenericCommand</definition>
        <argsstring>(TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t *const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>xTimerGenericCommand</name>
        <param>
          <type><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref></type>
          <declname>xTimer</declname>
        </param>
        <param>
          <type>const BaseType_t</type>
          <declname>xCommandID</declname>
        </param>
        <param>
          <type>const TickType_t</type>
          <declname>xOptionalValue</declname>
        </param>
        <param>
          <type>BaseType_t *const</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <param>
          <type>const TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" line="1296" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h" declline="1296" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>FreeRTOS<sp/>Kernel<sp/>V10.3.1</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020<sp/>Amazon.com,<sp/>Inc.<sp/>or<sp/>its<sp/>affiliates.<sp/><sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>http://www.FreeRTOS.org</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>http://aws.amazon.com/freertos</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>1<sp/>tab<sp/>==<sp/>4<sp/>spaces!</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TIMERS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TIMERS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INC_FREERTOS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>&quot;include<sp/>FreeRTOS.h<sp/>must<sp/>appear<sp/>in<sp/>source<sp/>files<sp/>before<sp/>include<sp/>timers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*lint<sp/>-save<sp/>-e537<sp/>This<sp/>headers<sp/>are<sp/>only<sp/>multiply<sp/>included<sp/>if<sp/>the<sp/>application<sp/>code</highlight></codeline>
<codeline lineno="37"><highlight class="comment">happens<sp/>to<sp/>also<sp/>be<sp/>including<sp/>task.h.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="task_8h" kindref="compound">task.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*lint<sp/>-restore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>MACROS<sp/>AND<sp/>DEFINITIONS</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>IDs<sp/>for<sp/>commands<sp/>that<sp/>can<sp/>be<sp/>sent/received<sp/>on<sp/>the<sp/>timer<sp/>queue.<sp/><sp/>These<sp/>are<sp/>to</highlight></codeline>
<codeline lineno="50"><highlight class="comment">be<sp/>used<sp/>solely<sp/>through<sp/>the<sp/>macros<sp/>that<sp/>make<sp/>up<sp/>the<sp/>public<sp/>software<sp/>timer<sp/>API,</highlight></codeline>
<codeline lineno="51"><highlight class="comment">as<sp/>defined<sp/>below.<sp/><sp/>The<sp/>commands<sp/>that<sp/>are<sp/>sent<sp/>from<sp/>interrupts<sp/>must<sp/>use<sp/>the</highlight></codeline>
<codeline lineno="52"><highlight class="comment">highest<sp/>numbers<sp/>as<sp/>tmrFIRST_FROM_ISR_COMMAND<sp/>is<sp/>used<sp/>to<sp/>determine<sp/>if<sp/>the<sp/>task</highlight></codeline>
<codeline lineno="53"><highlight class="comment">or<sp/>interrupt<sp/>version<sp/>of<sp/>the<sp/>queue<sp/>send<sp/>function<sp/>should<sp/>be<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="timers_8h_1aff0b8d2d5d743afef9d52861618139bf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR<sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>-2<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="timers_8h_1aca42f545424488ce7dfd43c0d70ca610" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrCOMMAND_EXECUTE_CALLBACK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>-1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="timers_8h_1adcc4f4391b0850b18596974d7618bdfc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrCOMMAND_START_DONT_TRACE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="timers_8h_1afc38af63403775cc4ced3995f920343a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrCOMMAND_START<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="timers_8h_1a0a63f701c021371d186adca7c590e923" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrCOMMAND_RESET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>2<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="timers_8h_1a0cd6f6a41dcd52d2fc06c350f43516c0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrCOMMAND_STOP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>3<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="timers_8h_1adb27881a1a1118b9cc4d711391c89414" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrCOMMAND_CHANGE_PERIOD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>4<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="timers_8h_1a5a5586339a9dbc1320153fd96a1c2f33" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrCOMMAND_DELETE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>5<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="timers_8h_1afab5e13e40f49f678d62925ab8bc44a1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrFIRST_FROM_ISR_COMMAND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>6<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="timers_8h_1add053fdcf41607ba790004590c11844f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrCOMMAND_START_FROM_ISR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>6<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="timers_8h_1a1d69bd5e47301570a4aa149bd868534a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrCOMMAND_RESET_FROM_ISR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>7<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="timers_8h_1acbf988b64a5897a1c030da417cc654de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrCOMMAND_STOP_FROM_ISR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>8<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="timers_8h_1ab520106084753fbb137ac275ab3ff20b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tmrCOMMAND_CHANGE_PERIOD_FROM_ISR<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>9<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tmrTimerControl;<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>old<sp/>naming<sp/>convention<sp/>is<sp/>used<sp/>to<sp/>prevent<sp/>breaking<sp/>kernel<sp/>aware<sp/>debuggers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tmrTimerControl<sp/>*<sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>Defines<sp/>the<sp/>prototype<sp/>to<sp/>which<sp/>timer<sp/>callback<sp/>functions<sp/>must<sp/>conform.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="timers_8h_1a5cf6d1f61ccd4871022ed8ad454c6027" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="timers_8h_1a5cf6d1f61ccd4871022ed8ad454c6027" kindref="member">TimerCallbackFunction_t</ref>)(<sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimer<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>Defines<sp/>the<sp/>prototype<sp/>to<sp/>which<sp/>functions<sp/>used<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>xTimerPendFunctionCallFromISR()<sp/>function<sp/>must<sp/>conform.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="timers_8h_1af6e8e2be58df2be9f9bb808fcdc51622" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="timers_8h_1af6e8e2be58df2be9f9bb808fcdc51622" kindref="member">PendedFunction_t</ref>)(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>uint32_t<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor">#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimerCreate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pcTimerName,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>xTimerPeriodInTicks,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxAutoReload,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvTimerID,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timers_8h_1a5cf6d1f61ccd4871022ed8ad454c6027" kindref="member">TimerCallbackFunction_t</ref><sp/>pxCallbackFunction<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor">#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimerCreateStatic(<sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pcTimerName,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>xTimerPeriodInTicks,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxAutoReload,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvTimerID,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timers_8h_1a5cf6d1f61ccd4871022ed8ad454c6027" kindref="member">TimerCallbackFunction_t</ref><sp/>pxCallbackFunction,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structx_s_t_a_t_i_c___t_i_m_e_r" kindref="compound">StaticTimer_t</ref><sp/>*pxTimerBuffer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="timers_8h_1ae20907a90360107d72283eb9099685ad" kindref="member">pvTimerGetTimerID</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="timers_8h_1a1f06045a953481dd7012d4c7762990cb" kindref="member">vTimerSetTimerID</ref>(<sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimer,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvNewID<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">BaseType_t<sp/><ref refid="timers_8h_1a2cd9b1399fb25203be698f123846dc33" kindref="member">xTimerIsTimerActive</ref>(<sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/><ref refid="timers_8h_1ad2a0d15a1e213493bd898e748d9f7555" kindref="member">xTimerGetTimerDaemonTaskHandle</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="504" refid="timers_8h_1a3a9b838f48991e852ce05c986b0eeb8c" refkind="member"><highlight class="preprocessor">#define<sp/>xTimerStart(<sp/>xTimer,<sp/>xTicksToWait<sp/>)<sp/>xTimerGenericCommand(<sp/>(<sp/>xTimer<sp/>),<sp/>tmrCOMMAND_START,<sp/>(<sp/>xTaskGetTickCount()<sp/>),<sp/>NULL,<sp/>(<sp/>xTicksToWait<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="timers_8h_1a8327c7fc10aee414cb163b445c5269a4" refkind="member"><highlight class="preprocessor">#define<sp/>xTimerStop(<sp/>xTimer,<sp/>xTicksToWait<sp/>)<sp/>xTimerGenericCommand(<sp/>(<sp/>xTimer<sp/>),<sp/>tmrCOMMAND_STOP,<sp/>0U,<sp/>NULL,<sp/>(<sp/>xTicksToWait<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="timers_8h_1ab12eac1c69a3437b8161ce81ff34b2f4" refkind="member"><highlight class="preprocessor"><sp/>#define<sp/>xTimerChangePeriod(<sp/>xTimer,<sp/>xNewPeriod,<sp/>xTicksToWait<sp/>)<sp/>xTimerGenericCommand(<sp/>(<sp/>xTimer<sp/>),<sp/>tmrCOMMAND_CHANGE_PERIOD,<sp/>(<sp/>xNewPeriod<sp/>),<sp/>NULL,<sp/>(<sp/>xTicksToWait<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="664" refid="timers_8h_1a8c8e21f05ebe92e15449addc5d269d10" refkind="member"><highlight class="preprocessor">#define<sp/>xTimerDelete(<sp/>xTimer,<sp/>xTicksToWait<sp/>)<sp/>xTimerGenericCommand(<sp/>(<sp/>xTimer<sp/>),<sp/>tmrCOMMAND_DELETE,<sp/>0U,<sp/>NULL,<sp/>(<sp/>xTicksToWait<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="timers_8h_1a8081b4541b752908dc55df2693e53287" refkind="member"><highlight class="preprocessor">#define<sp/>xTimerReset(<sp/>xTimer,<sp/>xTicksToWait<sp/>)<sp/>xTimerGenericCommand(<sp/>(<sp/>xTimer<sp/>),<sp/>tmrCOMMAND_RESET,<sp/>(<sp/>xTaskGetTickCount()<sp/>),<sp/>NULL,<sp/>(<sp/>xTicksToWait<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="874" refid="timers_8h_1adab5809f9679e44a343b8dbb8fb7c67f" refkind="member"><highlight class="preprocessor">#define<sp/>xTimerStartFromISR(<sp/>xTimer,<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>xTimerGenericCommand(<sp/>(<sp/>xTimer<sp/>),<sp/>tmrCOMMAND_START_FROM_ISR,<sp/>(<sp/>xTaskGetTickCountFromISR()<sp/>),<sp/>(<sp/>pxHigherPriorityTaskWoken<sp/>),<sp/>0U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="937" refid="timers_8h_1aef0f53e7ecfaa881621da83d61072db7" refkind="member"><highlight class="preprocessor">#define<sp/>xTimerStopFromISR(<sp/>xTimer,<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>xTimerGenericCommand(<sp/>(<sp/>xTimer<sp/>),<sp/>tmrCOMMAND_STOP_FROM_ISR,<sp/>0,<sp/>(<sp/>pxHigherPriorityTaskWoken<sp/>),<sp/>0U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010" refid="timers_8h_1a6d89ca6afb6e692e98932b5038c9e14a" refkind="member"><highlight class="preprocessor">#define<sp/>xTimerChangePeriodFromISR(<sp/>xTimer,<sp/>xNewPeriod,<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>xTimerGenericCommand(<sp/>(<sp/>xTimer<sp/>),<sp/>tmrCOMMAND_CHANGE_PERIOD_FROM_ISR,<sp/>(<sp/>xNewPeriod<sp/>),<sp/>(<sp/>pxHigherPriorityTaskWoken<sp/>),<sp/>0U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096" refid="timers_8h_1a448138d0cebf76044f107ca56c842230" refkind="member"><highlight class="preprocessor">#define<sp/>xTimerResetFromISR(<sp/>xTimer,<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>xTimerGenericCommand(<sp/>(<sp/>xTimer<sp/>),<sp/>tmrCOMMAND_RESET_FROM_ISR,<sp/>(<sp/>xTaskGetTickCountFromISR()<sp/>),<sp/>(<sp/>pxHigherPriorityTaskWoken<sp/>),<sp/>0U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal">BaseType_t<sp/><ref refid="timers_8h_1ae0d9338933037e6feebe6437763fa299" kindref="member">xTimerPendFunctionCallFromISR</ref>(<sp/><ref refid="timers_8h_1af6e8e2be58df2be9f9bb808fcdc51622" kindref="member">PendedFunction_t</ref><sp/>xFunctionToPend,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvParameter1,<sp/>uint32_t<sp/>ulParameter2,<sp/>BaseType_t<sp/>*pxHigherPriorityTaskWoken<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal">BaseType_t<sp/><ref refid="timers_8h_1a04e031135bd3276caaedd656d464dc23" kindref="member">xTimerPendFunctionCall</ref>(<sp/><ref refid="timers_8h_1af6e8e2be58df2be9f9bb808fcdc51622" kindref="member">PendedFunction_t</ref><sp/>xFunctionToPend,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvParameter1,<sp/>uint32_t<sp/>ulParameter2,<sp/>TickType_t<sp/>xTicksToWait<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="timers_8h_1a43c9186d441d03fc6f97b542f853bd1a" kindref="member">pcTimerGetName</ref>(<sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="timers_8h_1a27ecb4105b9180a2f354384ee00e6848" kindref="member">vTimerSetReloadMode</ref>(<sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxAutoReload<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal">UBaseType_t<sp/><ref refid="timers_8h_1a0e66306f2e9c482a28e750e90eec3d65" kindref="member">uxTimerGetReloadMode</ref>(<sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal">TickType_t<sp/><ref refid="timers_8h_1a2735e79e155b2ca2a3809958ebb7431e" kindref="member">xTimerGetPeriod</ref>(<sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal">TickType_t<sp/><ref refid="timers_8h_1a06cdc26759c622eeb575070064e26025" kindref="member">xTimerGetExpiryTime</ref>(<sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/>*<sp/>Functions<sp/>beyond<sp/>this<sp/>part<sp/>are<sp/>not<sp/>part<sp/>of<sp/>the<sp/>public<sp/>API<sp/>and<sp/>are<sp/>intended</highlight></codeline>
<codeline lineno="1293"><highlight class="comment"><sp/>*<sp/>for<sp/>use<sp/>by<sp/>the<sp/>kernel<sp/>only.</highlight></codeline>
<codeline lineno="1294"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal">BaseType_t<sp/><ref refid="timers_8h_1af777ab3e9ac04abd5dd21be739fa1321" kindref="member">xTimerCreateTimerTask</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">BaseType_t<sp/><ref refid="timers_8h_1a1ee4da95d99c4e81bfa14c0350fbd594" kindref="member">xTimerGenericCommand</ref>(<sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseType_t<sp/>xCommandID,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>xOptionalValue,<sp/>BaseType_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxHigherPriorityTaskWoken,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>xTicksToWait<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vTimerSetTimerNumber(<sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimer,<sp/>UBaseType_t<sp/>uxTimerNumber<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>UBaseType_t<sp/>uxTimerGetTimerNumber(<sp/><ref refid="timers_8h_1ae2aa96927b4806e5dcfd264ba7bc8bf6" kindref="member">TimerHandle_t</ref><sp/>xTimer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>TIMERS_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"/>
  </compounddef>
</doxygen>
