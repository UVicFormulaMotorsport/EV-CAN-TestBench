<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="rb__tree_8c" kind="file" language="C++">
    <compoundname>rb_tree.c</compoundname>
    <includes refid="rb__tree_8h" local="yes">rb_tree.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="uvfr__utils_8h" local="yes">uvfr_utils.h</includes>
    <incdepgraph>
      <node id="9">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>tim.h</label>
        <link refid="tim_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>imd.h</label>
        <link refid="imd_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>dash.h</label>
        <link refid="dash_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>driving_loop.h</label>
        <link refid="driving__loop_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>temp_monitoring.h</label>
        <link refid="temp__monitoring_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="30">
        <label>oled.h</label>
        <link refid="oled_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>adc.h</label>
        <link refid="adc_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cmsis_os.h</label>
      </node>
      <node id="5">
        <label>uvfr_utils.h</label>
        <link refid="uvfr__utils_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>message_buffer.h</label>
      </node>
      <node id="25">
        <label>bms.h</label>
        <link refid="bms_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>spi.h</label>
        <link refid="spi_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>pdu.h</label>
        <link refid="pdu_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>motor_controller.h</label>
        <link refid="motor__controller_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>uvfr_settings.h</label>
        <link refid="uvfr__settings_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Core/Src/rb_tree.c</label>
        <link refid="rb__tree_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>daq.h</label>
        <link refid="daq_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>gpio.h</label>
        <link refid="gpio_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>rb_tree.h</label>
        <link refid="rb__tree_8h"/>
      </node>
      <node id="13">
        <label>constants.h</label>
        <link refid="constants_8h"/>
      </node>
      <node id="12">
        <label>can.h</label>
        <link refid="can_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>uvfr_global_config.h</label>
        <link refid="uvfr__global__config_8h"/>
      </node>
      <node id="33">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
      </node>
      <node id="26">
        <label>uvfr_state_engine.h</label>
        <link refid="uvfr__state__engine_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>odometer.h</label>
        <link refid="odometer_8h"/>
      </node>
      <node id="8">
        <label>stm32f4xx_hal.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="18">
        <label>FreeRTOS.h</label>
      </node>
      <node id="14">
        <label>dma.h</label>
        <link refid="dma_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>task.h</label>
      </node>
      <node id="7">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="rb__tree_8c_1ab13cb365d1f3498f2061dbc67b0b64f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertRepair</definition>
        <argsstring>(rbtree *rbt, rbnode *current)</argsstring>
        <name>insertRepair</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="277" column="6" bodyfile="Core/Src/rb_tree.c" bodystart="277" bodyend="338" declfile="Core/Src/rb_tree.c" declline="13" declcolumn="13"/>
        <references refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" compoundref="rb__tree_8h" startline="13">BLACK</references>
        <references refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" compoundref="rb__tree_8h" startline="32">rbnode::color</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" compoundref="rb__tree_8h" startline="12">RED</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
        <references refid="rb__tree_8c_1ac759dc1b9dd51f2cf78c9122dcc5acae" compoundref="rb__tree_8c" startline="137" endline="158">rotateLeft</references>
        <references refid="rb__tree_8c_1a415b3985875cc2a5f17ff3f87d8d7895" compoundref="rb__tree_8c" startline="163" endline="184">rotateRight</references>
        <referencedby refid="rb__tree_8c_1aeb5491e8c286b8dbc868df0c31dba799" compoundref="rb__tree_8c" startline="191" endline="270">rbInsert</referencedby>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a04068304a12638e388a3c80475230dcd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteRepair</definition>
        <argsstring>(rbtree *rbt, rbnode *current)</argsstring>
        <name>deleteRepair</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="434" column="6" bodyfile="Core/Src/rb_tree.c" bodystart="434" bodyend="520" declfile="Core/Src/rb_tree.c" declline="14" declcolumn="13"/>
        <references refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" compoundref="rb__tree_8h" startline="13">BLACK</references>
        <references refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" compoundref="rb__tree_8h" startline="32">rbnode::color</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
        <references refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" compoundref="rb__tree_8h" startline="12">RED</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
        <references refid="rb__tree_8c_1ac759dc1b9dd51f2cf78c9122dcc5acae" compoundref="rb__tree_8c" startline="137" endline="158">rotateLeft</references>
        <references refid="rb__tree_8c_1a415b3985875cc2a5f17ff3f87d8d7895" compoundref="rb__tree_8c" startline="163" endline="184">rotateRight</references>
        <referencedby refid="rb__tree_8c_1a8b7898139f560f35aa433a637c2a5381" compoundref="rb__tree_8c" startline="344" endline="429">rbDelete</referencedby>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1ac759dc1b9dd51f2cf78c9122dcc5acae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rotateLeft</definition>
        <argsstring>(rbtree *, rbnode *)</argsstring>
        <name>rotateLeft</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <defname>rbt</defname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="137" column="6" bodyfile="Core/Src/rb_tree.c" bodystart="137" bodyend="158" declfile="Core/Src/rb_tree.c" declline="15" declcolumn="13"/>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
        <referencedby refid="rb__tree_8c_1a04068304a12638e388a3c80475230dcd" compoundref="rb__tree_8c" startline="434" endline="520">deleteRepair</referencedby>
        <referencedby refid="rb__tree_8c_1ab13cb365d1f3498f2061dbc67b0b64f3" compoundref="rb__tree_8c" startline="277" endline="338">insertRepair</referencedby>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a415b3985875cc2a5f17ff3f87d8d7895" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rotateRight</definition>
        <argsstring>(rbtree *, rbnode *)</argsstring>
        <name>rotateRight</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <defname>rbt</defname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="163" column="6" bodyfile="Core/Src/rb_tree.c" bodystart="163" bodyend="184" declfile="Core/Src/rb_tree.c" declline="16" declcolumn="13"/>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
        <referencedby refid="rb__tree_8c_1a04068304a12638e388a3c80475230dcd" compoundref="rb__tree_8c" startline="434" endline="520">deleteRepair</referencedby>
        <referencedby refid="rb__tree_8c_1ab13cb365d1f3498f2061dbc67b0b64f3" compoundref="rb__tree_8c" startline="277" endline="338">insertRepair</referencedby>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1abce051a2c66739dc7d5cd3f8bd81868a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int checkOrder</definition>
        <argsstring>(rbtree *rbt, rbnode *n, void *min, void *max)</argsstring>
        <name>checkOrder</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="533" column="5" bodyfile="Core/Src/rb_tree.c" bodystart="533" bodyend="546" declfile="Core/Src/rb_tree.c" declline="17" declcolumn="12"/>
        <references refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" compoundref="rb__tree_8h" startline="40">rbtree::compare</references>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
        <referencedby refid="rb__tree_8c_1a0eb9842e366817eb18eac0e319fb04db" compoundref="rb__tree_8c" startline="525" endline="528">rbCheckOrder</referencedby>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a81ab202c619b8ca1ec96a15a81cb21ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int checkBlackHeight</definition>
        <argsstring>(rbtree *rbt, rbnode *node)</argsstring>
        <name>checkBlackHeight</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="562" column="5" bodyfile="Core/Src/rb_tree.c" bodystart="562" bodyend="582" declfile="Core/Src/rb_tree.c" declline="18" declcolumn="12"/>
        <references refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" compoundref="rb__tree_8h" startline="13">BLACK</references>
        <references refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" compoundref="rb__tree_8h" startline="32">rbnode::color</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" compoundref="rb__tree_8h" startline="12">RED</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
        <referencedby refid="rb__tree_8c_1aa02803c2713094e61fa50807fa7a5116" compoundref="rb__tree_8c" startline="551" endline="557">rbCheckBlackHeight</referencedby>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a99da652ba3b85adc7824b99a076187b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print</definition>
        <argsstring>(rbtree *rbt, rbnode *node, void(*print_func)(void *), int depth, char *label)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>print_func</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="597" column="6" bodyfile="Core/Src/rb_tree.c" bodystart="597" bodyend="608" declfile="Core/Src/rb_tree.c" declline="19" declcolumn="13"/>
        <references refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" compoundref="rb__tree_8h" startline="32">rbnode::color</references>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" compoundref="rb__tree_8h" startline="12">RED</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
        <referencedby refid="rb__tree_8c_1a447d21f412285d3455356d2975a6ced3" compoundref="rb__tree_8c" startline="587" endline="592">rbPrint</referencedby>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a0c6878a92eb6e665e3bc9849053e1d5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroyAllNodes</definition>
        <argsstring>(rbtree *rbt, rbnode *node)</argsstring>
        <name>destroyAllNodes</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="629" column="6" bodyfile="Core/Src/rb_tree.c" bodystart="629" bodyend="681" declfile="Core/Src/rb_tree.c" declline="20" declcolumn="13"/>
        <references refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" compoundref="rb__tree_8h" startline="53">rbtree::count</references>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="structrbtree_1aee517470215137b01402d349e2650355" compoundref="rb__tree_8h" startline="42">rbtree::destroy</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
        <referencedby refid="rb__tree_8c_1a9a58d42acc5dd251bf885a0f58c6abfb" compoundref="rb__tree_8c" startline="59" endline="63">rbDestroy</referencedby>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1ae0e30dc26796a50c51186dc2279a3c4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
        <definition>rbtree* rbCreate</definition>
        <argsstring>(int(*compare)(const void *, const void *), void(*destroy)(void *))</argsstring>
        <name>rbCreate</name>
        <param>
          <type>int(*)(const void *, const void *)</type>
          <declname>compare_func</declname>
          <defname>compare</defname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>destroy_func</declname>
          <defname>destroy</defname>
        </param>
        <briefdescription>
<para>Create and initialize a binary search tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="26" column="8" bodyfile="Core/Src/rb_tree.c" bodystart="26" bodyend="54"/>
        <references refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" compoundref="rb__tree_8h" startline="13">BLACK</references>
        <references refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" compoundref="rb__tree_8h" startline="32">rbnode::color</references>
        <references refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" compoundref="rb__tree_8h" startline="40">rbtree::compare</references>
        <references refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" compoundref="rb__tree_8h" startline="53">rbtree::count</references>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="structrbtree_1aee517470215137b01402d349e2650355" compoundref="rb__tree_8h" startline="42">rbtree::destroy</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" compoundref="rb__tree_8h" startline="50">rbtree::min</references>
        <references refid="structrbtree_1a1175ffa360f63b405305a04acfa2c433" compoundref="rb__tree_8h" startline="45">rbtree::nil</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
        <references refid="structrbtree_1ad865f18384b6a5872aceefe23ade18d9" compoundref="rb__tree_8h" startline="44">rbtree::root</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a9a58d42acc5dd251bf885a0f58c6abfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rbDestroy</definition>
        <argsstring>(rbtree *rbt)</argsstring>
        <name>rbDestroy</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <briefdescription>
<para>Destroy the tree, and de-allocate it&apos;s elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="59" column="6" bodyfile="Core/Src/rb_tree.c" bodystart="59" bodyend="63"/>
        <references refid="rb__tree_8c_1a0c6878a92eb6e665e3bc9849053e1d5a" compoundref="rb__tree_8c" startline="629" endline="681">destroyAllNodes</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1ad7470a946dc18fdea53de8efa48ba4eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
        <definition>rbnode* rbFind</definition>
        <argsstring>(rbtree *rbt, void *data)</argsstring>
        <name>rbFind</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Find a node of the tree based off the data you provide the tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="69" column="8" bodyfile="Core/Src/rb_tree.c" bodystart="69" bodyend="84"/>
        <references refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" compoundref="rb__tree_8h" startline="40">rbtree::compare</references>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a70293914fa5f96508b9b502d7f3bb5dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
        <definition>rbnode* rbSuccessor</definition>
        <argsstring>(rbtree *rbt, rbnode *node)</argsstring>
        <name>rbSuccessor</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="90" column="8" bodyfile="Core/Src/rb_tree.c" bodystart="90" bodyend="108"/>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="rb__tree_8h_1a98eb926978664a4bb7da0a93ec4b2239" compoundref="rb__tree_8h" startline="57">RB_ROOT</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
        <referencedby refid="rb__tree_8c_1a8b7898139f560f35aa433a637c2a5381" compoundref="rb__tree_8c" startline="344" endline="429">rbDelete</referencedby>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a8f5e3435c81ea99e99f6ebaf786f03c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rb_apply</definition>
        <argsstring>(rbtree *rbt, rbnode *node, int(*func)(void *, void *), void *cookie, enum rbtraversal order)</argsstring>
        <name>rb_apply</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type>enum <ref refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5" kindref="member">rbtraversal</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="114" column="5" bodyfile="Core/Src/rb_tree.c" bodystart="114" bodyend="132"/>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5a541a7d029edbe0dc4855fa23ba23162b" compoundref="rb__tree_8h" startline="20">INORDER</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5a9ab94412bf77ddc567d8cb5cd2996d44" compoundref="rb__tree_8h" startline="21">POSTORDER</references>
        <references refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5acd9d91cf59c093fdfa2b1736a26125ce" compoundref="rb__tree_8h" startline="19">PREORDER</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1aeb5491e8c286b8dbc868df0c31dba799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
        <definition>rbnode* rbInsert</definition>
        <argsstring>(rbtree *rbt, void *data)</argsstring>
        <name>rbInsert</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="191" column="8" bodyfile="Core/Src/rb_tree.c" bodystart="191" bodyend="270"/>
        <references refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" compoundref="rb__tree_8h" startline="13">BLACK</references>
        <references refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" compoundref="rb__tree_8h" startline="32">rbnode::color</references>
        <references refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" compoundref="rb__tree_8h" startline="40">rbtree::compare</references>
        <references refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" compoundref="rb__tree_8h" startline="53">rbtree::count</references>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="structrbtree_1aee517470215137b01402d349e2650355" compoundref="rb__tree_8h" startline="42">rbtree::destroy</references>
        <references refid="rb__tree_8c_1ab13cb365d1f3498f2061dbc67b0b64f3" compoundref="rb__tree_8c" startline="277" endline="338">insertRepair</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" compoundref="rb__tree_8h" startline="50">rbtree::min</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
        <references refid="rb__tree_8h_1a881c5582644c293e2a896670ec97be8f" compoundref="rb__tree_8h" startline="10">RB_MIN</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="rb__tree_8h_1a98eb926978664a4bb7da0a93ec4b2239" compoundref="rb__tree_8h" startline="57">RB_ROOT</references>
        <references refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" compoundref="rb__tree_8h" startline="12">RED</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a8b7898139f560f35aa433a637c2a5381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* rbDelete</definition>
        <argsstring>(rbtree *rbt, rbnode *node, int keep)</argsstring>
        <name>rbDelete</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>keep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="344" column="6" bodyfile="Core/Src/rb_tree.c" bodystart="344" bodyend="429"/>
        <references refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" compoundref="rb__tree_8h" startline="13">BLACK</references>
        <references refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" compoundref="rb__tree_8h" startline="32">rbnode::color</references>
        <references refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" compoundref="rb__tree_8h" startline="53">rbtree::count</references>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="rb__tree_8c_1a04068304a12638e388a3c80475230dcd" compoundref="rb__tree_8c" startline="434" endline="520">deleteRepair</references>
        <references refid="structrbtree_1aee517470215137b01402d349e2650355" compoundref="rb__tree_8h" startline="42">rbtree::destroy</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" compoundref="rb__tree_8h" startline="50">rbtree::min</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="rb__tree_8c_1a70293914fa5f96508b9b502d7f3bb5dc" compoundref="rb__tree_8c" startline="90" endline="108">rbSuccessor</references>
        <references refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" compoundref="rb__tree_8h" startline="12">RED</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a0eb9842e366817eb18eac0e319fb04db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rbCheckOrder</definition>
        <argsstring>(rbtree *rbt, void *min, void *max)</argsstring>
        <name>rbCheckOrder</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="525" column="5" bodyfile="Core/Src/rb_tree.c" bodystart="525" bodyend="528"/>
        <references refid="rb__tree_8c_1abce051a2c66739dc7d5cd3f8bd81868a" compoundref="rb__tree_8c" startline="533" endline="546">checkOrder</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1aa02803c2713094e61fa50807fa7a5116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rbCheckBlackHeight</definition>
        <argsstring>(rbtree *rbt)</argsstring>
        <name>rbCheckBlackHeight</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="551" column="5" bodyfile="Core/Src/rb_tree.c" bodystart="551" bodyend="557"/>
        <references refid="rb__tree_8c_1a81ab202c619b8ca1ec96a15a81cb21ef" compoundref="rb__tree_8c" startline="562" endline="582">checkBlackHeight</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="rb__tree_8h_1a98eb926978664a4bb7da0a93ec4b2239" compoundref="rb__tree_8h" startline="57">RB_ROOT</references>
        <references refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" compoundref="rb__tree_8h" startline="12">RED</references>
        <referencedby refid="rb__tree_8c_1a447d21f412285d3455356d2975a6ced3" compoundref="rb__tree_8c" startline="587" endline="592">rbPrint</referencedby>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a447d21f412285d3455356d2975a6ced3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rbPrint</definition>
        <argsstring>(rbtree *rbt, void(*print_func)(void *))</argsstring>
        <name>rbPrint</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>print_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/rb_tree.c" line="587" column="6" bodyfile="Core/Src/rb_tree.c" bodystart="587" bodyend="592"/>
        <references refid="rb__tree_8c_1a99da652ba3b85adc7824b99a076187b6" compoundref="rb__tree_8c" startline="597" endline="608">print</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
        <references refid="rb__tree_8c_1aa02803c2713094e61fa50807fa7a5116" compoundref="rb__tree_8c" startline="551" endline="557">rbCheckBlackHeight</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>xieqing.<sp/>https://github.com/xieqing</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>May<sp/>be<sp/>freely<sp/>redistributed,<sp/>but<sp/>copyright<sp/>notice<sp/>must<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rb__tree_8h" kindref="compound">rb_tree.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="uvfr__utils_8h" kindref="compound">uvfr_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&quot;uvfr_macro.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1ab13cb365d1f3498f2061dbc67b0b64f3" kindref="member">insertRepair</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*current);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a04068304a12638e388a3c80475230dcd" kindref="member">deleteRepair</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*current);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1ac759dc1b9dd51f2cf78c9122dcc5acae" kindref="member">rotateLeft</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a415b3985875cc2a5f17ff3f87d8d7895" kindref="member">rotateRight</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1abce051a2c66739dc7d5cd3f8bd81868a" kindref="member">checkOrder</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*n,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*min,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*max);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a81ab202c619b8ca1ec96a15a81cb21ef" kindref="member">checkBlackHeight</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*node);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a99da652ba3b85adc7824b99a076187b6" kindref="member">print</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*node,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*print_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*label);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a0c6878a92eb6e665e3bc9849053e1d5a" kindref="member">destroyAllNodes</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*node);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>construction</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>return<sp/>NULL<sp/>if<sp/>out<sp/>of<sp/>memory</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="rb__tree_8c_1ae0e30dc26796a50c51186dc2279a3c4b" refkind="member"><highlight class="normal"><ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*<ref refid="rb__tree_8c_1ae0e30dc26796a50c51186dc2279a3c4b" kindref="member">rbCreate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*destroy)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt<sp/>=<sp/>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*)<sp/>uvMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrbtree" kindref="compound">rbtree</ref>));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rbt<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>out<sp/>of<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" kindref="member">compare</ref><sp/>=<sp/>compare;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1aee517470215137b01402d349e2650355" kindref="member">destroy</ref><sp/>=<sp/>destroy;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sentinel<sp/>node<sp/>nil<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1a1175ffa360f63b405305a04acfa2c433" kindref="member">nil</ref>.<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>=<sp/>rbt-&gt;<ref refid="structrbtree_1a1175ffa360f63b405305a04acfa2c433" kindref="member">nil</ref>.<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>=<sp/>rbt-&gt;<ref refid="structrbtree_1a1175ffa360f63b405305a04acfa2c433" kindref="member">nil</ref>.<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref><sp/>=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1a1175ffa360f63b405305a04acfa2c433" kindref="member">nil</ref>.<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1a1175ffa360f63b405305a04acfa2c433" kindref="member">nil</ref>.<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sentinel<sp/>node<sp/>root<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1ad865f18384b6a5872aceefe23ade18d9" kindref="member">root</ref>.<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>=<sp/>rbt-&gt;<ref refid="structrbtree_1ad865f18384b6a5872aceefe23ade18d9" kindref="member">root</ref>.<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>=<sp/>rbt-&gt;<ref refid="structrbtree_1ad865f18384b6a5872aceefe23ade18d9" kindref="member">root</ref>.<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref><sp/>=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1ad865f18384b6a5872aceefe23ade18d9" kindref="member">root</ref>.<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1ad865f18384b6a5872aceefe23ade18d9" kindref="member">root</ref>.<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>RB_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" kindref="member">min</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rbt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>destruction</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="rb__tree_8c_1a9a58d42acc5dd251bf885a0f58c6abfb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a9a58d42acc5dd251bf885a0f58c6abfb" kindref="member">rbDestroy</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a0c6878a92eb6e665e3bc9849053e1d5a" kindref="member">destroyAllNodes</ref>(rbt,<sp/><ref refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" kindref="member">RB_FIRST</ref>(rbt));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>uvFree(rbt);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>look<sp/>up</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>return<sp/>NULL<sp/>if<sp/>not<sp/>found</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="rb__tree_8c_1ad7470a946dc18fdea53de8efa48ba4eb" refkind="member"><highlight class="normal"><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*<ref refid="rb__tree_8c_1ad7470a946dc18fdea53de8efa48ba4eb" kindref="member">rbFind</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*p;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" kindref="member">RB_FIRST</ref>(rbt);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt))<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>rbt-&gt;<ref refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" kindref="member">compare</ref>(data,<sp/>p-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;<sp/></highlight><highlight class="comment">/*<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>p-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>:<sp/>p-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>next<sp/>larger</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>return<sp/>NULL<sp/>if<sp/>not<sp/>found</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="rb__tree_8c_1a70293914fa5f96508b9b502d7f3bb5dc" refkind="member"><highlight class="normal"><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*<ref refid="rb__tree_8c_1a70293914fa5f96508b9b502d7f3bb5dc" kindref="member">rbSuccessor</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*node)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*p;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>node-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt))<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>move<sp/>down<sp/>until<sp/>we<sp/>find<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>p-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>!=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt);<sp/>p<sp/>=<sp/>p-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>)<sp/>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>move<sp/>up<sp/>until<sp/>we<sp/>find<sp/>it<sp/>or<sp/>hit<sp/>the<sp/>root<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p<sp/>=<sp/>node-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>;<sp/>node<sp/>==<sp/>p-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>;<sp/>node<sp/>=<sp/>p,<sp/>p<sp/>=<sp/>p-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>)<sp/>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/><ref refid="rb__tree_8h_1a98eb926978664a4bb7da0a93ec4b2239" kindref="member">RB_ROOT</ref>(rbt))</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>apply<sp/>func</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>return<sp/>non-zero<sp/>if<sp/>error</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="rb__tree_8c_1a8f5e3435c81ea99e99f6ebaf786f03c1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a8f5e3435c81ea99e99f6ebaf786f03c1" kindref="member">rb_apply</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cookie,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5" kindref="member">rbtraversal</ref><sp/>order)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt))<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order<sp/>==<sp/><ref refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5acd9d91cf59c093fdfa2b1736a26125ce" kindref="member">PREORDER</ref><sp/>&amp;&amp;<sp/>(err<sp/>=<sp/>func(node-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>,<sp/>cookie))<sp/>!=<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>preorder<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err<sp/>=<sp/><ref refid="rb__tree_8c_1a8f5e3435c81ea99e99f6ebaf786f03c1" kindref="member">rb_apply</ref>(rbt,<sp/>node-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>,<sp/>func,<sp/>cookie,<sp/>order))<sp/>!=<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>left<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order<sp/>==<sp/><ref refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5a541a7d029edbe0dc4855fa23ba23162b" kindref="member">INORDER</ref><sp/>&amp;&amp;<sp/>(err<sp/>=<sp/>func(node-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>,<sp/>cookie))<sp/>!=<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>inorder<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((err<sp/>=<sp/><ref refid="rb__tree_8c_1a8f5e3435c81ea99e99f6ebaf786f03c1" kindref="member">rb_apply</ref>(rbt,<sp/>node-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>,<sp/>func,<sp/>cookie,<sp/>order))<sp/>!=<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>right<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order<sp/>==<sp/><ref refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5a9ab94412bf77ddc567d8cb5cd2996d44" kindref="member">POSTORDER</ref><sp/>&amp;&amp;<sp/>(err<sp/>=<sp/>func(node-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>,<sp/>cookie))<sp/>!=<sp/>0)<sp/></highlight><highlight class="comment">/*<sp/>postorder<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>rotate<sp/>left<sp/>about<sp/>x</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="rb__tree_8c_1ac759dc1b9dd51f2cf78c9122dcc5acae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1ac759dc1b9dd51f2cf78c9122dcc5acae" kindref="member">rotateLeft</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*x)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*y;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>x-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>;<sp/></highlight><highlight class="comment">/*<sp/>child<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tree<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>=<sp/>y-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>!=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt))</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref><sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tree<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>y-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref><sp/>=<sp/>x-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>x-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>assemble<sp/>tree<sp/>x<sp/>and<sp/>tree<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>y-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref><sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>rotate<sp/>right<sp/>about<sp/>x</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="rb__tree_8c_1a415b3985875cc2a5f17ff3f87d8d7895" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a415b3985875cc2a5f17ff3f87d8d7895" kindref="member">rotateRight</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*x)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*y;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>x-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>;<sp/></highlight><highlight class="comment">/*<sp/>child<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tree<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>=<sp/>y-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>!=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt))</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref><sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tree<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>y-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref><sp/>=<sp/>x-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>x-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>assemble<sp/>tree<sp/>x<sp/>and<sp/>tree<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>y-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>x-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref><sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>insert<sp/>(or<sp/>update)<sp/>data</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>return<sp/>NULL<sp/>if<sp/>out<sp/>of<sp/>memory</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="rb__tree_8c_1aeb5491e8c286b8dbc868df0c31dba799" refkind="member"><highlight class="normal"><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*<ref refid="rb__tree_8c_1aeb5491e8c286b8dbc868df0c31dba799" kindref="member">rbInsert</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*current,<sp/>*parent;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*new_node;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>a<sp/>binary<sp/>search<sp/>to<sp/>find<sp/>where<sp/>it<sp/>should<sp/>be<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/><ref refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" kindref="member">RB_FIRST</ref>(rbt);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>parent<sp/>=<sp/><ref refid="rb__tree_8h_1a98eb926978664a4bb7da0a93ec4b2239" kindref="member">RB_ROOT</ref>(rbt);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt))<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/>rbt-&gt;<ref refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" kindref="member">compare</ref>(data,<sp/>current-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>RB_DUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1aee517470215137b01402d349e2650355" kindref="member">destroy</ref>(current-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current;<sp/></highlight><highlight class="comment">/*<sp/>updated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>cmp<sp/>&lt;<sp/>0<sp/>?<sp/>current-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>:<sp/>current-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>replace<sp/>the<sp/>termination<sp/>NIL<sp/>pointer<sp/>with<sp/>the<sp/>new<sp/>node<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>new_node<sp/>=<sp/>(<ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*)<sp/>uvMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrbnode" kindref="compound">rbnode</ref>));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>out<sp/>of<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>=<sp/>current-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref><sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent<sp/>==<sp/><ref refid="rb__tree_8h_1a98eb926978664a4bb7da0a93ec4b2239" kindref="member">RB_ROOT</ref>(rbt)<sp/>||<sp/>rbt-&gt;<ref refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" kindref="member">compare</ref>(data,<sp/>parent-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>#ifdef<sp/><ref refid="rb__tree_8h_1a881c5582644c293e2a896670ec97be8f" kindref="member">RB_MIN</ref></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(rbt-&gt;<ref refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" kindref="member">min</ref><sp/>==<sp/>NULL<sp/>||<sp/>rbt-&gt;<ref refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" kindref="member">compare</ref>(current-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>,<sp/>rbt-&gt;<ref refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" kindref="member">min</ref>-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" kindref="member">min</ref><sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>insertion<sp/>into<sp/>a<sp/>red-black<sp/>tree:</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>0-children<sp/>root<sp/>cluster<sp/>(parent<sp/>node<sp/>is<sp/>BLACK)<sp/>becomes<sp/>2-children<sp/>root<sp/>cluster<sp/>(new<sp/>root<sp/>node)</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>paint<sp/>root<sp/>node<sp/>BLACK,<sp/>and<sp/>done</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>2-children<sp/>cluster<sp/>(parent<sp/>node<sp/>is<sp/>BLACK)<sp/>becomes<sp/>3-children<sp/>cluster</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>done</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>3-children<sp/>cluster<sp/>(parent<sp/>node<sp/>is<sp/>BLACK)<sp/>becomes<sp/>4-children<sp/>cluster</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>done</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>3-children<sp/>cluster<sp/>(parent<sp/>node<sp/>is<sp/>RED)<sp/>becomes<sp/>4-children<sp/>cluster</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>rotate,<sp/>and<sp/>done</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>4-children<sp/>cluster<sp/>(parent<sp/>node<sp/>is<sp/>RED)<sp/>splits<sp/>into<sp/>2-children<sp/>cluster<sp/>and<sp/>3-children<sp/>cluster</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>split,<sp/>and<sp/>insert<sp/>grandparent<sp/>node<sp/>into<sp/>parent<sp/>cluster</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insertion<sp/>into<sp/>3-children<sp/>cluster<sp/>(parent<sp/>node<sp/>is<sp/>RED)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insertion<sp/>into<sp/>4-children<sp/>cluster<sp/>(parent<sp/>node<sp/>is<sp/>RED)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1ab13cb365d1f3498f2061dbc67b0b64f3" kindref="member">insertRepair</ref>(rbt,<sp/>current);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insertion<sp/>into<sp/>0-children<sp/>root<sp/>cluster<sp/>(parent<sp/>node<sp/>is<sp/>BLACK)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insertion<sp/>into<sp/>2-children<sp/>cluster<sp/>(parent<sp/>node<sp/>is<sp/>BLACK)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insertion<sp/>into<sp/>3-children<sp/>cluster<sp/>(parent<sp/>node<sp/>is<sp/>BLACK)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>root<sp/>is<sp/>always<sp/>BLACK</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>insertion<sp/>into<sp/>0-children<sp/>root<sp/>cluster<sp/>or<sp/>insertion<sp/>into<sp/>4-children<sp/>root<sp/>cluster<sp/>require<sp/>this<sp/>recoloring</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" kindref="member">RB_FIRST</ref>(rbt)-&gt;color<sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" kindref="member">count</ref>++;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_node;</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>rebalance<sp/>after<sp/>insertion</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>RB_ROOT(rbt)<sp/>is<sp/>always<sp/>BLACK,<sp/>thus<sp/>never<sp/>reach<sp/>beyond<sp/>RB_FIRST(rbt)</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>after<sp/>insertRepair,<sp/>RB_FIRST(rbt)<sp/>might<sp/>be<sp/>RED</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="rb__tree_8c_1ab13cb365d1f3498f2061dbc67b0b64f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1ab13cb365d1f3498f2061dbc67b0b64f3" kindref="member">insertRepair</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*current)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*uncle;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>node<sp/>is<sp/>RED<sp/>and<sp/>parent<sp/>node<sp/>is<sp/>RED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref><sp/>==<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncle<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uncle-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insertion<sp/>into<sp/>4-children<sp/>cluster<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncle-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>send<sp/>grandparent<sp/>node<sp/>up<sp/>the<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>;<sp/></highlight><highlight class="comment">/*<sp/>goto<sp/>loop<sp/>or<sp/>break<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insertion<sp/>into<sp/>3-children<sp/>cluster<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>equivalent<sp/>BST<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1ac759dc1b9dd51f2cf78c9122dcc5acae" kindref="member">rotateLeft</ref>(rbt,<sp/>current);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3-children<sp/>cluster<sp/>has<sp/>two<sp/>representations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;<sp/></highlight><highlight class="comment">/*<sp/>thus<sp/>goto<sp/>break<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a415b3985875cc2a5f17ff3f87d8d7895" kindref="member">rotateRight</ref>(rbt,<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncle<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uncle-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insertion<sp/>into<sp/>4-children<sp/>cluster<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncle-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>send<sp/>grandparent<sp/>node<sp/>up<sp/>the<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>;<sp/></highlight><highlight class="comment">/*<sp/>goto<sp/>loop<sp/>or<sp/>break<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>insertion<sp/>into<sp/>3-children<sp/>cluster<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>equivalent<sp/>BST<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a415b3985875cc2a5f17ff3f87d8d7895" kindref="member">rotateRight</ref>(rbt,<sp/>current);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3-children<sp/>cluster<sp/>has<sp/>two<sp/>representations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;<sp/></highlight><highlight class="comment">/*<sp/>thus<sp/>goto<sp/>break<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1ac759dc1b9dd51f2cf78c9122dcc5acae" kindref="member">rotateLeft</ref>(rbt,<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>delete<sp/>node</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>return<sp/>NULL<sp/>if<sp/>keep<sp/>is<sp/>zero<sp/>(already<sp/>freed)</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="rb__tree_8c_1a8b7898139f560f35aa433a637c2a5381" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="rb__tree_8c_1a8b7898139f560f35aa433a637c2a5381" kindref="member">rbDelete</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keep)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*target,<sp/>*child;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/>node-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>choose<sp/>node&apos;s<sp/>in-order<sp/>successor<sp/>if<sp/>it<sp/>has<sp/>two<sp/>children<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>==<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt)<sp/>||<sp/>node-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>==<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt))<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>RB_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rbt-&gt;<ref refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" kindref="member">min</ref><sp/>==<sp/>target)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" kindref="member">min</ref><sp/>=<sp/><ref refid="rb__tree_8c_1a70293914fa5f96508b9b502d7f3bb5dc" kindref="member">rbSuccessor</ref>(rbt,<sp/>target);<sp/></highlight><highlight class="comment">/*<sp/>deleted,<sp/>thus<sp/>min<sp/>=<sp/>successor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/><ref refid="rb__tree_8c_1a70293914fa5f96508b9b502d7f3bb5dc" kindref="member">rbSuccessor</ref>(rbt,<sp/>node);<sp/></highlight><highlight class="comment">/*<sp/>node-&gt;right<sp/>must<sp/>not<sp/>be<sp/>NIL,<sp/>thus<sp/>move<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref><sp/>=<sp/>target-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>;<sp/></highlight><highlight class="comment">/*<sp/>data<sp/>swapped<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>RB_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>min<sp/>==<sp/>node,<sp/>then<sp/>min<sp/>=<sp/>successor<sp/>=<sp/>node<sp/>(swapped),<sp/>thus<sp/>idle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>min<sp/>==<sp/>target,<sp/>then<sp/>min<sp/>=<sp/>successor,<sp/>which<sp/>is<sp/>not<sp/>the<sp/>minimal,<sp/>thus<sp/>impossible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>child<sp/>=<sp/>(target-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>==<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt))<sp/>?<sp/>target-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>:<sp/>target-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>;<sp/></highlight><highlight class="comment">/*<sp/>child<sp/>may<sp/>be<sp/>NIL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>deletion<sp/>from<sp/>red-black<sp/>tree</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>4-children<sp/>cluster<sp/>(RED<sp/>target<sp/>node)<sp/>becomes<sp/>3-children<sp/>cluster</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>done</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>3-children<sp/>cluster<sp/>(RED<sp/>target<sp/>node)<sp/>becomes<sp/>2-children<sp/>cluster</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>done</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>3-children<sp/>cluster<sp/>(BLACK<sp/>target<sp/>node,<sp/>RED<sp/>child<sp/>node)<sp/>becomes<sp/>2-children<sp/>cluster</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>paint<sp/>child<sp/>node<sp/>BLACK,<sp/>and<sp/>done</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>2-children<sp/>root<sp/>cluster<sp/>(BLACK<sp/>target<sp/>node,<sp/>BLACK<sp/>child<sp/>node)<sp/>becomes<sp/>0-children<sp/>root<sp/>cluster</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>done</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>2-children<sp/>cluster<sp/>(BLACK<sp/>target<sp/>node,<sp/>4-children<sp/>sibling<sp/>cluster)<sp/>becomes<sp/>3-children<sp/>cluster</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>transfer,<sp/>and<sp/>done</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>2-children<sp/>cluster<sp/>(BLACK<sp/>target<sp/>node,<sp/>3-children<sp/>sibling<sp/>cluster)<sp/>becomes<sp/>2-children<sp/>cluster</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>transfer,<sp/>and<sp/>done</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>2-children<sp/>cluster<sp/>(BLACK<sp/>target<sp/>node,<sp/>2-children<sp/>sibling<sp/>cluster,<sp/>3/4-children<sp/>parent<sp/>cluster)<sp/>becomes<sp/>3-children<sp/>cluster</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>fuse,<sp/>paint<sp/>parent<sp/>node<sp/>BLACK,<sp/>and<sp/>done</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>2-children<sp/>cluster<sp/>(BLACK<sp/>target<sp/>node,<sp/>2-children<sp/>sibling<sp/>cluster,<sp/>2-children<sp/>parent<sp/>cluster)<sp/>becomes<sp/>3-children<sp/>cluster</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>fuse,<sp/>and<sp/>delete<sp/>parent<sp/>node<sp/>from<sp/>parent<sp/>cluster</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(target-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deletion<sp/>from<sp/>3-children<sp/>cluster<sp/>(BLACK<sp/>target<sp/>node,<sp/>RED<sp/>child<sp/>node)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target<sp/>==<sp/><ref refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" kindref="member">RB_FIRST</ref>(rbt))<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deletion<sp/>from<sp/>2-children<sp/>root<sp/>cluster<sp/>(BLACK<sp/>target<sp/>node,<sp/>BLACK<sp/>child<sp/>node)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deletion<sp/>from<sp/>2-children<sp/>cluster<sp/>(BLACK<sp/>target<sp/>node,<sp/>...)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a04068304a12638e388a3c80475230dcd" kindref="member">deleteRepair</ref>(rbt,<sp/>target);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deletion<sp/>from<sp/>4-children<sp/>cluster<sp/>(RED<sp/>target<sp/>node)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deletion<sp/>from<sp/>3-children<sp/>cluster<sp/>(RED<sp/>target<sp/>node)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child<sp/>!=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt))</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref><sp/>=<sp/>target-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target<sp/>==<sp/>target-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>=<sp/>child;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>=<sp/>child;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>uvFree(target);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>keep<sp/>or<sp/>discard<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keep<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1aee517470215137b01402d349e2650355" kindref="member">destroy</ref>(data);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" kindref="member">count</ref><sp/>--;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/>rebalance<sp/>after<sp/>deletion</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="rb__tree_8c_1a04068304a12638e388a3c80475230dcd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a04068304a12638e388a3c80475230dcd" kindref="member">deleteRepair</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*current)</highlight></codeline>
<codeline lineno="435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*sibling;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sibling-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>perform<sp/>an<sp/>adjustment<sp/>(3-children<sp/>parent<sp/>cluster<sp/>has<sp/>two<sp/>representations)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1ac759dc1b9dd51f2cf78c9122dcc5acae" kindref="member">rotateLeft</ref>(rbt,<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sibling<sp/>node<sp/>must<sp/>be<sp/>BLACK<sp/>now<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sibling-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref><sp/>&amp;&amp;<sp/>sibling-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>2-children<sp/>sibling<sp/>cluster,<sp/>fuse<sp/>by<sp/>recoloring<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>3/4-children<sp/>parent<sp/>cluster<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>goto<sp/>break<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>2-children<sp/>parent<sp/>cluster<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>;<sp/></highlight><highlight class="comment">/*<sp/>goto<sp/>loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3/4-children<sp/>sibling<sp/>cluster<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>perform<sp/>an<sp/>adjustment<sp/>(3-children<sp/>sibling<sp/>cluster<sp/>has<sp/>two<sp/>representations)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sibling-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a415b3985875cc2a5f17ff3f87d8d7895" kindref="member">rotateRight</ref>(rbt,<sp/>sibling);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>transfer<sp/>by<sp/>rotation<sp/>and<sp/>recoloring<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref>;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1ac759dc1b9dd51f2cf78c9122dcc5acae" kindref="member">rotateLeft</ref>(rbt,<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>goto<sp/>break<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sibling-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>perform<sp/>an<sp/>adjustment<sp/>(3-children<sp/>parent<sp/>cluster<sp/>has<sp/>two<sp/>representations)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a415b3985875cc2a5f17ff3f87d8d7895" kindref="member">rotateRight</ref>(rbt,<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sibling<sp/>node<sp/>must<sp/>be<sp/>BLACK<sp/>now<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sibling-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref><sp/>&amp;&amp;<sp/>sibling-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>2-children<sp/>sibling<sp/>cluster,<sp/>fuse<sp/>by<sp/>recoloring<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>3/4-children<sp/>parent<sp/>cluster<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>goto<sp/>break<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>2-children<sp/>parent<sp/>cluster<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>;<sp/></highlight><highlight class="comment">/*<sp/>goto<sp/>loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3/4-children<sp/>sibling<sp/>cluster<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>perform<sp/>an<sp/>adjustment<sp/>(3-children<sp/>sibling<sp/>cluster<sp/>has<sp/>two<sp/>representations)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sibling-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1ac759dc1b9dd51f2cf78c9122dcc5acae" kindref="member">rotateLeft</ref>(rbt,<sp/>sibling);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling<sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>transfer<sp/>by<sp/>rotation<sp/>and<sp/>recoloring<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sibling-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref>;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a415b3985875cc2a5f17ff3f87d8d7895" kindref="member">rotateRight</ref>(rbt,<sp/>current-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>goto<sp/>break<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/><ref refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" kindref="member">RB_FIRST</ref>(rbt));</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>check<sp/>order<sp/>of<sp/>tree</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="rb__tree_8c_1a0eb9842e366817eb18eac0e319fb04db" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a0eb9842e366817eb18eac0e319fb04db" kindref="member">rbCheckOrder</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*min,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*max)</highlight></codeline>
<codeline lineno="526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1abce051a2c66739dc7d5cd3f8bd81868a" kindref="member">checkOrder</ref>(rbt,<sp/><ref refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" kindref="member">RB_FIRST</ref>(rbt),<sp/>min,<sp/>max);</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*<sp/>check<sp/>order<sp/>recursively</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533" refid="rb__tree_8c_1abce051a2c66739dc7d5cd3f8bd81868a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1abce051a2c66739dc7d5cd3f8bd81868a" kindref="member">checkOrder</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*n,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*min,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*max)</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt))</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>RB_DUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rbt-&gt;<ref refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" kindref="member">compare</ref>(n-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>,<sp/>min)<sp/>&lt;<sp/>0<sp/>||<sp/>rbt-&gt;<ref refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" kindref="member">compare</ref>(n-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>,<sp/>max)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rbt-&gt;<ref refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" kindref="member">compare</ref>(n-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>,<sp/>min)<sp/>&lt;=<sp/>0<sp/>||<sp/>rbt-&gt;<ref refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" kindref="member">compare</ref>(n-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>,<sp/>max)<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1abce051a2c66739dc7d5cd3f8bd81868a" kindref="member">checkOrder</ref>(rbt,<sp/>n-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>,<sp/>min,<sp/>n-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>)<sp/>&amp;&amp;<sp/><ref refid="rb__tree_8c_1abce051a2c66739dc7d5cd3f8bd81868a" kindref="member">checkOrder</ref>(rbt,<sp/>n-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>,<sp/>n-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>,<sp/>max);</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*<sp/>check<sp/>black<sp/>height<sp/>of<sp/>tree</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="rb__tree_8c_1aa02803c2713094e61fa50807fa7a5116" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1aa02803c2713094e61fa50807fa7a5116" kindref="member">rbCheckBlackHeight</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt)</highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="rb__tree_8h_1a98eb926978664a4bb7da0a93ec4b2239" kindref="member">RB_ROOT</ref>(rbt)-&gt;color<sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref><sp/>||<sp/><ref refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" kindref="member">RB_FIRST</ref>(rbt)-&gt;color<sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref><sp/>||<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt)-&gt;color<sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a81ab202c619b8ca1ec96a15a81cb21ef" kindref="member">checkBlackHeight</ref>(rbt,<sp/><ref refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" kindref="member">RB_FIRST</ref>(rbt));</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*<sp/>check<sp/>black<sp/>height<sp/>recursively</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="rb__tree_8c_1a81ab202c619b8ca1ec96a15a81cb21ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a81ab202c619b8ca1ec96a15a81cb21ef" kindref="member">checkBlackHeight</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*n)</highlight></codeline>
<codeline lineno="563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lbh,<sp/>rbh;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt))</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref><sp/>&amp;&amp;<sp/>(n-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref><sp/>||<sp/>n-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref><sp/>||<sp/>n-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref>))</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((lbh<sp/>=<sp/><ref refid="rb__tree_8c_1a81ab202c619b8ca1ec96a15a81cb21ef" kindref="member">checkBlackHeight</ref>(rbt,<sp/>n-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rbh<sp/>=<sp/><ref refid="rb__tree_8c_1a81ab202c619b8ca1ec96a15a81cb21ef" kindref="member">checkBlackHeight</ref>(rbt,<sp/>n-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lbh<sp/>!=<sp/>rbh)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lbh<sp/>+<sp/>(n-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" kindref="member">BLACK</ref><sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*<sp/>print<sp/>tree</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587" refid="rb__tree_8c_1a447d21f412285d3455356d2975a6ced3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a447d21f412285d3455356d2975a6ced3" kindref="member">rbPrint</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*print_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))</highlight></codeline>
<codeline lineno="588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n--\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a99da652ba3b85adc7824b99a076187b6" kindref="member">print</ref>(rbt,<sp/><ref refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" kindref="member">RB_FIRST</ref>(rbt),<sp/>print_func,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\ncheckBlackHeight<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="rb__tree_8c_1aa02803c2713094e61fa50807fa7a5116" kindref="member">rbCheckBlackHeight</ref>(rbt));</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*<sp/>print<sp/>node<sp/>recursively</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597" refid="rb__tree_8c_1a99da652ba3b85adc7824b99a076187b6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a99da652ba3b85adc7824b99a076187b6" kindref="member">print</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*n,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*print_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*label)</highlight></codeline>
<codeline lineno="598"><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt))<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a99da652ba3b85adc7824b99a076187b6" kindref="member">print</ref>(rbt,<sp/>n-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>,<sp/>print_func,<sp/>depth<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;R&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%*s&quot;</highlight><highlight class="normal">,<sp/>8<sp/>*<sp/>depth,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s:<sp/>&quot;</highlight><highlight class="normal">,<sp/>label);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_func(n-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>(%s)\n&quot;</highlight><highlight class="normal">,<sp/>n-&gt;<ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref><sp/>==<sp/><ref refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" kindref="member">RED</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a99da652ba3b85adc7824b99a076187b6" kindref="member">print</ref>(rbt,<sp/>n-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>,<sp/>print_func,<sp/>depth<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;L&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*<sp/>destroy<sp/>node<sp/>recursively</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>destroy(rbtree<sp/>*rbt,<sp/>rbnode<sp/>*n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(n<sp/>!=<sp/>RB_NIL(rbt))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>destroy(rbt,<sp/>n-&gt;left);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>destroy(rbt,<sp/>n-&gt;right);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>rbt-&gt;destroy(n-&gt;data);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>free(n);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>to<sp/>delete<sp/>all<sp/>the<sp/>nodes<sp/>in<sp/>a<sp/>tree<sp/>and<sp/>free<sp/>their<sp/>data<sp/>as<sp/>well</highlight></codeline>
<codeline lineno="627"><highlight class="comment"></highlight></codeline>
<codeline lineno="628"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629" refid="rb__tree_8c_1a0c6878a92eb6e665e3bc9849053e1d5a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a0c6878a92eb6e665e3bc9849053e1d5a" kindref="member">destroyAllNodes</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*n){</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>==<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt)){</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref><sp/>!=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt)){</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>==<sp/>n){</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//is<sp/>left<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stack_sz<sp/>=<sp/>(1+(rbt-&gt;<ref refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" kindref="member">count</ref>)/2);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stack_top<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref>**<sp/>del_stack<sp/>=<sp/>uvMalloc(stack_sz*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structrbnode" kindref="compound">rbnode</ref>*));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(del_stack<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//FUCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref>*<sp/>tmp;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>del_stack[stack_top]<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>stack_top++;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_top--;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>del_stack[stack_top];</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp<sp/>==<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt)){</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>!=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt)<sp/>&amp;&amp;<sp/>tmp-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref><sp/>!=<sp/>NULL){<sp/></highlight><highlight class="comment">//add<sp/>left<sp/>to<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del_stack[stack_top]<sp/>=<sp/>tmp-&gt;<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_top++;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>!=<sp/><ref refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" kindref="member">RB_NIL</ref>(rbt)<sp/>&amp;&amp;<sp/>tmp-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref><sp/>!=<sp/>NULL){<sp/></highlight><highlight class="comment">//add<sp/>right<sp/>to<sp/>stack<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del_stack[stack_top]<sp/>=<sp/>tmp-&gt;<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_top++;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rbt-&gt;<ref refid="structrbtree_1aee517470215137b01402d349e2650355" kindref="member">destroy</ref>(tmp-&gt;<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvFree(tmp);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(stack_top<sp/>&gt;<sp/>0);<sp/></highlight><highlight class="comment">//stack<sp/>top<sp/>being<sp/>0<sp/>indicates<sp/>that<sp/>we<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>uvFree(del_stack);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Core/Src/rb_tree.c"/>
  </compounddef>
</doxygen>
