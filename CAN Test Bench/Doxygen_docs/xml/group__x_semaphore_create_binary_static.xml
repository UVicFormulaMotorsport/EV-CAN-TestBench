<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__x_semaphore_create_binary_static" kind="group">
    <compoundname>xSemaphoreCreateBinaryStatic</compoundname>
    <title>xSemaphoreCreateBinaryStatic</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>semphr. h <preformatted>SemaphoreHandle_t xSemaphoreCreateBinaryStatic( StaticSemaphore_t *pxSemaphoreBuffer )</preformatted></para>
<para>Creates a new binary semaphore instance, and returns a handle by which the new semaphore can be referenced.</para>
<para>NOTE: In many usage scenarios it is faster and more memory efficient to use a direct to task notification in place of a binary semaphore! <ulink url="http://www.freertos.org/RTOS-task-notifications.html">http://www.freertos.org/RTOS-task-notifications.html</ulink></para>
<para>Internally, within the FreeRTOS implementation, binary semaphores use a block of memory, in which the semaphore structure is stored. If a binary semaphore is created using xSemaphoreCreateBinary() then the required memory is automatically dynamically allocated inside the xSemaphoreCreateBinary() function. (see <ulink url="http://www.freertos.org/a00111.html">http://www.freertos.org/a00111.html</ulink>). If a binary semaphore is created using xSemaphoreCreateBinaryStatic() then the application writer must provide the memory. xSemaphoreCreateBinaryStatic() therefore allows a binary semaphore to be created without using any dynamic memory allocation.</para>
<para>This type of semaphore can be used for pure synchronisation between tasks or between an interrupt and a task. The semaphore need not be given back once obtained, so one task/interrupt can continuously &apos;give&apos; the semaphore while another continuously &apos;takes&apos; the semaphore. For this reason this type of semaphore does not use a priority inheritance mechanism. For an alternative that does use priority inheritance see xSemaphoreCreateMutex().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pxSemaphoreBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Must point to a variable of type StaticSemaphore_t, which will then be used to hold the semaphore&apos;s data structure, removing the need for the memory to be allocated dynamically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the semaphore is created then a handle to the created semaphore is returned. If pxSemaphoreBuffer is NULL then NULL is returned.</para>
</simplesect>
Example usage: <preformatted>
SemaphoreHandle_t xSemaphore = NULL;
StaticSemaphore_t xSemaphoreBuffer;</preformatted></para>
<para><preformatted>void vATask( void * pvParameters )
{
   // Semaphore cannot be used before a call to xSemaphoreCreateBinary().
   // The semaphore&apos;s data structures will be placed in the xSemaphoreBuffer
   // variable, the address of which is passed into the function.  The
   // function&apos;s parameter is not NULL, so the function will not attempt any
   // dynamic memory allocation, and therefore the function will not return
   // return NULL.
   xSemaphore = xSemaphoreCreateBinary( &amp;xSemaphoreBuffer );</preformatted></para>
<para><preformatted>   // Rest of task code goes here.
}
</preformatted> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
