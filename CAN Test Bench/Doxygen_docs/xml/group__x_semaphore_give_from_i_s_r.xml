<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__x_semaphore_give_from_i_s_r" kind="group">
    <compoundname>xSemaphoreGiveFromISR</compoundname>
    <title>xSemaphoreGiveFromISR</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>semphr. h <preformatted>
xSemaphoreGiveFromISR(
                         SemaphoreHandle_t xSemaphore,
                         BaseType_t *pxHigherPriorityTaskWoken
                     )</preformatted></para>
<para><emphasis>Macro</emphasis> to release a semaphore. The semaphore must have previously been created with a call to xSemaphoreCreateBinary() or xSemaphoreCreateCounting().</para>
<para>Mutex type semaphores (those created using a call to xSemaphoreCreateMutex()) must not be used with this macro.</para>
<para>This macro can be used from an ISR.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xSemaphore</parametername>
</parameternamelist>
<parameterdescription>
<para>A handle to the semaphore being released. This is the handle returned when the semaphore was created.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxHigherPriorityTaskWoken</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="semphr_8h_1a68aa43df8b2a0dbe17d05fad74670ef0" kindref="member">xSemaphoreGiveFromISR()</ref> will set *pxHigherPriorityTaskWoken to pdTRUE if giving the semaphore caused a task to unblock, and the unblocked task has a priority higher than the currently running task. If <ref refid="semphr_8h_1a68aa43df8b2a0dbe17d05fad74670ef0" kindref="member">xSemaphoreGiveFromISR()</ref> sets this value to pdTRUE then a context switch should be requested before the interrupt is exited.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdTRUE if the semaphore was successfully given, otherwise errQUEUE_FULL.</para>
</simplesect>
Example usage: <preformatted>
#define LONG_TIME 0xffff
#define TICKS_TO_WAIT  10
SemaphoreHandle_t xSemaphore = NULL;</preformatted></para>
<para><preformatted>// Repetitive task.
void vATask( void * pvParameters )
{
   for( ;; )
   {
       // We want this task to run every 10 ticks of a timer.  The semaphore
       // was created before this task was started.</preformatted></para>
<para><preformatted>       // Block waiting for the semaphore to become available.
       if( <ref refid="semphr_8h_1af116e436d2a5ae5bd72dbade2b5ea930" kindref="member">xSemaphoreTake( xSemaphore, LONG_TIME )</ref> == pdTRUE )
       {
           // It is time to execute.</preformatted></para>
<para><preformatted>           // ...</preformatted></para>
<para><preformatted>           // We have finished our task.  Return to the top of the loop where
           // we will block on the semaphore until it is time to execute
           // again.  Note when using the semaphore for synchronisation with an
        // ISR in this manner there is no need to &apos;give&apos; the semaphore back.
       }
   }
}</preformatted></para>
<para><preformatted>// Timer ISR
void vTimerISR( void * pvParameters )
{
static uint8_t ucLocalTickCount = 0;
static BaseType_t xHigherPriorityTaskWoken;</preformatted></para>
<para><preformatted>   // A timer tick has occurred.</preformatted></para>
<para><preformatted>   // ... Do other time functions.</preformatted></para>
<para><preformatted>   // Is it time for vATask () to run?
   xHigherPriorityTaskWoken = pdFALSE;
   ucLocalTickCount++;
   if( ucLocalTickCount &gt;= TICKS_TO_WAIT )
   {
       // Unblock the task by releasing the semaphore.
       <ref refid="semphr_8h_1a68aa43df8b2a0dbe17d05fad74670ef0" kindref="member">xSemaphoreGiveFromISR( xSemaphore, &amp;xHigherPriorityTaskWoken )</ref>;</preformatted></para>
<para><preformatted>       // Reset the count so we release the semaphore again in 10 ticks time.
       ucLocalTickCount = 0;
   }</preformatted></para>
<para><preformatted>   if( xHigherPriorityTaskWoken != pdFALSE )
   {
       // We can force a context switch here.  Context switching from an
       // ISR uses port specific syntax.  Check the demo task for your port
       // to find the syntax required.
   }
}
</preformatted> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
