<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__state__engine__api" kind="group">
    <compoundname>state_engine_api</compoundname>
    <title>State Engine API</title>
    <innerclass refid="structuv__scd__response" prot="public">uv_scd_response</innerclass>
    <innerclass refid="structtask__management__info" prot="public">task_management_info</innerclass>
    <innerclass refid="structtask__status__block" prot="public">task_status_block</innerclass>
    <innerclass refid="structuv__os__settings" prot="public">uv_os_settings</innerclass>
    <innerclass refid="structuv__task__info" prot="public">uv_task_info</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__state__engine__api_1ga259abff5a03eaf908dc8f03d99f478e4" prot="public" static="no" strong="no">
        <type></type>
        <name>uv_vehicle_state_t</name>
        <enumvalue id="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a5e3e7ecab0a58b320912cb4129641579" prot="public">
          <name>UV_INIT</name>
          <initializer>= 0x0001</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Vehicle is in the process of initializing </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a9ec1eef180c6208b25b08f0526dc5eb8" prot="public">
          <name>UV_READY</name>
          <initializer>= 0x0002</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Vehicle has initialized and is ready to drive </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4abed5371c079ef927fb67d8bb8e8aa286" prot="public">
          <name>PROGRAMMING</name>
          <initializer>= 0x0004</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The settings of the vehicle are being edited now </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4aa4f9f0d81d66079ab97ea3abc3808969" prot="public">
          <name>UV_DRIVING</name>
          <initializer>= 0x0008</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The vehicle is actively driving </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4abfddf18c580c465bb3c27b522aa4e4a9" prot="public">
          <name>UV_SUSPENDED</name>
          <initializer>= 0x0010</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The vehicle is not allowed to produce any torque, but not full shutdown </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a7ff39f8abdc9adbfd693e412e4aaeb6e" prot="public">
          <name>UV_LAUNCH_CONTROL</name>
          <initializer>= 0x0020</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The vehicle is presently in launch control mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4ac1fcacc095b8c0f1c9f452d51815bcb5" prot="public">
          <name>UV_ERROR_STATE</name>
          <initializer>= 0x0040</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Some error has occurred here </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4afdfc4cdb8c5210e05bdfdc3df51f80ff" prot="public">
          <name>UV_BOOT</name>
          <initializer>= 0x0080</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Pre-init, when the boot loader is going </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a2d3dc239e61931f9f779b71e84005b1b" prot="public">
          <name>UV_HALT</name>
          <initializer>= 0x0100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop literally everything, except for what is needed to reset vehicle </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Type representing the overall state and operating mode of the vehicle. </para>
        </briefdescription>
        <detaileddescription>
<para>Type made to represent the state of the vehicle, and the location in the state machine The states are powers of two to make it easier to discern tasks that need to happen in multiple states </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="81" column="32" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="81" bodyend="91"/>
      </memberdef>
      <memberdef kind="enum" id="group__state__engine__api_1gaf11e8677926913f2dd803fabbed3455c" prot="public" static="no" strong="no">
        <type></type>
        <name>uv_task_cmd_e</name>
        <enumvalue id="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca3641b5b35403903b66faf4d615c3199d" prot="public">
          <name>UV_NO_CMD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The SCD has issued no command, and therefore no action is required </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca0e75e398c2bbcb663eaeb98684ca69d6" prot="public">
          <name>UV_KILL_CMD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The SCD has decreed that this task must be deleted </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca5f389a67f2a45fe1f51492b3b8f04077" prot="public">
          <name>UV_SUSPEND_CMD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The SCD has decreed that this task must be suspended </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455cabac2ecce11df7b3e4b872ba4d22f7564" prot="public">
          <name>UV_TASK_START_CMD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>OK for task to begin execution </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Special commands used to start and shutdown tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="96" column="27" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="enum" id="group__state__engine__api_1gadfdfabf66fb37e4e702a1019bf1a9a76" prot="public" static="no" strong="no">
        <type></type>
        <name>uv_scd_response_e</name>
        <enumvalue id="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a886d929188a37a7fdae4b18b65a261ca" prot="public">
          <name>UV_SUCCESSFUL_DELETION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Returned when a task was successfully deleted </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a75d7f4415a6450a9c3d35aaf7b9577cd" prot="public">
          <name>UV_SUCCESSFUL_SUSPENSION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Returned when a task is successfully suspended </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76aa66da42f9355512e286812074433015b" prot="public">
          <name>UV_COULDNT_DELETE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task was not successfully deleted </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a3c33585e5ac7f76a9bc4dc1fccb764ec" prot="public">
          <name>UV_COULDNT_SUSPEND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task was not successfully suspended </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a0dd4e6d2bbbde83536ed21ac4ce2bd00" prot="public">
          <name>UV_UNSAFE_STATE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task has ended up in a fucked middle ground state </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Response from a task confirming it has been either deleted or suspended. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="106" column="23" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="106" bodyend="112"/>
      </memberdef>
      <memberdef kind="enum" id="group__state__engine__api_1gac94b6bd11853173599ccff034055cc88" prot="public" static="no" strong="no">
        <type></type>
        <name>uv_task_state_t</name>
        <enumvalue id="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" prot="public">
          <name>UV_TASK_NOT_STARTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" prot="public">
          <name>UV_TASK_DELETED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88ad4da927019afea812b31d46d28b7354c" prot="public">
          <name>UV_TASK_RUNNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" prot="public">
          <name>UV_TASK_SUSPENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum representing the state of a managed task. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used as a flag to indicate whether or not the state_engine is aware of a task is running or not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="124" column="29" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="enum" id="group__state__engine__api_1ga6166ed80f8e3bd62f1e7e6122c8817f6" prot="public" static="no" strong="no">
        <type></type>
        <name>task_priority</name>
        <enumvalue id="group__state__engine__api_1gga6166ed80f8e3bd62f1e7e6122c8817f6ae1e0864e3b20ced26bebc93aa0766aec" prot="public">
          <name>IDLE_TASK_PRIORITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga6166ed80f8e3bd62f1e7e6122c8817f6adb8ee22a232a2787f32ba28da55c43c1" prot="public">
          <name>LOW_PRIORITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga6166ed80f8e3bd62f1e7e6122c8817f6afe8b192d5f5af86fd93c4f84f7ef3383" prot="public">
          <name>BELOW_NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga6166ed80f8e3bd62f1e7e6122c8817f6a06b314d863076d54942e065d90c179c4" prot="public">
          <name>MEDIUM_PRIORITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga6166ed80f8e3bd62f1e7e6122c8817f6a052e6887345173e8b7556738c28fa920" prot="public">
          <name>ABOVE_NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga6166ed80f8e3bd62f1e7e6122c8817f6acb1785f11dd02aa7f5d164fb314c594e" prot="public">
          <name>HIGH_PRIORITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__state__engine__api_1gga6166ed80f8e3bd62f1e7e6122c8817f6aa20ceda9447596a05151a4a66db46a92" prot="public">
          <name>REALTIME_PRIORITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Priority of a managed task. Maps directly to OS priority. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="135" column="27" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="135" bodyend="143"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__state__engine__api_1ga140983d0a0ccbfd2d5f2c93183cbe797" prot="public" static="no">
        <type>enum <ref refid="group__state__engine__api_1ga259abff5a03eaf908dc8f03d99f478e4" kindref="member">uv_vehicle_state_t</ref></type>
        <definition>typedef enum uv_vehicle_state_t uv_vehicle_state</definition>
        <argsstring></argsstring>
        <name>uv_vehicle_state</name>
        <briefdescription>
<para>Type representing the overall state and operating mode of the vehicle. </para>
        </briefdescription>
        <detaileddescription>
<para>Type made to represent the state of the vehicle, and the location in the state machine The states are powers of two to make it easier to discern tasks that need to happen in multiple states </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="91" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__state__engine__api_1gae1b70a2c1baa7da5592e7324008636e4" prot="public" static="no">
        <type>enum <ref refid="group__state__engine__api_1gaf11e8677926913f2dd803fabbed3455c" kindref="member">uv_task_cmd_e</ref></type>
        <definition>typedef enum uv_task_cmd_e uv_task_cmd</definition>
        <argsstring></argsstring>
        <name>uv_task_cmd</name>
        <briefdescription>
<para>Special commands used to start and shutdown tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="101" column="12"/>
      </memberdef>
      <memberdef kind="typedef" id="group__state__engine__api_1ga856f7f6f3b6b92f655aafc552606ffea" prot="public" static="no">
        <type>struct <ref refid="structuv__scd__response" kindref="compound">uv_scd_response</ref></type>
        <definition>typedef struct uv_scd_response uv_scd_response</definition>
        <argsstring></argsstring>
        <name>uv_scd_response</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="117" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="group__state__engine__api_1ga82006c09ffd194e360785bb51a39ec3f" prot="public" static="no">
        <type>enum <ref refid="group__state__engine__api_1gac94b6bd11853173599ccff034055cc88" kindref="member">uv_task_state_t</ref></type>
        <definition>typedef enum uv_task_state_t  uv_task_status</definition>
        <argsstring></argsstring>
        <name>uv_task_status</name>
        <briefdescription>
<para>Enum representing the state of a managed task. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used as a flag to indicate whether or not the state_engine is aware of a task is running or not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="129" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="group__state__engine__api_1ga0faa8cc05082e150c515bbddea144d90" prot="public" static="no">
        <type>enum <ref refid="group__state__engine__api_1ga6166ed80f8e3bd62f1e7e6122c8817f6" kindref="member">task_priority</ref></type>
        <definition>typedef enum task_priority task_priority</definition>
        <argsstring></argsstring>
        <name>task_priority</name>
        <briefdescription>
<para>Priority of a managed task. Maps directly to OS priority. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="143" column="14"/>
      </memberdef>
      <memberdef kind="typedef" id="group__state__engine__api_1gae41267a13309a303a826aa55c4873a31" prot="public" static="no">
        <type>struct <ref refid="structtask__management__info" kindref="compound">task_management_info</ref></type>
        <definition>typedef struct task_management_info task_management_info</definition>
        <argsstring></argsstring>
        <name>task_management_info</name>
        <briefdescription>
<para>Struct to contain data about a parent task. </para>
        </briefdescription>
        <detaileddescription>
<para>This contains the information required for the child task to communicate with it&apos;s parent.</para>
<para>This will be a queue, since one parent task can in theory have several child tasks </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="157" column="21"/>
      </memberdef>
      <memberdef kind="typedef" id="group__state__engine__api_1ga0d368f40115996d74f2e3833ff1a5396" prot="public" static="no">
        <type>struct <ref refid="structtask__status__block" kindref="compound">task_status_block</ref></type>
        <definition>typedef struct task_status_block task_status_block</definition>
        <argsstring></argsstring>
        <name>task_status_block</name>
        <briefdescription>
<para>Information about the task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="165" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__state__engine__api_1ga4622e8f893111a8641c8e5a44df3d3dd" prot="public" static="no">
        <type>struct <ref refid="structuv__os__settings" kindref="compound">uv_os_settings</ref></type>
        <definition>typedef struct uv_os_settings uv_os_settings</definition>
        <argsstring></argsstring>
        <name>uv_os_settings</name>
        <briefdescription>
<para>Settings that dictate state engine behavior. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="178" column="15"/>
      </memberdef>
      <memberdef kind="typedef" id="group__state__engine__api_1gaebe69bead1b7c3a1371ffe610708e0ef" prot="public" static="no">
        <type>struct <ref refid="structuv__task__info" kindref="compound">uv_task_info</ref></type>
        <definition>typedef struct uv_task_info uv_task_info</definition>
        <argsstring></argsstring>
        <name>uv_task_info</name>
        <briefdescription>
<para>This struct is designed to hold neccessary information about an RTOS task that will be managed by uvfr_state_engine. </para>
        </briefdescription>
        <detaileddescription>
<para>Pay close attention, because this is one of the most cursed structs in the project, as well as one of the most important </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="258" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__state__engine__api_1gaa3ad3e8df75177c00265881c16563212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status changeVehicleState</definition>
        <argsstring>(uint16_t state)</argsstring>
        <name>changeVehicleState</name>
        <param>
          <type>uint16_t</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Function for changing the state of the vehicle, as well as the list of active + inactive tasks. </para>
        </briefdescription>
        <detaileddescription>
<para>This function also changes out the tasks that are executing, by invoking the legendary _state_change_daemon</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>is a member of <ref refid="uvfr__utils_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref>, and therefore a power of two </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para>a memeber of <ref refid="uvfr__utils_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref> depending on whether execution is successful</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage:</para>
<para><programlisting><codeline><highlight class="normal">if((brakepedal_pressed<sp/>==<sp/>true)<sp/>&amp;&amp;<sp/>(start_button_pressed<sp/>==<sp/>true)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>changeVehicleState(UV_DRIVING);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>As you can see, all you need to do is specify the new state. Naturally, the task should be ready to get deleted by the state_change_daemon, but that is neither here nor there. </para>
        </detaileddescription>
        <inbodydescription>
<para>If the state we wish to change to is the same as the state we&apos;re in, then no need to be executing any of this fancy code</para>
<para>Transition from <computeroutput>UV_INIT</computeroutput> to <computeroutput>UV_READY</computeroutput> states</para>
<para>Transition from <computeroutput>UV_INIT</computeroutput> to <computeroutput>UV_ERROR</computeroutput> states</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="86" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="86" bodyend="143"/>
        <references refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="868" endline="1041">_stateChangeDaemon</references>
        <references refid="group__utility__macros_1gade3043fb92536f8e1a616ba8aaef4ab9" compoundref="uvfr__utils_8h" startline="117">isPowerOfTwo</references>
        <references refid="structstate__change__daemon__args_1aa19a15c725f1fdc8dcc05227584153bc" compoundref="uvfr__state__engine_8c" startline="59">state_change_daemon_args::meta_task_handle</references>
        <references refid="group__state__engine_1ga2ce6eef16a78c095592954d2fe68af2e" compoundref="uvfr__state__engine_8c" startline="40">previous_state</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" compoundref="uvfr__utils_8h" startline="170">UV_ABORTED</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4ac1fcacc095b8c0f1c9f452d51815bcb5" compoundref="uvfr__state__engine_8h" startline="88">UV_ERROR_STATE</references>
        <references refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a5e3e7ecab0a58b320912cb4129641579" compoundref="uvfr__state__engine_8h" startline="82">UV_INIT</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a9ec1eef180c6208b25b08f0526dc5eb8" compoundref="uvfr__state__engine_8h" startline="83">UV_READY</references>
        <references refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" compoundref="uvfr__state__engine_8c" startline="39">vehicle_state</references>
        <referencedby refid="daq_8c_1a433bb586ceab47aed8d633fa2ff8ce56" compoundref="daq_8c" startline="62" endline="101">daqMasterTask</referencedby>
        <referencedby refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" compoundref="uvfr__utils_8c" startline="37" endline="229">uvInit</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvInitStateEngine</definition>
        <argsstring>()</argsstring>
        <name>uvInitStateEngine</name>
        <briefdescription>
<para>Function that prepares the state engine to do its thing. </para>
        </briefdescription>
        <detaileddescription>
<para>This is called when the system is first starting up. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="151" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="151" bodyend="172"/>
        <references refid="uvfr__utils_8h_1a92b5ac44171d49acd084c274385a043a" compoundref="uvfr__utils_8c" startline="263" endline="277">__uvInitPanic</references>
        <references refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" compoundref="uvfr__state__engine_8c" startline="26">_task_register</references>
        <references refid="daq_8h_1adecae26482eb2c3289131a2a486ac8b3" compoundref="daq_8c" startline="30" endline="57">initDaqTask</references>
        <references refid="driving__loop_8h_1af580185fb5bb1cfba30ee1709d90628c" compoundref="driving__loop_8c" startline="25" endline="59">initDrivingLoop</references>
        <references refid="odometer_8h_1ace344890a9a3f03e059a4eb44af85e00" compoundref="odometer_8c" startline="11" endline="40">initOdometer</references>
        <references refid="temp__monitoring_8h_1a4d862a74e85fea73d9089ed437f9859b" compoundref="temp__monitoring_8c" startline="12" endline="40">initTempMonitor</references>
        <references refid="group__state__engine_1ga8a80fe70c2d06583bbcd00c5162860c5" compoundref="uvfr__state__engine_8c" startline="20">MAX_NUM_MANAGED_TASKS</references>
        <references refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" compoundref="uvfr__state__engine_8c" startline="43">svc_task_manager</references>
        <references refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" compoundref="uvfr__state__engine_8c" startline="42">task_manager</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__backend_1ga20334b4aff0cfdab7be1d2864089c5ce" compoundref="uvfr__state__engine_8c" startline="1138" endline="1173">uvCreateServiceTask</references>
        <referencedby refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" compoundref="uvfr__utils_8c" startline="37" endline="229">uvInit</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvStartStateMachine</definition>
        <argsstring>()</argsstring>
        <name>uvStartStateMachine</name>
        <briefdescription>
<para>Actually starts up the state engine to do state engine things. </para>
        </briefdescription>
        <detaileddescription>
<para>This function ensures that all of the managed tasks are setup in a legal way, and then it allocates resources for, and starts the state engine and the background tasks. This unlocks the ability for the vehicle to do basically anything. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="179" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="179" bodyend="231"/>
        <references refid="group__state__engine_1ga2ce6eef16a78c095592954d2fe68af2e" compoundref="uvfr__state__engine_8c" startline="40">previous_state</references>
        <references refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" compoundref="uvfr__state__engine_8h" startline="220">uv_task_info::stack_size</references>
        <references refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" compoundref="uvfr__state__engine_8c" startline="43">svc_task_manager</references>
        <references refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" compoundref="uvfr__state__engine_8h" startline="243">uv_task_info::task_flags</references>
        <references refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" compoundref="uvfr__state__engine_8h" startline="216">uv_task_info::task_function</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" compoundref="uvfr__state__engine_8c" startline="42">task_manager</references>
        <references refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" compoundref="uvfr__state__engine_8h" startline="211">uv_task_info::task_name</references>
        <references refid="structuv__task__info_1ad157811debce6672bb6d00da7e90b6ca" compoundref="uvfr__state__engine_8h" startline="213">uv_task_info::task_period</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a5e3e7ecab0a58b320912cb4129641579" compoundref="uvfr__state__engine_8h" startline="82">UV_INIT</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1gab37af27fe89f1987ee38bdb0bc945c43" compoundref="uvfr__state__engine_8h" startline="200">UV_TASK_MISSION_CRITICAL</references>
        <references refid="group__state__engine__api_1ga4d87bda0a72990876364bd8764777cb2" compoundref="uvfr__state__engine_8h" startline="188">UV_TASK_SCD_IGNORE</references>
        <references refid="group__state__engine_1gaff684308203d45e9e16ad3d115c54279" compoundref="uvfr__state__engine_8c" startline="1284" endline="1335">uvSVCTaskManager</references>
        <references refid="group__state__engine__backend_1gaf2dbdd0d9d9aa8bcbef120661117fc5e" compoundref="uvfr__state__engine_8c" startline="1065" endline="1132">uvTaskManager</references>
        <references refid="group__state__engine__backend_1ga8c1618caac0d7f29836107f1a44833e8" compoundref="uvfr__state__engine_8c" startline="343" endline="356">uvValidateManagedTasks</references>
        <references refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" compoundref="uvfr__state__engine_8c" startline="39">vehicle_state</references>
        <referencedby refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" compoundref="uvfr__utils_8c" startline="37" endline="229">uvInit</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__api_1ga5cb739823b10b90a139315356aa6b22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvDeInitStateEngine</definition>
        <argsstring>()</argsstring>
        <name>uvDeInitStateEngine</name>
        <briefdescription>
<para>Stops and frees all resources used by uvfr_state_engine. </para>
        </briefdescription>
        <detaileddescription>
<para>If we need to initialize the state engine, gotta de-initialize as well. This is the opposite of <ref refid="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" kindref="member">uvInitStateEngine</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="239" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="239" bodyend="241"/>
        <references refid="group__state__engine__backend_1gab8a03e5812e395199b3b0003cd8266cb" compoundref="uvfr__state__engine_8c" startline="446" endline="458">killEmAll</references>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__api_1ga99bfc92472cdc99e9005e9d3c792909a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
        <definition>uv_task_info* uvCreateTask</definition>
        <argsstring>()</argsstring>
        <name>uvCreateTask</name>
        <briefdescription>
<para>This function gets called when you want to create a task, and register it with the task register. Theres some gnarlyness here, but not unacceptable levels. Pray this thing doesn&apos;t hang itself. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Do not exceed the number of tasks available</para>
<para>Acquire the pointer to the spot in the array, we are doing this since we need to return the pointer anyways, and it cleans up the syntax a little.</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="249" column="14" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="249" bodyend="287"/>
        <references refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" compoundref="uvfr__state__engine_8c" startline="25">_next_task_id</references>
        <references refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" compoundref="uvfr__state__engine_8c" startline="26">_task_register</references>
        <references refid="uvfr__state__engine_8h_1a32571accb85a2d8f479c6066d7a46238" compoundref="uvfr__state__engine_8h" startline="58">_UV_DEFAULT_TASK_STACK_SIZE</references>
        <references refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" compoundref="uvfr__state__engine_8h" startline="239">uv_task_info::active_states</references>
        <references refid="structuv__task__info_1a6986d7216c7f889164931b37ab752c29" compoundref="uvfr__state__engine_8h" startline="240">uv_task_info::deletion_states</references>
        <references refid="group__state__engine_1ga8a80fe70c2d06583bbcd00c5162860c5" compoundref="uvfr__state__engine_8c" startline="20">MAX_NUM_MANAGED_TASKS</references>
        <references refid="structuv__task__info_1a5d32fc8f47b905499257336c561d189b" compoundref="uvfr__state__engine_8h" startline="234">uv_task_info::parent</references>
        <references refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" compoundref="uvfr__state__engine_8h" startline="220">uv_task_info::stack_size</references>
        <references refid="structuv__task__info_1aafd4e2d916f50b54b99fd02d63831e43" compoundref="uvfr__state__engine_8h" startline="241">uv_task_info::suspension_states</references>
        <references refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" compoundref="uvfr__state__engine_8h" startline="243">uv_task_info::task_flags</references>
        <references refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" compoundref="uvfr__state__engine_8h" startline="216">uv_task_info::task_function</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" compoundref="uvfr__state__engine_8h" startline="210">uv_task_info::task_id</references>
        <references refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" compoundref="uvfr__state__engine_8h" startline="211">uv_task_info::task_name</references>
        <references refid="structuv__task__info_1aff45751f7189980589d55379d1d5a355" compoundref="uvfr__state__engine_8h" startline="217">uv_task_info::task_priority</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" compoundref="uvfr__state__engine_8h" startline="125">UV_TASK_NOT_STARTED</references>
        <references refid="group__state__engine__api_1ga253c75b331d0976b9a414657cef780cd" compoundref="uvfr__state__engine_8h" startline="181">UV_TASK_VEHICLE_APPLICATION</references>
        <referencedby refid="daq_8c_1af2c619df9f3d115dcbc511b0bb738e87" compoundref="daq_8c" startline="30" endline="57">initDaqTask</referencedby>
        <referencedby refid="driving__loop_8c_1af580185fb5bb1cfba30ee1709d90628c" compoundref="driving__loop_8c" startline="25" endline="59">initDrivingLoop</referencedby>
        <referencedby refid="odometer_8c_1ace344890a9a3f03e059a4eb44af85e00" compoundref="odometer_8c" startline="11" endline="40">initOdometer</referencedby>
        <referencedby refid="temp__monitoring_8c_1a979dc6ff14a3ef1f72e3cbea884871b0" compoundref="temp__monitoring_8c" startline="12" endline="40">initTempMonitor</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__state__engine__api_1ga253c75b331d0976b9a414657cef780cd" prot="public" static="no">
        <name>UV_TASK_VEHICLE_APPLICATION</name>
        <initializer>0x0001U&lt;&lt;(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="181" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga3142d67aec5c34719e90cf122948f1db" prot="public" static="no">
        <name>UV_TASK_PERIODIC_SVC</name>
        <initializer>0x0001U&lt;&lt;(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="182" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1gaae81d88a64e53c686e8e0fd01bfe723d" prot="public" static="no">
        <name>UV_TASK_DORMANT_SVC</name>
        <initializer>0b0000000000000011</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="183" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga056a2272c9356c78597c5c82bc58db2f" prot="public" static="no">
        <name>UV_TASK_GENERIC_SVC</name>
        <initializer>0x0001U&lt;&lt;(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="184" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga96c7c915194ecba48edd70def54a700b" prot="public" static="no">
        <name>UV_TASK_MANAGER_MASK</name>
        <initializer>0b0000000000000011</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="185" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1gafc49f7a5303ebabaa3fc0886d67f3e9a" prot="public" static="no">
        <name>UV_TASK_LOG_START_STOP_TIME</name>
        <initializer>0x0001U&lt;&lt;(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="186" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga0c0d91f0feee4f7b0816b3c06b61b459" prot="public" static="no">
        <name>UV_TASK_LOG_MEM_USAGE</name>
        <initializer>0x0001U&lt;&lt;(3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="187" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga4d87bda0a72990876364bd8764777cb2" prot="public" static="no">
        <name>UV_TASK_SCD_IGNORE</name>
        <initializer>0x0001U&lt;&lt;(4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="188" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga732a956baeb0b603c6c935f1bea13fab" prot="public" static="no">
        <name>UV_TASK_IS_PARENT</name>
        <initializer>0x0001U&lt;&lt;(5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="189" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga5030c3ffc04fb93607cf1d4880a66731" prot="public" static="no">
        <name>UV_TASK_IS_CHILD</name>
        <initializer>0x0001U&lt;&lt;(6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="190" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1gab3967da84c26663341e0cb2ed5177c70" prot="public" static="no">
        <name>UV_TASK_IS_ORPHAN</name>
        <initializer>0x0001U&lt;&lt;(7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="191" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga52394ced81b82c523082ed2c4bb9e2d7" prot="public" static="no">
        <name>UV_TASK_ERR_IN_CHILD</name>
        <initializer>0x0001U&lt;&lt;(8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="192" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga0ce66ea8b0c49749cc05a3ba06b2df75" prot="public" static="no">
        <name>UV_TASK_AWAITING_DELETION</name>
        <initializer>0x0001U&lt;&lt;(9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="193" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1gaf1374f633bd37be99d7d58e33270ce8c" prot="public" static="no">
        <name>UV_TASK_DEFER_DELETION</name>
        <initializer>0x0001U&lt;&lt;(10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="194" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga4d88012d785bba8a4aa943c23c4450a2" prot="public" static="no">
        <name>UV_TASK_DEADLINE_NOT_ENFORCED</name>
        <initializer>0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="195" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga337aaae50133aedb5d733b6ede6fb10d" prot="public" static="no">
        <name>UV_TASK_PRIO_INCREMENTATION</name>
        <initializer>0x0001U&lt;&lt;(11)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="196" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1gaa3b4befdf874ecfeac5face2cf1ae1a5" prot="public" static="no">
        <name>UV_TASK_DEADLINE_FIRM</name>
        <initializer>0x0001U&lt;&lt;(12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="197" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga50fac7a227841deccc8b30cef230ba08" prot="public" static="no">
        <name>UV_TASK_DEADLINE_HARD</name>
        <initializer>(0x0001U&lt;&lt;(11)|0x0001U&lt;&lt;(12))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="198" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga04e93f880387fe61195800f0dfaac0bd" prot="public" static="no">
        <name>UV_TASK_DEADLINE_MASK</name>
        <initializer>(0x0001U&lt;&lt;(11)|0x0001U&lt;&lt;(12))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="199" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1gab37af27fe89f1987ee38bdb0bc945c43" prot="public" static="no">
        <name>UV_TASK_MISSION_CRITICAL</name>
        <initializer>0x0001U&lt;&lt;(13)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="200" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga70b5081fb012f121afe19c5ad2da9622" prot="public" static="no">
        <name>UV_TASK_DELAYING</name>
        <initializer>0x0001U&lt;&lt;(14)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="201" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga07dcd5b5c28f257e50e0d04f519b5e7a" prot="public" static="no">
        <name>uvTaskSetDeletionBit</name>
        <param><defname>t</defname></param>
        <initializer>(t-&gt;task_flags|=<ref refid="group__state__engine__api_1ga0ce66ea8b0c49749cc05a3ba06b2df75" kindref="member">UV_TASK_AWAITING_DELETION</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="260" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1gabe734bf4eb30c1a532e083dc9bdf938c" prot="public" static="no">
        <name>uvTaskResetDeletionBit</name>
        <param><defname>t</defname></param>
        <initializer>(t-&gt;task_flags &amp;=(~<ref refid="group__state__engine__api_1ga0ce66ea8b0c49749cc05a3ba06b2df75" kindref="member">UV_TASK_AWAITING_DELETION</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="261" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga3cab3b3fd6589348dceaf91b14e2a6ef" prot="public" static="no">
        <name>uvTaskSetDelayBit</name>
        <param><defname>t</defname></param>
        <initializer>(t-&gt;task_flags|=<ref refid="group__state__engine__api_1ga70b5081fb012f121afe19c5ad2da9622" kindref="member">UV_TASK_DELAYING</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="263" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga2d3d223399d12a0af224266487f35483" prot="public" static="no">
        <name>uvTaskResetDelayBit</name>
        <param><defname>t</defname></param>
        <initializer>(t-&gt;task_flags&amp;=(~<ref refid="group__state__engine__api_1ga70b5081fb012f121afe19c5ad2da9622" kindref="member">UV_TASK_DELAYING</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="265" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga0e5d6feafad4764ab2ffd4604ab633b5" prot="public" static="no">
        <name>uvTaskIsDelaying</name>
        <param><defname>t</defname></param>
        <initializer>((t-&gt;task_flags&amp;<ref refid="group__state__engine__api_1ga70b5081fb012f121afe19c5ad2da9622" kindref="member">UV_TASK_DELAYING</ref>)==<ref refid="group__state__engine__api_1ga70b5081fb012f121afe19c5ad2da9622" kindref="member">UV_TASK_DELAYING</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="267" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga5073c1aa60fa9292bc88054a2184daee" prot="public" static="no">
        <name>uvTaskDelay</name>
        <param><defname>x</defname></param>
        <param><defname>t</defname></param>
        <initializer><ref refid="group__state__engine__api_1ga3cab3b3fd6589348dceaf91b14e2a6ef" kindref="member">uvTaskSetDelayBit</ref>(x);\
	vTaskDelay(t);\
	<ref refid="group__state__engine__api_1ga2d3d223399d12a0af224266487f35483" kindref="member">uvTaskResetDelayBit</ref>(x)</initializer>
        <briefdescription>
<para>State engine aware vTaskDelay wrapper. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>is how long to delay in ticks </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="274" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine__api_1ga1fc770ae6f3a6643548e0fb00a732ae5" prot="public" static="no">
        <name>uvTaskDelayUntil</name>
        <param><defname>x</defname></param>
        <param><defname>lasttim</defname></param>
        <param><defname>per</defname></param>
        <initializer><ref refid="group__state__engine__api_1ga3cab3b3fd6589348dceaf91b14e2a6ef" kindref="member">uvTaskSetDelayBit</ref>(x);\
	vTaskDelayUntil(&amp;lasttim,per);\
	<ref refid="group__state__engine__api_1ga2d3d223399d12a0af224266487f35483" kindref="member">uvTaskResetDelayBit</ref>(x)</initializer>
        <briefdescription>
<para>State engine aware vTaskDelayUntil wrapper. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lasttim</parametername>
</parameternamelist>
<parameterdescription>
<para>is the variable storing the last delay time. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>per</parametername>
</parameternamelist>
<parameterdescription>
<para>is the period.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This will cause the task to wait until the last time + the period. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/uvfr_state_engine.h" line="286" column="9" bodyfile="Core/Inc/uvfr_state_engine.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides publically available API for controlling vehicle state and error handling. </para>
    </briefdescription>
    <detaileddescription>
<para>The functions defined in this group are publicly accessible and can be called from either application or service tasks. These are not neccessarily interrupt safe, and therefore should not be called from them, unless they end with FromISR </para>
    </detaileddescription>
  </compounddef>
</doxygen>
