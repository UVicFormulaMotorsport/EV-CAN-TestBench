<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__x_message_buffer_receive" kind="group">
    <compoundname>xMessageBufferReceive</compoundname>
    <title>xMessageBufferReceive</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="message__buffer_8h" kindref="compound">message_buffer.h</ref></para>
<para><preformatted>
size_t xMessageBufferReceive( MessageBufferHandle_t xMessageBuffer,
                              void *pvRxData,
                              size_t xBufferLengthBytes,
                              TickType_t xTicksToWait );
</preformatted></para>
<para>Receives a discrete message from a message buffer. Messages can be of variable length and are copied out of the buffer.</para>
<para><emphasis><bold>NOTE</bold></emphasis>: Uniquely among FreeRTOS objects, the stream buffer implementation (so also the message buffer implementation, as message buffers are built on top of stream buffers) assumes there is only one task or interrupt that will write to the buffer (the writer), and only one task or interrupt that will read from the buffer (the reader). It is safe for the writer and reader to be different tasks or interrupts, but, unlike other FreeRTOS objects, it is not safe to have multiple different writers or multiple different readers. If there are to be multiple different writers then the application writer must place each call to a writing API function (such as <ref refid="message__buffer_8h_1a858f6da6fe24a226c45caf1634ea1605" kindref="member">xMessageBufferSend()</ref>) inside a critical section and set the send block time to 0. Likewise, if there are to be multiple different readers then the application writer must place each call to a reading API function (such as xMessageBufferRead()) inside a critical section and set the receive block time to 0.</para>
<para>Use <ref refid="message__buffer_8h_1af12a227ba511a95cbea5aa81c7f3ba12" kindref="member">xMessageBufferReceive()</ref> to read from a message buffer from a task. Use <ref refid="message__buffer_8h_1adf596c00c44752a3c8c542cc6b5df234" kindref="member">xMessageBufferReceiveFromISR()</ref> to read from a message buffer from an interrupt service routine (ISR).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xMessageBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the message buffer from which a message is being received.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvRxData</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer into which the received message is to be copied.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xBufferLengthBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer pointed to by the pvRxData parameter. This sets the maximum length of the message that can be received. If xBufferLengthBytes is too small to hold the next message then the message will be left in the message buffer and 0 will be returned.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTicksToWait</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time the task should remain in the Blocked state to wait for a message, should the message buffer be empty. <ref refid="message__buffer_8h_1af12a227ba511a95cbea5aa81c7f3ba12" kindref="member">xMessageBufferReceive()</ref> will return immediately if xTicksToWait is zero and the message buffer is empty. The block time is specified in tick periods, so the absolute time it represents is dependent on the tick frequency. The macro <ref refid="projdefs_8h_1a353d0f62b82a402cb3db63706c81ec3f" kindref="member">pdMS_TO_TICKS()</ref> can be used to convert a time specified in milliseconds into a time specified in ticks. Setting xTicksToWait to portMAX_DELAY will cause the task to wait indefinitely (without timing out), provided INCLUDE_vTaskSuspend is set to 1 in <ref refid="_free_r_t_o_s_config_8h" kindref="compound">FreeRTOSConfig.h</ref>. Tasks do not use any CPU time when they are in the Blocked state.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length, in bytes, of the message read from the message buffer, if any. If <ref refid="message__buffer_8h_1af12a227ba511a95cbea5aa81c7f3ba12" kindref="member">xMessageBufferReceive()</ref> times out before a message became available then zero is returned. If the length of the message is greater than xBufferLengthBytes then the message will be left in the message buffer and zero is returned.</para>
</simplesect>
Example use: <preformatted>
void vAFunction( MessageBuffer_t xMessageBuffer )
{
uint8_t ucRxData[ 20 ];
size_t xReceivedBytes;
const TickType_t xBlockTime = <ref refid="projdefs_8h_1a353d0f62b82a402cb3db63706c81ec3f" kindref="member">pdMS_TO_TICKS( 20 )</ref>;</preformatted></para>
<para><preformatted>    // Receive the next message from the message buffer.  Wait in the Blocked
    // state (so not using any CPU processing time) for a maximum of 100ms for
    // a message to become available.
    xReceivedBytes = xMessageBufferReceive( xMessageBuffer,
                                            ( void * ) ucRxData,
                                            sizeof( ucRxData ),
                                            xBlockTime );</preformatted></para>
<para><preformatted>    if( xReceivedBytes &gt; 0 )
    {
        // A ucRxData contains a message that is xReceivedBytes long.  Process
        // the message here....
    }
}
</preformatted> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
