<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__x_event_group_clear_bits_from_i_s_r" kind="group">
    <compoundname>xEventGroupClearBitsFromISR</compoundname>
    <title>xEventGroupClearBitsFromISR</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="event__groups_8h" kindref="compound">event_groups.h</ref> <preformatted>
   BaseType_t <ref refid="event__groups_8h_1a3d7de214a697f33fe7b914e26a93f33a" kindref="member">xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )</ref>;
</preformatted></para>
<para>A version of <ref refid="event__groups_8h_1a0fb72cfdd4f0d5f86d955fc3af448f2a" kindref="member">xEventGroupClearBits()</ref> that can be called from an interrupt.</para>
<para>Setting bits in an event group is not a deterministic operation because there are an unknown number of tasks that may be waiting for the bit or bits being set. FreeRTOS does not allow nondeterministic operations to be performed while interrupts are disabled, so protects event groups that are accessed from tasks by suspending the scheduler rather than disabling interrupts. As a result event groups cannot be accessed directly from an interrupt service routine. Therefore <ref refid="event__groups_8h_1a3d7de214a697f33fe7b914e26a93f33a" kindref="member">xEventGroupClearBitsFromISR()</ref> sends a message to the timer task to have the clear operation performed in the context of the timer task.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xEventGroup</parametername>
</parameternamelist>
<parameterdescription>
<para>The event group in which the bits are to be cleared.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uxBitsToClear</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitwise value that indicates the bit or bits to clear. For example, to clear bit 3 only, set uxBitsToClear to 0x08. To clear bit 3 and bit 0 set uxBitsToClear to 0x09.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the request to execute the function was posted successfully then pdPASS is returned, otherwise pdFALSE is returned. pdFALSE will be returned if the timer service queue was full.</para>
</simplesect>
Example usage: <preformatted>
  #define BIT_0 ( 1 &lt;&lt; 0 )
  #define BIT_4 ( 1 &lt;&lt; 4 )</preformatted></para>
<para><preformatted>  // An event group which it is assumed has already been created by a call to
  // xEventGroupCreate().
  EventGroupHandle_t xEventGroup;</preformatted></para>
<para><preformatted>  void anInterruptHandler( void )
  {
    // Clear bit 0 and bit 4 in xEventGroup.
    xResult = xEventGroupClearBitsFromISR(
                        xEventGroup,     // The event group being updated.
                        BIT_0 | BIT_4 ); // The bits being set.</preformatted></para>
<para><preformatted>    if( xResult == pdPASS )
    {
        // The message was posted successfully.
    }
 }
  </preformatted> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
