<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__x_stream_buffer_receive_from_i_s_r" kind="group">
    <compoundname>xStreamBufferReceiveFromISR</compoundname>
    <title>xStreamBufferReceiveFromISR</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="stream__buffer_8h" kindref="compound">stream_buffer.h</ref></para>
<para><preformatted>
size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
                                    void *pvRxData,
                                    size_t xBufferLengthBytes,
                                    BaseType_t *pxHigherPriorityTaskWoken );
</preformatted></para>
<para>An interrupt safe version of the API function that receives bytes from a stream buffer.</para>
<para>Use <ref refid="stream__buffer_8h_1a55efc144b988598d84a6087d3e20b507" kindref="member">xStreamBufferReceive()</ref> to read bytes from a stream buffer from a task. Use <ref refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" kindref="member">xStreamBufferReceiveFromISR()</ref> to read bytes from a stream buffer from an interrupt service routine (ISR).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xStreamBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the stream buffer from which a stream is being received.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvRxData</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer into which the received bytes are copied.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xBufferLengthBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer pointed to by the pvRxData parameter. This sets the maximum number of bytes to receive in one call. xStreamBufferReceive will return as many bytes as possible up to a maximum set by xBufferLengthBytes.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxHigherPriorityTaskWoken</parametername>
</parameternamelist>
<parameterdescription>
<para>It is possible that a stream buffer will have a task blocked on it waiting for space to become available. Calling <ref refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" kindref="member">xStreamBufferReceiveFromISR()</ref> can make space available, and so cause a task that is waiting for space to leave the Blocked state. If calling <ref refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" kindref="member">xStreamBufferReceiveFromISR()</ref> causes a task to leave the Blocked state, and the unblocked task has a priority higher than the currently executing task (the task that was interrupted), then, internally, <ref refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" kindref="member">xStreamBufferReceiveFromISR()</ref> will set *pxHigherPriorityTaskWoken to pdTRUE. If <ref refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" kindref="member">xStreamBufferReceiveFromISR()</ref> sets this value to pdTRUE, then normally a context switch should be performed before the interrupt is exited. That will ensure the interrupt returns directly to the highest priority Ready state task. *pxHigherPriorityTaskWoken should be set to pdFALSE before it is passed into the function. See the code example below for an example.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read from the stream buffer, if any.</para>
</simplesect>
Example use: <preformatted>
// A stream buffer that has already been created.
StreamBuffer_t xStreamBuffer;</preformatted></para>
<para><preformatted>void vAnInterruptServiceRoutine( void )
{
uint8_t ucRxData[ 20 ];
size_t xReceivedBytes;
BaseType_t xHigherPriorityTaskWoken = pdFALSE;  // Initialised to pdFALSE.</preformatted></para>
<para><preformatted>    // Receive the next stream from the stream buffer.
    xReceivedBytes = xStreamBufferReceiveFromISR( xStreamBuffer,
                                                  ( void * ) ucRxData,
                                                  sizeof( ucRxData ),
                                                  &amp;xHigherPriorityTaskWoken );</preformatted></para>
<para><preformatted>    if( xReceivedBytes &gt; 0 )
    {
        // ucRxData contains xReceivedBytes read from the stream buffer.
        // Process the stream here....
    }</preformatted></para>
<para><preformatted>    // If xHigherPriorityTaskWoken was set to pdTRUE inside
    // <ref refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" kindref="member">xStreamBufferReceiveFromISR()</ref> then a task that has a priority above the
    // priority of the currently executing task was unblocked and a context
    // switch should be performed to ensure the ISR returns to the unblocked
    // task.  In most FreeRTOS ports this is done by simply passing
    // xHigherPriorityTaskWoken into taskYIELD_FROM_ISR(), which will test the
    // variables value, and perform the context switch if necessary.  Check the
    // documentation for the port in use for port specific instructions.
    taskYIELD_FROM_ISR( xHigherPriorityTaskWoken );
}
</preformatted> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
