<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__x_task_notify_give" kind="group">
    <compoundname>xTaskNotifyGive</compoundname>
    <title>xTaskNotifyGive</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>task. h <preformatted>BaseType_t <ref refid="task_8h_1ac60cbd05577a3e4f3c3587dd9b213930" kindref="member">xTaskNotifyGive( TaskHandle_t xTaskToNotify )</ref>;</preformatted></para>
<para>configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro to be available.</para>
<para>When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private &quot;notification value&quot;, which is a 32-bit unsigned integer (uint32_t).</para>
<para>Events can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.</para>
<para>A notification sent to a task can optionally perform an action, such as update, overwrite or increment the task&apos;s notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.</para>
<para><ref refid="task_8h_1ac60cbd05577a3e4f3c3587dd9b213930" kindref="member">xTaskNotifyGive()</ref> is a helper macro intended for use when task notifications are used as light weight and faster binary or counting semaphore equivalents. Actual FreeRTOS semaphores are given using the <ref refid="semphr_8h_1aae55761cabfa9bf85c8f4430f78c0953" kindref="member">xSemaphoreGive()</ref> API function, the equivalent action that instead uses a task notification is <ref refid="task_8h_1ac60cbd05577a3e4f3c3587dd9b213930" kindref="member">xTaskNotifyGive()</ref>.</para>
<para>When task notifications are being used as a binary or counting semaphore equivalent then the task being notified should wait for the notification using the ulTaskNotificationTake() API function rather than the <ref refid="task_8h_1a0475fcda9718f403521c270a7270ff93" kindref="member">xTaskNotifyWait()</ref> API function.</para>
<para>See <ulink url="http://www.FreeRTOS.org/RTOS-task-notifications.html">http://www.FreeRTOS.org/RTOS-task-notifications.html</ulink> for more details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTaskToNotify</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the task being notified. The handle to a task can be returned from the xTaskCreate() API function used to create the task, and the handle of the currently running task can be obtained by calling <ref refid="task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc" kindref="member">xTaskGetCurrentTaskHandle()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="task_8h_1ac60cbd05577a3e4f3c3587dd9b213930" kindref="member">xTaskNotifyGive()</ref> is a macro that calls <ref refid="task_8h_1a0d2d54fb8a64011dfbb54983e4ed06bd" kindref="member">xTaskNotify()</ref> with the eAction parameter set to eIncrement - so pdPASS is always returned. </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
