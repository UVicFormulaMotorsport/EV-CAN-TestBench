<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__x_stream_buffer_receive" kind="group">
    <compoundname>xStreamBufferReceive</compoundname>
    <title>xStreamBufferReceive</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="stream__buffer_8h" kindref="compound">stream_buffer.h</ref></para>
<para><preformatted>
size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait );
</preformatted></para>
<para>Receives bytes from a stream buffer.</para>
<para><emphasis><bold>NOTE</bold></emphasis>: Uniquely among FreeRTOS objects, the stream buffer implementation (so also the message buffer implementation, as message buffers are built on top of stream buffers) assumes there is only one task or interrupt that will write to the buffer (the writer), and only one task or interrupt that will read from the buffer (the reader). It is safe for the writer and reader to be different tasks or interrupts, but, unlike other FreeRTOS objects, it is not safe to have multiple different writers or multiple different readers. If there are to be multiple different writers then the application writer must place each call to a writing API function (such as <ref refid="stream__buffer_8h_1a35cdf3b6bf677086b9128782f762499d" kindref="member">xStreamBufferSend()</ref>) inside a critical section and set the send block time to 0. Likewise, if there are to be multiple different readers then the application writer must place each call to a reading API function (such as <ref refid="stream__buffer_8h_1a55efc144b988598d84a6087d3e20b507" kindref="member">xStreamBufferReceive()</ref>) inside a critical section and set the receive block time to 0.</para>
<para>Use <ref refid="stream__buffer_8h_1a55efc144b988598d84a6087d3e20b507" kindref="member">xStreamBufferReceive()</ref> to read from a stream buffer from a task. Use <ref refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" kindref="member">xStreamBufferReceiveFromISR()</ref> to read from a stream buffer from an interrupt service routine (ISR).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xStreamBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the stream buffer from which bytes are to be received.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvRxData</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer into which the received bytes will be copied.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xBufferLengthBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer pointed to by the pvRxData parameter. This sets the maximum number of bytes to receive in one call. xStreamBufferReceive will return as many bytes as possible up to a maximum set by xBufferLengthBytes.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTicksToWait</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time the task should remain in the Blocked state to wait for data to become available if the stream buffer is empty. <ref refid="stream__buffer_8h_1a55efc144b988598d84a6087d3e20b507" kindref="member">xStreamBufferReceive()</ref> will return immediately if xTicksToWait is zero. The block time is specified in tick periods, so the absolute time it represents is dependent on the tick frequency. The macro <ref refid="projdefs_8h_1a353d0f62b82a402cb3db63706c81ec3f" kindref="member">pdMS_TO_TICKS()</ref> can be used to convert a time specified in milliseconds into a time specified in ticks. Setting xTicksToWait to portMAX_DELAY will cause the task to wait indefinitely (without timing out), provided INCLUDE_vTaskSuspend is set to 1 in <ref refid="_free_r_t_o_s_config_8h" kindref="compound">FreeRTOSConfig.h</ref>. A task does not use any CPU time when it is in the Blocked state.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes actually read from the stream buffer, which will be less than xBufferLengthBytes if the call to <ref refid="stream__buffer_8h_1a55efc144b988598d84a6087d3e20b507" kindref="member">xStreamBufferReceive()</ref> timed out before xBufferLengthBytes were available.</para>
</simplesect>
Example use: <preformatted>
void vAFunction( StreamBuffer_t xStreamBuffer )
{
uint8_t ucRxData[ 20 ];
size_t xReceivedBytes;
const TickType_t xBlockTime = <ref refid="projdefs_8h_1a353d0f62b82a402cb3db63706c81ec3f" kindref="member">pdMS_TO_TICKS( 20 )</ref>;</preformatted></para>
<para><preformatted>    // Receive up to another sizeof( ucRxData ) bytes from the stream buffer.
    // Wait in the Blocked state (so not using any CPU processing time) for a
    // maximum of 100ms for the full sizeof( ucRxData ) number of bytes to be
    // available.
    xReceivedBytes = xStreamBufferReceive( xStreamBuffer,
                                           ( void * ) ucRxData,
                                           sizeof( ucRxData ),
                                           xBlockTime );</preformatted></para>
<para><preformatted>    if( xReceivedBytes &gt; 0 )
    {
        // A ucRxData contains another xRecievedBytes bytes of data, which can
        // be processed here....
    }
}
</preformatted> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
