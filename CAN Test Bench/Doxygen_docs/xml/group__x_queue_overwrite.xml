<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__x_queue_overwrite" kind="group">
    <compoundname>xQueueOverwrite</compoundname>
    <title>xQueueOverwrite</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>queue. h <preformatted>
 BaseType_t xQueueOverwrite(
                              QueueHandle_t xQueue,
                              const void * pvItemToQueue
                         );
   </preformatted></para>
<para>Only for use with queues that have a length of one - so the queue is either empty or full.</para>
<para>Post an item on a queue. If the queue is already full then overwrite the value held in the queue. The item is queued by copy, not by reference.</para>
<para>This function must not be called from an interrupt service routine. See xQueueOverwriteFromISR () for an alternative which may be used in an ISR.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xQueue</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the queue to which the data is being sent.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvItemToQueue</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="queue_8h_1a8e9ced123b5a0e37a36d3bbdb2e56b4e" kindref="member">xQueueOverwrite()</ref> is a macro that calls <ref refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" kindref="member">xQueueGenericSend()</ref>, and therefore has the same return values as <ref refid="queue_8h_1aa612fcc2b1ceee0200f34b942e300b41" kindref="member">xQueueSendToFront()</ref>. However, pdPASS is the only value that can be returned because <ref refid="queue_8h_1a8e9ced123b5a0e37a36d3bbdb2e56b4e" kindref="member">xQueueOverwrite()</ref> will write to the queue even when the queue is already full.</para>
</simplesect>
Example usage: <preformatted></preformatted></para>
<para><preformatted> void vFunction( void *pvParameters )
 {
 QueueHandle_t xQueue;
 uint32_t ulVarToSend, ulValReceived;</preformatted></para>
<para><preformatted>    // Create a queue to hold one uint32_t value.  It is strongly
    // recommended *not* to use <ref refid="queue_8h_1a8e9ced123b5a0e37a36d3bbdb2e56b4e" kindref="member">xQueueOverwrite()</ref> on queues that can
    // contain more than one value, and doing so will trigger an assertion
    // if <ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT()</ref> is defined.
    xQueue = xQueueCreate( 1, sizeof( uint32_t ) );</preformatted></para>
<para><preformatted>    // Write the value 10 to the queue using <ref refid="queue_8h_1a8e9ced123b5a0e37a36d3bbdb2e56b4e" kindref="member">xQueueOverwrite()</ref>.
    ulVarToSend = 10;
    <ref refid="queue_8h_1a8e9ced123b5a0e37a36d3bbdb2e56b4e" kindref="member">xQueueOverwrite( xQueue, &amp;ulVarToSend )</ref>;</preformatted></para>
<para><preformatted>    // Peeking the queue should now return 10, but leave the value 10 in
    // the queue.  A block time of zero is used as it is known that the
    // queue holds a value.
    ulValReceived = 0;
    xQueuePeek( xQueue, &amp;ulValReceived, 0 );</preformatted></para>
<para><preformatted>    if( ulValReceived != 10 )
    {
        // Error unless the item was removed by a different task.
    }</preformatted></para>
<para><preformatted>    // The queue is still full.  Use <ref refid="queue_8h_1a8e9ced123b5a0e37a36d3bbdb2e56b4e" kindref="member">xQueueOverwrite()</ref> to overwrite the
    // value held in the queue with 100.
    ulVarToSend = 100;
    <ref refid="queue_8h_1a8e9ced123b5a0e37a36d3bbdb2e56b4e" kindref="member">xQueueOverwrite( xQueue, &amp;ulVarToSend )</ref>;</preformatted></para>
<para><preformatted>    // This time read from the queue, leaving the queue empty once more.
    // A block time of 0 is used again.
    xQueueReceive( xQueue, &amp;ulValReceived, 0 );</preformatted></para>
<para><preformatted>    // The value read should be the last value written, even though the
    // queue was already full when the value was written.
    if( ulValReceived != 100 )
    {
        // Error!
    }</preformatted></para>
<para><preformatted>    // ...
}
 </preformatted> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
