<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="uvfr__state__engine_8c" kind="file" language="C++">
    <compoundname>uvfr_state_engine.c</compoundname>
    <includes refid="uvfr__utils_8h" local="yes">uvfr_utils.h</includes>
    <incdepgraph>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="12">
        <label>tim.h</label>
        <link refid="tim_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>imd.h</label>
        <link refid="imd_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>dash.h</label>
        <link refid="dash_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>driving_loop.h</label>
        <link refid="driving__loop_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>temp_monitoring.h</label>
        <link refid="temp__monitoring_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Core/Src/uvfr_state_engine.c</label>
        <link refid="uvfr__state__engine_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>stdint.h</label>
      </node>
      <node id="33">
        <label>stdlib.h</label>
      </node>
      <node id="28">
        <label>oled.h</label>
        <link refid="oled_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>adc.h</label>
        <link refid="adc_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cmsis_os.h</label>
      </node>
      <node id="2">
        <label>uvfr_utils.h</label>
        <link refid="uvfr__utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>message_buffer.h</label>
      </node>
      <node id="22">
        <label>bms.h</label>
        <link refid="bms_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>spi.h</label>
        <link refid="spi_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>pdu.h</label>
        <link refid="pdu_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>motor_controller.h</label>
        <link refid="motor__controller_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>uvfr_settings.h</label>
        <link refid="uvfr__settings_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>daq.h</label>
        <link refid="daq_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>gpio.h</label>
        <link refid="gpio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>rb_tree.h</label>
        <link refid="rb__tree_8h"/>
      </node>
      <node id="10">
        <label>constants.h</label>
        <link refid="constants_8h"/>
      </node>
      <node id="9">
        <label>can.h</label>
        <link refid="can_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>uvfr_global_config.h</label>
        <link refid="uvfr__global__config_8h"/>
      </node>
      <node id="31">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
      </node>
      <node id="23">
        <label>uvfr_state_engine.h</label>
        <link refid="uvfr__state__engine_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>odometer.h</label>
        <link refid="odometer_8h"/>
      </node>
      <node id="5">
        <label>stm32f4xx_hal.h</label>
      </node>
      <node id="15">
        <label>FreeRTOS.h</label>
      </node>
      <node id="11">
        <label>dma.h</label>
        <link refid="dma_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>task.h</label>
      </node>
      <node id="4">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structstate__change__daemon__args" prot="public">state_change_daemon_args</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="uvfr__state__engine_8c_1a6cd439d1fb18334cd13cf3539aebca5c" prot="public" static="no">
        <name>UVFR_STATE_MACHINE_IMPLIMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="10" column="9" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__state__engine_1ga8a80fe70c2d06583bbcd00c5162860c5" prot="public" static="no">
        <name>MAX_NUM_MANAGED_TASKS</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="20" column="9" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__state__engine_1gac9bd88d7c454ec151183930fce544c9c" prot="public" static="no">
        <type>struct <ref refid="structstate__change__daemon__args" kindref="compound">state_change_daemon_args</ref></type>
        <definition>typedef struct state_change_daemon_args state_change_daemon_args</definition>
        <argsstring></argsstring>
        <name>state_change_daemon_args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="60" column="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" prot="public" static="yes" mutable="no">
        <type><ref refid="uvfr__state__engine_8h_1aa6ffd72eb4909ddb38c37a1369e13f09" kindref="member">uv_task_id</ref></type>
        <definition>uv_task_id _next_task_id</definition>
        <argsstring></argsstring>
        <name>_next_task_id</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="25" column="19" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="25" bodyend="-1"/>
        <referencedby refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="868" endline="1041">_stateChangeDaemon</referencedby>
        <referencedby refid="group__state__engine__backend_1gab8a03e5812e395199b3b0003cd8266cb" compoundref="uvfr__state__engine_8c" startline="446" endline="458">killEmAll</referencedby>
        <referencedby refid="group__state__engine__backend_1ga20334b4aff0cfdab7be1d2864089c5ce" compoundref="uvfr__state__engine_8c" startline="1138" endline="1173">uvCreateServiceTask</referencedby>
        <referencedby refid="group__state__engine__api_1ga99bfc92472cdc99e9005e9d3c792909a" compoundref="uvfr__state__engine_8c" startline="249" endline="287">uvCreateTask</referencedby>
        <referencedby refid="group__state__engine__backend_1ga8c1618caac0d7f29836107f1a44833e8" compoundref="uvfr__state__engine_8c" startline="343" endline="356">uvValidateManagedTasks</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" prot="public" static="yes" mutable="no">
        <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
        <definition>uv_task_info* _task_register</definition>
        <argsstring></argsstring>
        <name>_task_register</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="26" column="21" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="26" bodyend="-1"/>
        <referencedby refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="868" endline="1041">_stateChangeDaemon</referencedby>
        <referencedby refid="group__state__engine__backend_1gaf342326f88e8accc1efa35e02cdd6c37" compoundref="uvfr__state__engine_8c" startline="308" endline="338">_uvValidateSpecificTask</referencedby>
        <referencedby refid="group__state__engine__backend_1gab8a03e5812e395199b3b0003cd8266cb" compoundref="uvfr__state__engine_8c" startline="446" endline="458">killEmAll</referencedby>
        <referencedby refid="group__state__engine__backend_1ga2e8a31626909ac17be499f2941d359d0" compoundref="uvfr__state__engine_8c" startline="799" endline="854">proccessSCDMsg</referencedby>
        <referencedby refid="group__state__engine__backend_1ga20334b4aff0cfdab7be1d2864089c5ce" compoundref="uvfr__state__engine_8c" startline="1138" endline="1173">uvCreateServiceTask</referencedby>
        <referencedby refid="group__state__engine__api_1ga99bfc92472cdc99e9005e9d3c792909a" compoundref="uvfr__state__engine_8c" startline="249" endline="287">uvCreateTask</referencedby>
        <referencedby refid="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" compoundref="uvfr__state__engine_8c" startline="151" endline="172">uvInitStateEngine</referencedby>
        <referencedby refid="group__state__engine_1gaff684308203d45e9e16ad3d115c54279" compoundref="uvfr__state__engine_8c" startline="1284" endline="1335">uvSVCTaskManager</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__state__engine_1gae48b13e362d2b9d10ec61f516ea5c09f" prot="public" static="yes" mutable="no">
        <type><ref refid="uvfr__state__engine_8h_1aa6ffd72eb4909ddb38c37a1369e13f09" kindref="member">uv_task_id</ref></type>
        <definition>uv_task_id _next_svc_task_id</definition>
        <argsstring></argsstring>
        <name>_next_svc_task_id</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="28" column="19" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="28" bodyend="-1"/>
        <referencedby refid="group__state__engine__backend_1ga20334b4aff0cfdab7be1d2864089c5ce" compoundref="uvfr__state__engine_8c" startline="1138" endline="1173">uvCreateServiceTask</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__state__engine_1ga031bbb86895e7346f4c7c168b36ffbd4" prot="public" static="yes" mutable="no">
        <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
        <definition>uv_task_info* _svc_task_register</definition>
        <argsstring></argsstring>
        <name>_svc_task_register</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="29" column="21" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__state__engine_1gac204f3b14ce9bf370b2e5477dc87afea" prot="public" static="no" mutable="no">
        <type>TaskHandle_t *</type>
        <definition>TaskHandle_t* scd_handle_ptr</definition>
        <argsstring></argsstring>
        <name>scd_handle_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="31" column="14" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__state__engine_1gaa11ee7595fe2da14c5949195824179af" prot="public" static="yes" mutable="no">
        <type><ref refid="uvfr__utils_8h_1a0ecf26b576b9a54eca656b9be7ba6a06" kindref="member">bool</ref></type>
        <definition>volatile bool SCD_active</definition>
        <argsstring></argsstring>
        <name>SCD_active</name>
        <initializer>= <ref refid="group__utility__macros_1ga65e9886d74aaee76545e83dd09011727" kindref="member">false</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="34" column="22" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="34" bodyend="-1"/>
        <referencedby refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="868" endline="1041">_stateChangeDaemon</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__state__engine_1ga6837d935e61f84062544da8971a18560" prot="public" static="yes" mutable="no">
        <type>QueueHandle_t</type>
        <definition>QueueHandle_t state_change_queue</definition>
        <argsstring></argsstring>
        <name>state_change_queue</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="35" column="22" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="35" bodyend="-1"/>
        <referencedby refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="868" endline="1041">_stateChangeDaemon</referencedby>
        <referencedby refid="group__state__engine__backend_1ga5f35b34432afed7f18f91fb8607f096f" compoundref="uvfr__state__engine_8c" startline="715" endline="748">killSelf</referencedby>
        <referencedby refid="group__state__engine__backend_1gad6117850b55ad52be51d93915bcc313c" compoundref="uvfr__state__engine_8c" startline="756" endline="787">suspendSelf</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__state__engine_1ga168524a5d658247db44217e643b6396f" prot="public" static="no" mutable="no">
        <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
        <definition>rbtree* task_name_lut</definition>
        <argsstring></argsstring>
        <name>task_name_lut</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="37" column="8" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" prot="public" static="no" mutable="no">
        <type>enum <ref refid="group__state__engine__api_1ga259abff5a03eaf908dc8f03d99f478e4" kindref="member">uv_vehicle_state_t</ref></type>
        <definition>enum uv_vehicle_state_t vehicle_state</definition>
        <argsstring></argsstring>
        <name>vehicle_state</name>
        <initializer>= <ref refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4afdfc4cdb8c5210e05bdfdc3df51f80ff" kindref="member">UV_BOOT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="37" column="8" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="39" bodyend="-1"/>
        <referencedby refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="868" endline="1041">_stateChangeDaemon</referencedby>
        <referencedby refid="group__state__engine__api_1gaa3ad3e8df75177c00265881c16563212" compoundref="uvfr__state__engine_8c" startline="86" endline="143">changeVehicleState</referencedby>
        <referencedby refid="daq_8c_1a433bb586ceab47aed8d633fa2ff8ce56" compoundref="daq_8c" startline="62" endline="101">daqMasterTask</referencedby>
        <referencedby refid="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" compoundref="uvfr__state__engine_8c" startline="179" endline="231">uvStartStateMachine</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__state__engine_1ga2ce6eef16a78c095592954d2fe68af2e" prot="public" static="no" mutable="no">
        <type>enum <ref refid="group__state__engine__api_1ga259abff5a03eaf908dc8f03d99f478e4" kindref="member">uv_vehicle_state_t</ref></type>
        <definition>enum uv_vehicle_state_t previous_state</definition>
        <argsstring></argsstring>
        <name>previous_state</name>
        <initializer>= <ref refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4afdfc4cdb8c5210e05bdfdc3df51f80ff" kindref="member">UV_BOOT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="37" column="8" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="40" bodyend="-1"/>
        <referencedby refid="group__state__engine__api_1gaa3ad3e8df75177c00265881c16563212" compoundref="uvfr__state__engine_8c" startline="86" endline="143">changeVehicleState</referencedby>
        <referencedby refid="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" compoundref="uvfr__state__engine_8c" startline="179" endline="231">uvStartStateMachine</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" prot="public" static="no" mutable="no">
        <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
        <definition>uv_task_info* task_manager</definition>
        <argsstring></argsstring>
        <name>task_manager</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="42" column="14" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="42" bodyend="-1"/>
        <referencedby refid="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" compoundref="uvfr__state__engine_8c" startline="151" endline="172">uvInitStateEngine</referencedby>
        <referencedby refid="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" compoundref="uvfr__state__engine_8c" startline="179" endline="231">uvStartStateMachine</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" prot="public" static="no" mutable="no">
        <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
        <definition>uv_task_info* svc_task_manager</definition>
        <argsstring></argsstring>
        <name>svc_task_manager</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="43" column="14" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="43" bodyend="-1"/>
        <referencedby refid="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" compoundref="uvfr__state__engine_8c" startline="151" endline="172">uvInitStateEngine</referencedby>
        <referencedby refid="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" compoundref="uvfr__state__engine_8c" startline="179" endline="231">uvStartStateMachine</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__state__engine_1gad9e02be6d2d0bc1ab5cd9fd8cae34230" prot="public" static="no" mutable="no">
        <type><ref refid="structuv__os__settings" kindref="compound">uv_os_settings</ref></type>
        <definition>uv_os_settings default_os_settings</definition>
        <argsstring></argsstring>
        <name>default_os_settings</name>
        <initializer>={
		.svc_task_manager_period = 50,
		.task_manager_period = 50,
		.max_svc_task_period = 250,
		.max_task_period = 500,

}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="45" column="16" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="45" bodyend="-1"/>
        <referencedby refid="uvfr__settings_8c_1a42f7a1907bfe84d7b0f9fb4e2260018b" compoundref="uvfr__settings_8c" startline="42" endline="49">setupDefaultSettings</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__state__engine__backend_1gab8a03e5812e395199b3b0003cd8266cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status killEmAll</definition>
        <argsstring>()</argsstring>
        <name>killEmAll</name>
        <briefdescription>
<para>The name should be pretty self explanatory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="446" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="446" bodyend="458" declfile="Core/Src/uvfr_state_engine.c" declline="54" declcolumn="11"/>
        <references refid="group__utility__macros_1ga581e5838a8a85f12137dd310b210024d" compoundref="uvfr__utils_8h" startline="72">_BV_32</references>
        <references refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" compoundref="uvfr__state__engine_8c" startline="25">_next_task_id</references>
        <references refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" compoundref="uvfr__state__engine_8c" startline="26">_task_register</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__backend_1ga6291142ec714ce1450099943b1b8d00a" compoundref="uvfr__state__engine_8c" startline="491" endline="544">uvDeleteTask</references>
        <referencedby refid="group__state__engine__api_1ga5cb739823b10b90a139315356aa6b22f" compoundref="uvfr__state__engine_8c" startline="239" endline="241">uvDeInitStateEngine</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine_1gaff684308203d45e9e16ad3d115c54279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uvSVCTaskManager</definition>
        <argsstring>(void *args)</argsstring>
        <name>uvSVCTaskManager</name>
        <param>
          <type>void *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>oversees all of the service tasks, and makes sure that theyre alright </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Start all of the service tasks. This involves allocating neccessary memory, setting the appropriate task parameters, and saying &quot;fuck it we ball&quot; and adding the tasks to the central task tracking data structure.</para>
<para>Now we deinitialize the svcTaskManager. This is done by doing the following:<itemizedlist>
<listitem><para>actually shut down the svc tasks</para>
</listitem><listitem><para>double check that the tasks have acually shut down</para>
</listitem><listitem><para>if any svc tasks are resisting nature&apos;s call, they will be shut down forcibly</para>
</listitem><listitem><para>deallocate data structures specific to <computeroutput>uvSVCTaskManager</computeroutput> </para>
</listitem></itemizedlist>
</para>
<para>Lovely times for all</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="1284" column="6" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="1284" bodyend="1335" declfile="Core/Src/uvfr_state_engine.c" declline="55" declcolumn="6"/>
        <references refid="uvfr__utils_8h_1a92b5ac44171d49acd084c274385a043a" compoundref="uvfr__utils_8c" startline="263" endline="277">__uvInitPanic</references>
        <references refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" compoundref="uvfr__state__engine_8c" startline="26">_task_register</references>
        <references refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" compoundref="uvfr__state__engine_8h" startline="239">uv_task_info::active_states</references>
        <references refid="can_8h_1a8258cafd2b5e0bfb1e4228e7a45750bf" compoundref="can_8h" startline="40">CAN_TX_DAEMON_NAME</references>
        <references refid="can_8h_1a2357e197a9ac26277eec808769fe409f" compoundref="can_8c" startline="358" endline="405">CANbusTxSvcDaemon</references>
        <references refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" compoundref="uvfr__state__engine_8h" startline="216">uv_task_info::task_function</references>
        <references refid="structtask__management__info_1a29b374b2d26cc5a52c75160816da83aa" compoundref="uvfr__state__engine_8h" startline="155">task_management_info::task_handle</references>
        <references refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" compoundref="uvfr__state__engine_8h" startline="211">uv_task_info::task_name</references>
        <references refid="group__state__engine__backend_1ga20334b4aff0cfdab7be1d2864089c5ce" compoundref="uvfr__state__engine_8c" startline="1138" endline="1173">uvCreateServiceTask</references>
        <references refid="group__state__engine__backend_1ga15cdf09b5625c2ba29a6c6d5c96214dc" compoundref="uvfr__state__engine_8c" startline="365" endline="431">uvStartTask</references>
        <referencedby refid="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" compoundref="uvfr__state__engine_8c" startline="179" endline="231">uvStartStateMachine</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1gaf2dbdd0d9d9aa8bcbef120661117fc5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uvTaskManager</definition>
        <argsstring>(void *args) PRIVILEGED_FUNCTION</argsstring>
        <name>uvTaskManager</name>
        <param>
          <type>void *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>The big papa task that deals with handling all of the others. </para>
        </briefdescription>
        <detaileddescription>
<para>The responsibilities of this task are as follows:<itemizedlist>
<listitem><para>Monitor tasks to ensure they are on schedule</para>
</listitem><listitem><para>Setup inter-task communication channels</para>
</listitem><listitem><para>Invoke SCD if necessary</para>
</listitem><listitem><para>Track mem usage if needed</para>
</listitem></itemizedlist>
</para>
<para>This task is one of the most important ones in the system. Lovely times for all. Therefore it us of utmost importance that this one DOES NOT CRASH. EVER. </para>
        </detaileddescription>
        <inbodydescription>
<para>Wait for incoming instructions from tasks</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="1065" column="6" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="1065" bodyend="1132" declfile="Core/Src/uvfr_state_engine.c" declline="56" declcolumn="6"/>
        <references refid="structuv__task__info_1ab0a6666d8589de0cbc508cc8b12c0945" compoundref="uvfr__state__engine_8h" startline="236">uv_task_info::tmi</references>
        <referencedby refid="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" compoundref="uvfr__state__engine_8c" startline="179" endline="231">uvStartStateMachine</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__api_1gaa3ad3e8df75177c00265881c16563212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status changeVehicleState</definition>
        <argsstring>(uint16_t state)</argsstring>
        <name>changeVehicleState</name>
        <param>
          <type>uint16_t</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Function for changing the state of the vehicle, as well as the list of active + inactive tasks. </para>
        </briefdescription>
        <detaileddescription>
<para>This function also changes out the tasks that are executing, by invoking the legendary _state_change_daemon</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>is a member of <ref refid="uvfr__utils_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref>, and therefore a power of two </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para>a memeber of <ref refid="uvfr__utils_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref> depending on whether execution is successful</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage:</para>
<para><programlisting><codeline><highlight class="normal">if((brakepedal_pressed<sp/>==<sp/>true)<sp/>&amp;&amp;<sp/>(start_button_pressed<sp/>==<sp/>true)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>changeVehicleState(UV_DRIVING);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>As you can see, all you need to do is specify the new state. Naturally, the task should be ready to get deleted by the state_change_daemon, but that is neither here nor there. </para>
        </detaileddescription>
        <inbodydescription>
<para>If the state we wish to change to is the same as the state we&apos;re in, then no need to be executing any of this fancy code</para>
<para>Transition from <computeroutput>UV_INIT</computeroutput> to <computeroutput>UV_READY</computeroutput> states</para>
<para>Transition from <computeroutput>UV_INIT</computeroutput> to <computeroutput>UV_ERROR</computeroutput> states</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="86" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="86" bodyend="143"/>
        <references refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="868" endline="1041">_stateChangeDaemon</references>
        <references refid="group__utility__macros_1gade3043fb92536f8e1a616ba8aaef4ab9" compoundref="uvfr__utils_8h" startline="117">isPowerOfTwo</references>
        <references refid="structstate__change__daemon__args_1aa19a15c725f1fdc8dcc05227584153bc" compoundref="uvfr__state__engine_8c" startline="59">state_change_daemon_args::meta_task_handle</references>
        <references refid="group__state__engine_1ga2ce6eef16a78c095592954d2fe68af2e" compoundref="uvfr__state__engine_8c" startline="40">previous_state</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" compoundref="uvfr__utils_8h" startline="170">UV_ABORTED</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4ac1fcacc095b8c0f1c9f452d51815bcb5" compoundref="uvfr__state__engine_8h" startline="88">UV_ERROR_STATE</references>
        <references refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a5e3e7ecab0a58b320912cb4129641579" compoundref="uvfr__state__engine_8h" startline="82">UV_INIT</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a9ec1eef180c6208b25b08f0526dc5eb8" compoundref="uvfr__state__engine_8h" startline="83">UV_READY</references>
        <references refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" compoundref="uvfr__state__engine_8c" startline="39">vehicle_state</references>
        <referencedby refid="daq_8c_1a433bb586ceab47aed8d633fa2ff8ce56" compoundref="daq_8c" startline="62" endline="101">daqMasterTask</referencedby>
        <referencedby refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" compoundref="uvfr__utils_8c" startline="37" endline="229">uvInit</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvInitStateEngine</definition>
        <argsstring>()</argsstring>
        <name>uvInitStateEngine</name>
        <briefdescription>
<para>Function that prepares the state engine to do its thing. </para>
        </briefdescription>
        <detaileddescription>
<para>This is called when the system is first starting up. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="151" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="151" bodyend="172"/>
        <references refid="uvfr__utils_8h_1a92b5ac44171d49acd084c274385a043a" compoundref="uvfr__utils_8c" startline="263" endline="277">__uvInitPanic</references>
        <references refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" compoundref="uvfr__state__engine_8c" startline="26">_task_register</references>
        <references refid="daq_8h_1adecae26482eb2c3289131a2a486ac8b3" compoundref="daq_8c" startline="30" endline="57">initDaqTask</references>
        <references refid="driving__loop_8h_1af580185fb5bb1cfba30ee1709d90628c" compoundref="driving__loop_8c" startline="25" endline="59">initDrivingLoop</references>
        <references refid="odometer_8h_1ace344890a9a3f03e059a4eb44af85e00" compoundref="odometer_8c" startline="11" endline="40">initOdometer</references>
        <references refid="temp__monitoring_8h_1a4d862a74e85fea73d9089ed437f9859b" compoundref="temp__monitoring_8c" startline="12" endline="40">initTempMonitor</references>
        <references refid="group__state__engine_1ga8a80fe70c2d06583bbcd00c5162860c5" compoundref="uvfr__state__engine_8c" startline="20">MAX_NUM_MANAGED_TASKS</references>
        <references refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" compoundref="uvfr__state__engine_8c" startline="43">svc_task_manager</references>
        <references refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" compoundref="uvfr__state__engine_8c" startline="42">task_manager</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__backend_1ga20334b4aff0cfdab7be1d2864089c5ce" compoundref="uvfr__state__engine_8c" startline="1138" endline="1173">uvCreateServiceTask</references>
        <referencedby refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" compoundref="uvfr__utils_8c" startline="37" endline="229">uvInit</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvStartStateMachine</definition>
        <argsstring>()</argsstring>
        <name>uvStartStateMachine</name>
        <briefdescription>
<para>Actually starts up the state engine to do state engine things. </para>
        </briefdescription>
        <detaileddescription>
<para>This function ensures that all of the managed tasks are setup in a legal way, and then it allocates resources for, and starts the state engine and the background tasks. This unlocks the ability for the vehicle to do basically anything. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="179" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="179" bodyend="231"/>
        <references refid="group__state__engine_1ga2ce6eef16a78c095592954d2fe68af2e" compoundref="uvfr__state__engine_8c" startline="40">previous_state</references>
        <references refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" compoundref="uvfr__state__engine_8h" startline="220">uv_task_info::stack_size</references>
        <references refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" compoundref="uvfr__state__engine_8c" startline="43">svc_task_manager</references>
        <references refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" compoundref="uvfr__state__engine_8h" startline="243">uv_task_info::task_flags</references>
        <references refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" compoundref="uvfr__state__engine_8h" startline="216">uv_task_info::task_function</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" compoundref="uvfr__state__engine_8c" startline="42">task_manager</references>
        <references refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" compoundref="uvfr__state__engine_8h" startline="211">uv_task_info::task_name</references>
        <references refid="structuv__task__info_1ad157811debce6672bb6d00da7e90b6ca" compoundref="uvfr__state__engine_8h" startline="213">uv_task_info::task_period</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a5e3e7ecab0a58b320912cb4129641579" compoundref="uvfr__state__engine_8h" startline="82">UV_INIT</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1gab37af27fe89f1987ee38bdb0bc945c43" compoundref="uvfr__state__engine_8h" startline="200">UV_TASK_MISSION_CRITICAL</references>
        <references refid="group__state__engine__api_1ga4d87bda0a72990876364bd8764777cb2" compoundref="uvfr__state__engine_8h" startline="188">UV_TASK_SCD_IGNORE</references>
        <references refid="group__state__engine_1gaff684308203d45e9e16ad3d115c54279" compoundref="uvfr__state__engine_8c" startline="1284" endline="1335">uvSVCTaskManager</references>
        <references refid="group__state__engine__backend_1gaf2dbdd0d9d9aa8bcbef120661117fc5e" compoundref="uvfr__state__engine_8c" startline="1065" endline="1132">uvTaskManager</references>
        <references refid="group__state__engine__backend_1ga8c1618caac0d7f29836107f1a44833e8" compoundref="uvfr__state__engine_8c" startline="343" endline="356">uvValidateManagedTasks</references>
        <references refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" compoundref="uvfr__state__engine_8c" startline="39">vehicle_state</references>
        <referencedby refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" compoundref="uvfr__utils_8c" startline="37" endline="229">uvInit</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__api_1ga5cb739823b10b90a139315356aa6b22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvDeInitStateEngine</definition>
        <argsstring>()</argsstring>
        <name>uvDeInitStateEngine</name>
        <briefdescription>
<para>Stops and frees all resources used by uvfr_state_engine. </para>
        </briefdescription>
        <detaileddescription>
<para>If we need to initialize the state engine, gotta de-initialize as well. This is the opposite of <ref refid="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" kindref="member">uvInitStateEngine</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="239" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="239" bodyend="241"/>
        <references refid="group__state__engine__backend_1gab8a03e5812e395199b3b0003cd8266cb" compoundref="uvfr__state__engine_8c" startline="446" endline="458">killEmAll</references>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__api_1ga99bfc92472cdc99e9005e9d3c792909a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
        <definition>uv_task_info* uvCreateTask</definition>
        <argsstring>()</argsstring>
        <name>uvCreateTask</name>
        <briefdescription>
<para>This function gets called when you want to create a task, and register it with the task register. Theres some gnarlyness here, but not unacceptable levels. Pray this thing doesn&apos;t hang itself. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Do not exceed the number of tasks available</para>
<para>Acquire the pointer to the spot in the array, we are doing this since we need to return the pointer anyways, and it cleans up the syntax a little.</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="249" column="14" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="249" bodyend="287"/>
        <references refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" compoundref="uvfr__state__engine_8c" startline="25">_next_task_id</references>
        <references refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" compoundref="uvfr__state__engine_8c" startline="26">_task_register</references>
        <references refid="uvfr__state__engine_8h_1a32571accb85a2d8f479c6066d7a46238" compoundref="uvfr__state__engine_8h" startline="58">_UV_DEFAULT_TASK_STACK_SIZE</references>
        <references refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" compoundref="uvfr__state__engine_8h" startline="239">uv_task_info::active_states</references>
        <references refid="structuv__task__info_1a6986d7216c7f889164931b37ab752c29" compoundref="uvfr__state__engine_8h" startline="240">uv_task_info::deletion_states</references>
        <references refid="group__state__engine_1ga8a80fe70c2d06583bbcd00c5162860c5" compoundref="uvfr__state__engine_8c" startline="20">MAX_NUM_MANAGED_TASKS</references>
        <references refid="structuv__task__info_1a5d32fc8f47b905499257336c561d189b" compoundref="uvfr__state__engine_8h" startline="234">uv_task_info::parent</references>
        <references refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" compoundref="uvfr__state__engine_8h" startline="220">uv_task_info::stack_size</references>
        <references refid="structuv__task__info_1aafd4e2d916f50b54b99fd02d63831e43" compoundref="uvfr__state__engine_8h" startline="241">uv_task_info::suspension_states</references>
        <references refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" compoundref="uvfr__state__engine_8h" startline="243">uv_task_info::task_flags</references>
        <references refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" compoundref="uvfr__state__engine_8h" startline="216">uv_task_info::task_function</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" compoundref="uvfr__state__engine_8h" startline="210">uv_task_info::task_id</references>
        <references refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" compoundref="uvfr__state__engine_8h" startline="211">uv_task_info::task_name</references>
        <references refid="structuv__task__info_1aff45751f7189980589d55379d1d5a355" compoundref="uvfr__state__engine_8h" startline="217">uv_task_info::task_priority</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" compoundref="uvfr__state__engine_8h" startline="125">UV_TASK_NOT_STARTED</references>
        <references refid="group__state__engine__api_1ga253c75b331d0976b9a414657cef780cd" compoundref="uvfr__state__engine_8h" startline="181">UV_TASK_VEHICLE_APPLICATION</references>
        <referencedby refid="daq_8c_1af2c619df9f3d115dcbc511b0bb738e87" compoundref="daq_8c" startline="30" endline="57">initDaqTask</referencedby>
        <referencedby refid="driving__loop_8c_1af580185fb5bb1cfba30ee1709d90628c" compoundref="driving__loop_8c" startline="25" endline="59">initDrivingLoop</referencedby>
        <referencedby refid="odometer_8c_1ace344890a9a3f03e059a4eb44af85e00" compoundref="odometer_8c" startline="11" endline="40">initOdometer</referencedby>
        <referencedby refid="temp__monitoring_8c_1a979dc6ff14a3ef1f72e3cbea884871b0" compoundref="temp__monitoring_8c" startline="12" endline="40">initTempMonitor</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga8e41e95f69723171fab38aba3b00a091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status addTaskToTaskRegister</definition>
        <argsstring>(uv_task_id id, uint8_t assign_to_whom)</argsstring>
        <name>addTaskToTaskRegister</name>
        <param>
          <type><ref refid="uvfr__state__engine_8h_1aa6ffd72eb4909ddb38c37a1369e13f09" kindref="member">uv_task_id</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>assign_to_whom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="295" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="295" bodyend="303"/>
        <references refid="group__state__engine__backend_1gaf342326f88e8accc1efa35e02cdd6c37" compoundref="uvfr__state__engine_8c" startline="308" endline="338">_uvValidateSpecificTask</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1gaf342326f88e8accc1efa35e02cdd6c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status _uvValidateSpecificTask</definition>
        <argsstring>(uv_task_id id)</argsstring>
        <name>_uvValidateSpecificTask</name>
        <param>
          <type><ref refid="uvfr__state__engine_8h_1aa6ffd72eb4909ddb38c37a1369e13f09" kindref="member">uv_task_id</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>make sure the parameters of a task_info struct is valid </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="308" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="308" bodyend="338"/>
        <references refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" compoundref="uvfr__state__engine_8c" startline="26">_task_register</references>
        <references refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" compoundref="uvfr__state__engine_8h" startline="239">uv_task_info::active_states</references>
        <references refid="structuv__task__info_1a6986d7216c7f889164931b37ab752c29" compoundref="uvfr__state__engine_8h" startline="240">uv_task_info::deletion_states</references>
        <references refid="structuv__task__info_1aafd4e2d916f50b54b99fd02d63831e43" compoundref="uvfr__state__engine_8h" startline="241">uv_task_info::suspension_states</references>
        <references refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" compoundref="uvfr__state__engine_8h" startline="243">uv_task_info::task_flags</references>
        <references refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" compoundref="uvfr__state__engine_8h" startline="216">uv_task_info::task_function</references>
        <references refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" compoundref="uvfr__state__engine_8h" startline="211">uv_task_info::task_name</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1ga96c7c915194ecba48edd70def54a700b" compoundref="uvfr__state__engine_8h" startline="185">UV_TASK_MANAGER_MASK</references>
        <references refid="group__state__engine__api_1ga253c75b331d0976b9a414657cef780cd" compoundref="uvfr__state__engine_8h" startline="181">UV_TASK_VEHICLE_APPLICATION</references>
        <referencedby refid="group__state__engine__backend_1ga8e41e95f69723171fab38aba3b00a091" compoundref="uvfr__state__engine_8c" startline="295" endline="303">addTaskToTaskRegister</referencedby>
        <referencedby refid="group__state__engine__backend_1ga8c1618caac0d7f29836107f1a44833e8" compoundref="uvfr__state__engine_8c" startline="343" endline="356">uvValidateManagedTasks</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga8c1618caac0d7f29836107f1a44833e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvValidateManagedTasks</definition>
        <argsstring>()</argsstring>
        <name>uvValidateManagedTasks</name>
        <briefdescription>
<para>ensure that all the tasks people have created actually make sense, and are valid </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="343" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="343" bodyend="356"/>
        <references refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" compoundref="uvfr__state__engine_8c" startline="25">_next_task_id</references>
        <references refid="group__state__engine__backend_1gaf342326f88e8accc1efa35e02cdd6c37" compoundref="uvfr__state__engine_8c" startline="308" endline="338">_uvValidateSpecificTask</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <referencedby refid="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" compoundref="uvfr__state__engine_8c" startline="179" endline="231">uvStartStateMachine</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga15cdf09b5625c2ba29a6c6d5c96214dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvStartTask</definition>
        <argsstring>(uint32_t *tracker, uv_task_info *t)</argsstring>
        <name>uvStartTask</name>
        <param>
          <type>uint32_t *</type>
          <declname>tracker</declname>
        </param>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>: This is a function that starts tasks which are already registered in the system </para>
        </briefdescription>
        <detaileddescription>
<para>This bad boi gets called from the stateChangeDaemon because it&apos;s a special little snowflake. </para>
        </detaileddescription>
        <inbodydescription>
<para>The first thing we will do is check if the task is running, since this could theoretically get called from literally anywhere. If the task is running, then we check to see if <computeroutput>t-&gt;task_handle</computeroutput> is set to <computeroutput>NULL</computeroutput> . If it is null, that is a physically impossible_state. Neither very mindful or very demure.</para>
<para>That being said, if the task appears legit, then just update the corresponding bits in the tracker, and return that the task has aborted.</para>
<para>If a task has been suspended, we do not want to create a new instance of the task, becuase then the task will go out of scope, and changing the task handle to a new instance will result in the task never being de-initialized, therefore causing a memory leak. We want to call <computeroutput>vTaskResume</computeroutput> instead, and just boot the task back into existence.</para>
<para>If none of the previous if statements caught the task handle, then that means that either this is our first time attempting to activate this task, or the task has been deleted at some point prior to this one</para>
<para>The function <computeroutput>osThreadCreate</computeroutput> returns null if it fails to create a thread. If that happens, we really do have a problem, so we will be returning an error value</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="365" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="365" bodyend="431"/>
        <references refid="group__utility__macros_1ga581e5838a8a85f12137dd310b210024d" compoundref="uvfr__utils_8h" startline="72">_BV_32</references>
        <references refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" compoundref="uvfr__state__engine_8h" startline="220">uv_task_info::stack_size</references>
        <references refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" compoundref="uvfr__state__engine_8h" startline="216">uv_task_info::task_function</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" compoundref="uvfr__state__engine_8h" startline="210">uv_task_info::task_id</references>
        <references refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" compoundref="uvfr__state__engine_8h" startline="211">uv_task_info::task_name</references>
        <references refid="structuv__task__info_1aff45751f7189980589d55379d1d5a355" compoundref="uvfr__state__engine_8h" startline="217">uv_task_info::task_priority</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" compoundref="uvfr__utils_8h" startline="170">UV_ABORTED</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88ad4da927019afea812b31d46d28b7354c" compoundref="uvfr__state__engine_8h" startline="127">UV_TASK_RUNNING</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" compoundref="uvfr__state__engine_8h" startline="128">UV_TASK_SUSPENDED</references>
        <referencedby refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="868" endline="1041">_stateChangeDaemon</referencedby>
        <referencedby refid="group__state__engine_1gaff684308203d45e9e16ad3d115c54279" compoundref="uvfr__state__engine_8c" startline="1284" endline="1335">uvSVCTaskManager</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1gae0caac28206291f3dc5c416f11892edd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>static uv_status uvKillTaskViolently</definition>
        <argsstring>(uv_task_info *t)</argsstring>
        <name>uvKillTaskViolently</name>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>if a task refuses to comply with the SCD, then it has no choice but to be deleted. There is nothing that can be done. </para>
        </briefdescription>
        <detaileddescription>
<para>You will not win against the operating system. </para>
        </detaileddescription>
        <inbodydescription>
<para>The first thing that needs to happen, is we will tell the kernel to release any resources owned by the task.</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="467" column="18" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="467" bodyend="480"/>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <referencedby refid="group__state__engine__backend_1gad930776c44487128dbb60294a66a68e3" compoundref="uvfr__state__engine_8c" startline="1260" endline="1278">uvRestartSVCTask</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga6291142ec714ce1450099943b1b8d00a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvDeleteTask</definition>
        <argsstring>(uint32_t *tracker, uv_task_info *t)</argsstring>
        <name>uvDeleteTask</name>
        <param>
          <type>uint32_t *</type>
          <declname>tracker</declname>
        </param>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>deletes a managed task via the system </para>
        </briefdescription>
        <detaileddescription>
<para>This function is the lowtier god of the program. It pulls up and is like &quot;YOU SHOULD KILL YOURSELF, NOW!!&quot; It sends a message to the task which tells it to kill itself.</para>
<para>The task complies. It does not have a choice. </para>
        </detaileddescription>
        <inbodydescription>
<para>This checks with the RTOS kernel to see that the task as stated by the scheduler matches the state known by uvfr_utils</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="491" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="491" bodyend="544"/>
        <references refid="structuv__task__info_1af532b5031cd6a168a3ec45ab9ead4f23" compoundref="uvfr__state__engine_8h" startline="230">uv_task_info::cmd_data</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" compoundref="uvfr__state__engine_8h" startline="210">uv_task_info::task_id</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" compoundref="uvfr__utils_8h" startline="170">UV_ABORTED</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca0e75e398c2bbcb663eaeb98684ca69d6" compoundref="uvfr__state__engine_8h" startline="98">UV_KILL_CMD</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" compoundref="uvfr__state__engine_8h" startline="126">UV_TASK_DELETED</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" compoundref="uvfr__state__engine_8h" startline="125">UV_TASK_NOT_STARTED</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" compoundref="uvfr__state__engine_8h" startline="128">UV_TASK_SUSPENDED</references>
        <references refid="group__state__engine__api_1ga0e5d6feafad4764ab2ffd4604ab633b5" compoundref="uvfr__state__engine_8h" startline="267">uvTaskIsDelaying</references>
        <referencedby refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="868" endline="1041">_stateChangeDaemon</referencedby>
        <referencedby refid="group__state__engine__backend_1gab8a03e5812e395199b3b0003cd8266cb" compoundref="uvfr__state__engine_8c" startline="446" endline="458">killEmAll</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga40d4bc9be9f3b81c51aef7ed7c37172f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvAbortTaskDeletion</definition>
        <argsstring>(uv_task_info *t)</argsstring>
        <name>uvAbortTaskDeletion</name>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>If a task is scheduled for deletion, we want to be able to resurrect it. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this will find the task deletion timer, and remove the task from the grave. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="551" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="551" bodyend="557"/>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga3ef71d11e9525846568eadac11c7e8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvScheduleTaskDeletion</definition>
        <argsstring>(uint32_t *tracker, uv_task_info *t)</argsstring>
        <name>uvScheduleTaskDeletion</name>
        <param>
          <type>uint32_t *</type>
          <declname>tracker</declname>
        </param>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Schedule a task to be deleted in the future double plus ungood imho. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="563" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="563" bodyend="581"/>
        <references refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" compoundref="uvfr__state__engine_8h" startline="243">uv_task_info::task_flags</references>
        <references refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" compoundref="uvfr__state__engine_8h" startline="210">uv_task_info::task_id</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" compoundref="uvfr__utils_8h" startline="170">UV_ABORTED</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1ga0ce66ea8b0c49749cc05a3ba06b2df75" compoundref="uvfr__state__engine_8h" startline="193">UV_TASK_AWAITING_DELETION</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" compoundref="uvfr__state__engine_8h" startline="126">UV_TASK_DELETED</references>
        <referencedby refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="868" endline="1041">_stateChangeDaemon</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1gafd67eecbab2e6e6915bc6bc71806b715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvSuspendTask</definition>
        <argsstring>(uint32_t *tracker, uv_task_info *t)</argsstring>
        <name>uvSuspendTask</name>
        <param>
          <type>uint32_t *</type>
          <declname>tracker</declname>
        </param>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>function to suspend one of the managed tasks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tracker</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to an int. If the task actually suspends, we update the tracker, since no further action is needed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>is a pointer to a <ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="590" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="590" bodyend="633"/>
        <references refid="structuv__task__info_1af532b5031cd6a168a3ec45ab9ead4f23" compoundref="uvfr__state__engine_8h" startline="230">uv_task_info::cmd_data</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" compoundref="uvfr__state__engine_8h" startline="210">uv_task_info::task_id</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca5f389a67f2a45fe1f51492b3b8f04077" compoundref="uvfr__state__engine_8h" startline="99">UV_SUSPEND_CMD</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" compoundref="uvfr__state__engine_8h" startline="126">UV_TASK_DELETED</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" compoundref="uvfr__state__engine_8h" startline="125">UV_TASK_NOT_STARTED</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" compoundref="uvfr__state__engine_8h" startline="128">UV_TASK_SUSPENDED</references>
        <references refid="group__state__engine__api_1ga0e5d6feafad4764ab2ffd4604ab633b5" compoundref="uvfr__state__engine_8h" startline="267">uvTaskIsDelaying</references>
        <referencedby refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="868" endline="1041">_stateChangeDaemon</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1gac1a1157d12026b20c6bbb5542c9f7efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvTaskCrashHandler</definition>
        <argsstring>(uv_task_info *t)</argsstring>
        <name>uvTaskCrashHandler</name>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Called when a task has crashed and we need to figure out what to do with it. </para>
        </briefdescription>
        <detaileddescription>
<para>Effectively, there are a couple variables we care about here: 1) Can the vehicle continue operation without that task active? 2) Do we really care?</para>
<para>If the task is critical, then this needs to 100% result in a panic. If it isn&apos;t then we can try to restart the task, noting that this may result in strange undefined behavior down the line. Thankfully if a task is not safety critical, we don&apos;t really care whether it misbehaves. Appropriate countermeasures are in place to prevent one task from overflowing into another task, as well as to mitigate against possible memory leaks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="647" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="647" bodyend="654"/>
        <references refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" compoundref="uvfr__state__engine_8h" startline="243">uv_task_info::task_flags</references>
        <references refid="group__state__engine__api_1gab37af27fe89f1987ee38bdb0bc945c43" compoundref="uvfr__state__engine_8h" startline="200">UV_TASK_MISSION_CRITICAL</references>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga8073be27b31b156bee66e3b3038144c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uvSecureVehicle</definition>
        <argsstring>()</argsstring>
        <name>uvSecureVehicle</name>
        <briefdescription>
<para>Function to put vehicle into safe state. </para>
        </briefdescription>
        <detaileddescription>
<para>Should perform the following functions in order:<itemizedlist>
<listitem><para>Prevent new MC torque or speed requests</para>
</listitem><listitem><para>Open shutdown cct </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="669" column="6" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="669" bodyend="677"/>
        <referencedby refid="group__state__engine__backend_1gab2449f66698295ebfaff451c2f63607f" compoundref="uvfr__state__engine_8c" startline="697" endline="708">__uvPanic</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1gab2449f66698295ebfaff451c2f63607f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __uvPanic</definition>
        <argsstring>(char *msg, uint8_t msg_len, const char *file, const int line, const char *func)</argsstring>
        <name>__uvPanic</name>
        <param>
          <type>char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>msg_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Something bad has occurred here now we in trouble. </para>
        </briefdescription>
        <detaileddescription>
<para>General idea here: Something bad has happened that is severe enough that it requires the shutdown of the vehicle. This can mean several things, such as being on fire, etc... that need to be appropriately handled</para>
<para>This should also log whatever the fuck happened.</para>
<para>The following should happen, in order:<itemizedlist>
<listitem><para>Forcibly put vehicle into a safe state</para>
</listitem><listitem><para>Change vehicle state to error, and invoke the SCD</para>
</listitem><listitem><para>Log the error in our lil running journal</para>
</listitem></itemizedlist>
</para>
<para>Should change vehicle state itself be the source of the error, we just need the software to completely fucking hang itself. If things are so fucked that we genuinely cannot even transition to the error state, then get that shit the fuck outta here, we shuttin down fr fr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="697" column="6" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="697" bodyend="708"/>
        <references refid="group__state__engine__backend_1ga8073be27b31b156bee66e3b3038144c9" compoundref="uvfr__state__engine_8c" startline="669" endline="677">uvSecureVehicle</references>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga5f35b34432afed7f18f91fb8607f096f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void killSelf</definition>
        <argsstring>(uv_task_info *t)</argsstring>
        <name>killSelf</name>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>This function is called by a task to nuke itself. Is a wrapper function that is used to do all the different things. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>First lets load up the queue and the values in it. These come from the task we are doing.</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="715" column="6" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="715" bodyend="748"/>
        <references refid="structuv__task__info_1af532b5031cd6a168a3ec45ab9ead4f23" compoundref="uvfr__state__engine_8h" startline="230">uv_task_info::cmd_data</references>
        <references refid="structuv__scd__response_1a0812669214881a452cc54e8783a74c4f" compoundref="uvfr__state__engine_8h" startline="116">uv_scd_response::meta_id</references>
        <references refid="structuv__scd__response_1a92a8d03f9ffbbd860cb0bbe48f90bd7e" compoundref="uvfr__state__engine_8h" startline="115">uv_scd_response::response_val</references>
        <references refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" compoundref="uvfr__state__engine_8c" startline="35">state_change_queue</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" compoundref="uvfr__state__engine_8h" startline="210">uv_task_info::task_id</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca3641b5b35403903b66faf4d615c3199d" compoundref="uvfr__state__engine_8h" startline="97">UV_NO_CMD</references>
        <references refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a886d929188a37a7fdae4b18b65a261ca" compoundref="uvfr__state__engine_8h" startline="107">UV_SUCCESSFUL_DELETION</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" compoundref="uvfr__state__engine_8h" startline="126">UV_TASK_DELETED</references>
        <referencedby refid="daq_8c_1a433bb586ceab47aed8d633fa2ff8ce56" compoundref="daq_8c" startline="62" endline="101">daqMasterTask</referencedby>
        <referencedby refid="odometer_8c_1a56d2ca9f89394f6519acb2ba11320d55" compoundref="odometer_8c" startline="46" endline="71">odometerTask</referencedby>
        <referencedby refid="driving__loop_8c_1a80cc48f06202edc29bcad26a956bcc98" compoundref="driving__loop_8c" startline="68" endline="207">StartDrivingLoop</referencedby>
        <referencedby refid="temp__monitoring_8c_1a2a1d7fee4cea6ce07e4d4acc1b2ca752" compoundref="temp__monitoring_8c" startline="48" endline="122">tempMonitorTask</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1gad6117850b55ad52be51d93915bcc313c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void suspendSelf</definition>
        <argsstring>(uv_task_info *t)</argsstring>
        <name>suspendSelf</name>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Called by a task that needs to suspend itself, once the task has determined it is safe to do so. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="756" column="6" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="756" bodyend="787"/>
        <references refid="structuv__task__info_1af532b5031cd6a168a3ec45ab9ead4f23" compoundref="uvfr__state__engine_8h" startline="230">uv_task_info::cmd_data</references>
        <references refid="structuv__scd__response_1a0812669214881a452cc54e8783a74c4f" compoundref="uvfr__state__engine_8h" startline="116">uv_scd_response::meta_id</references>
        <references refid="structuv__scd__response_1a92a8d03f9ffbbd860cb0bbe48f90bd7e" compoundref="uvfr__state__engine_8h" startline="115">uv_scd_response::response_val</references>
        <references refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" compoundref="uvfr__state__engine_8c" startline="35">state_change_queue</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" compoundref="uvfr__state__engine_8h" startline="210">uv_task_info::task_id</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca3641b5b35403903b66faf4d615c3199d" compoundref="uvfr__state__engine_8h" startline="97">UV_NO_CMD</references>
        <references refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a75d7f4415a6450a9c3d35aaf7b9577cd" compoundref="uvfr__state__engine_8h" startline="108">UV_SUCCESSFUL_SUSPENSION</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" compoundref="uvfr__state__engine_8h" startline="128">UV_TASK_SUSPENDED</references>
        <referencedby refid="daq_8c_1a433bb586ceab47aed8d633fa2ff8ce56" compoundref="daq_8c" startline="62" endline="101">daqMasterTask</referencedby>
        <referencedby refid="odometer_8c_1a56d2ca9f89394f6519acb2ba11320d55" compoundref="odometer_8c" startline="46" endline="71">odometerTask</referencedby>
        <referencedby refid="driving__loop_8c_1a80cc48f06202edc29bcad26a956bcc98" compoundref="driving__loop_8c" startline="68" endline="207">StartDrivingLoop</referencedby>
        <referencedby refid="temp__monitoring_8c_1a2a1d7fee4cea6ce07e4d4acc1b2ca752" compoundref="temp__monitoring_8c" startline="48" endline="122">tempMonitorTask</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga2e8a31626909ac17be499f2941d359d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>static uv_status proccessSCDMsg</definition>
        <argsstring>(uv_scd_response *msg)</argsstring>
        <name>proccessSCDMsg</name>
        <param>
          <type><ref refid="structuv__scd__response" kindref="compound">uv_scd_response</ref> *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Helper function for the SCD, that proccesses a message, and double checks to make sure the task that sent the message isn&apos;t straight up lying to us. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is responsible for the following functionality:<itemizedlist>
<listitem><para>Make sure that the message claims that the deletion or suspension of a task is successful</para>
</listitem><listitem><para>If a task claims that it is deleted, or suspended, then we must verify that this is the case </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Get the id of the message, then use that to index the _task_register Mission critical stuff that stops ev from driving into a wall</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="799" column="18" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="799" bodyend="854"/>
        <references refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" compoundref="uvfr__state__engine_8c" startline="26">_task_register</references>
        <references refid="structuv__scd__response_1a0812669214881a452cc54e8783a74c4f" compoundref="uvfr__state__engine_8h" startline="116">uv_scd_response::meta_id</references>
        <references refid="structuv__scd__response_1a92a8d03f9ffbbd860cb0bbe48f90bd7e" compoundref="uvfr__state__engine_8h" startline="115">uv_scd_response::response_val</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76aa66da42f9355512e286812074433015b" compoundref="uvfr__state__engine_8h" startline="109">UV_COULDNT_DELETE</references>
        <references refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a3c33585e5ac7f76a9bc4dc1fccb764ec" compoundref="uvfr__state__engine_8h" startline="110">UV_COULDNT_SUSPEND</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a886d929188a37a7fdae4b18b65a261ca" compoundref="uvfr__state__engine_8h" startline="107">UV_SUCCESSFUL_DELETION</references>
        <references refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a75d7f4415a6450a9c3d35aaf7b9577cd" compoundref="uvfr__state__engine_8h" startline="108">UV_SUCCESSFUL_SUSPENSION</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" compoundref="uvfr__state__engine_8h" startline="126">UV_TASK_DELETED</references>
        <references refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a0dd4e6d2bbbde83536ed21ac4ce2bd00" compoundref="uvfr__state__engine_8h" startline="111">UV_UNSAFE_STATE</references>
        <referencedby refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="868" endline="1041">_stateChangeDaemon</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _stateChangeDaemon</definition>
        <argsstring>(void *args) PRIVILEGED_FUNCTION</argsstring>
        <name>_stateChangeDaemon</name>
        <param>
          <type>void *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>This collects all the data changing from different tasks, and makes sure that everything works properly. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>DO NOT EVER JUST CALL THIS FUNCTION. THIS SHOULD ONLY BE CALLED FROM changeVehicleState</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>This accepts a <computeroutput>void*</computeroutput> pointer to avoid compile errors with freeRTOS, since freeRTOS expects a pointer to the function that accepts a void pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is a one-shot RTOS task that spawns in when we want to change the state of the vehicle state. It performs this in the following way </para>
        </detaileddescription>
        <inbodydescription>
<para>We get to iterate through all of the managed tasks. Goes via IDs as well. We load up the array entry as a temp pointer to a task info struct. As we go through it determines what to do by comparing the <computeroutput><ref refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" kindref="member">uv_task_info.active_states</ref></computeroutput> as well as <computeroutput><ref refid="structuv__task__info_1a6986d7216c7f889164931b37ab752c29" kindref="member">uv_task_info.deletion_states</ref></computeroutput> and <computeroutput><ref refid="structuv__task__info_1aafd4e2d916f50b54b99fd02d63831e43" kindref="member">uv_task_info.suspension_states</ref></computeroutput> with <computeroutput>uv_vehicle_state</computeroutput> </para>
<para>This is done with the bitwise &amp; operator, since the definition of the <computeroutput>uv_vehicle_state_t</computeroutput> enum facilitates this by only using factors of two.</para>
<para>Acquires pointer to task definition struct, then sets the queue in the struct to the SCD queue, so that the task actually does task things. Love when that happens. Next it sets the bit in the task_tracker corresponding to the task id, therefore marking that some action must be taken to either<itemizedlist>
<listitem><para>confirm that no action is neccessary</para>
</listitem><listitem><para>bring the task state into the correct state</para>
</listitem></itemizedlist>
</para>
<para>Now we suspend the task because it has been misbehaving in school</para>
<para>Wait for all the tasks that had changes made to respond.<programlisting><codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uv_scd_response*<sp/>response<sp/>=<sp/>NULL;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_LONGEST_SC_TIME/_SC_DAEMON_PERIOD;<sp/>i++){<sp/>//This<sp/>loop<sp/>verifies<sp/>to<sp/>make<sp/>sure<sp/>things<sp/>are<sp/>actually<sp/>chillin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(_SC_DAEMON_PERIOD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>j<sp/>=<sp/>0;j&lt;10;j++){<sp/>//What<sp/>kinda<sp/>magic<sp/>number<sp/>is<sp/>this?<sp/>Why<sp/>10?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Attempt<sp/>to<sp/>read<sp/>from<sp/>the<sp/>message<sp/>queue.<sp/>If<sp/>successful,<sp/>then</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@c<sp/>xQueueReceive()<sp/>will<sp/>return<sp/>@c<sp/>pdPASS<sp/>and<sp/>we<sp/>will<sp/>then<sp/>be<sp/>able<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>interpret<sp/>the<sp/>message.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>@c<sp/>xQueueReceive()<sp/>copies<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>response<sp/>function<sp/>to<sp/>the<sp/>address<sp/>specified<sp/>by<sp/>&amp;response</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(xQueueReceive(state_change_queue,&amp;response,1)<sp/>==<sp/>pdPASS){</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(response<sp/>==<sp/>NULL){//definately<sp/>not<sp/>supposed<sp/>to<sp/>happen</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(&quot;null<sp/>scd<sp/>response&quot;,0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Message<sp/>interpretation<sp/>happens<sp/>in<sp/>the<sp/>@function<sp/>proccessSCDMsg(),<sp/>which<sp/>is<sp/>passed<sp/>a<sp/>pointer<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>response<sp/>message<sp/>struct.<sp/>See<sp/>the<sp/>documentation<sp/>for<sp/>this<sp/>function<sp/>to<sp/>learn<sp/>about<sp/>it&apos;s<sp/>internals,<sp/>and<sp/>what</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>it<sp/>actually<sp/>looks<sp/>like.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(proccessSCDMsg(response)==UV_OK){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;response-&gt;meta_id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_task_register[response-&gt;meta_id].task_state<sp/>==<sp/>UV_TASK_DELETED){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_task_register[response-&gt;meta_id].task_handle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Not<sp/>ok,<sp/>this<sp/>means<sp/>that<sp/>process<sp/>SCD<sp/>has<sp/>returned<sp/>something<sp/>weird.<sp/>More<sp/>detailed<sp/>error_handling<sp/>can<sp/>be<sp/>added<sp/>later.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(&quot;Task<sp/>giving<sp/>Sass<sp/>to<sp/>SCD&quot;,0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Gotta<sp/>free<sp/>the<sp/>response</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(uvFree(response)!=UV_OK){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(&quot;failed<sp/>to<sp/>free<sp/>memory&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>NULL;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}else{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//You<sp/>timed<sp/>out<sp/>didnt<sp/>you...<sp/>Naughty<sp/>naughty...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(task_tracker<sp/>!=<sp/>0){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(&quot;SCD<sp/>Timeout&quot;,0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//TODO:<sp/>Forcibly<sp/>reconcile<sp/>vehicle<sp/>state,<sp/>and<sp/>nuke<sp/>whatever<sp/>tasks<sp/>require<sp/>nuking,<sp/>suspend<sp/>whatever<sp/>needs<sp/>suspended</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//END_OF_STATE_CHANGE_DAEMON:</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TaskHandle_t<sp/>scd_handle<sp/>=<sp/>((state_change_daemon_args*)args)-&gt;meta_task_handle;</highlight></codeline>
<codeline><highlight class="normal">uvFree(args);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**This<sp/>line<sp/>deletes<sp/>the<sp/>queue<sp/>to<sp/>free<sp/>up<sp/>the<sp/>memory<sp/>@code<sp/>*/</highlight></codeline>
<codeline><highlight class="normal">vQueueDelete(state_change_queue);</highlight></codeline>
<codeline><highlight class="normal">state_change_queue<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
</programlisting></para>
<para>The final act of the SCD, is to delete itself<programlisting><codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">vTaskDelete(scd_handle);</highlight></codeline>
<codeline><highlight class="normal">/**<sp/></highlight></codeline>
</programlisting></para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="868" column="6" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="868" bodyend="1041"/>
        <references refid="uvfr__state__engine_8h_1a2b86418bd482f9d4a2a36f35e786798e" compoundref="uvfr__state__engine_8h" startline="63">_LONGEST_SC_TIME</references>
        <references refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" compoundref="uvfr__state__engine_8c" startline="25">_next_task_id</references>
        <references refid="uvfr__state__engine_8h_1a092c530d4a0cd880a59598dc0fca95d4" compoundref="uvfr__state__engine_8h" startline="64">_SC_DAEMON_PERIOD</references>
        <references refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" compoundref="uvfr__state__engine_8c" startline="26">_task_register</references>
        <references refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" compoundref="uvfr__state__engine_8h" startline="239">uv_task_info::active_states</references>
        <references refid="structuv__task__info_1a6986d7216c7f889164931b37ab752c29" compoundref="uvfr__state__engine_8h" startline="240">uv_task_info::deletion_states</references>
        <references refid="structuv__scd__response_1a0812669214881a452cc54e8783a74c4f" compoundref="uvfr__state__engine_8h" startline="116">uv_scd_response::meta_id</references>
        <references refid="group__state__engine__backend_1ga2e8a31626909ac17be499f2941d359d0" compoundref="uvfr__state__engine_8c" startline="799" endline="854">proccessSCDMsg</references>
        <references refid="group__state__engine_1gaa11ee7595fe2da14c5949195824179af" compoundref="uvfr__state__engine_8c" startline="34">SCD_active</references>
        <references refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" compoundref="uvfr__state__engine_8c" startline="35">state_change_queue</references>
        <references refid="structuv__task__info_1aafd4e2d916f50b54b99fd02d63831e43" compoundref="uvfr__state__engine_8h" startline="241">uv_task_info::suspension_states</references>
        <references refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" compoundref="uvfr__state__engine_8h" startline="243">uv_task_info::task_flags</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1ga0ce66ea8b0c49749cc05a3ba06b2df75" compoundref="uvfr__state__engine_8h" startline="193">UV_TASK_AWAITING_DELETION</references>
        <references refid="group__state__engine__api_1gaf1374f633bd37be99d7d58e33270ce8c" compoundref="uvfr__state__engine_8h" startline="194">UV_TASK_DEFER_DELETION</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" compoundref="uvfr__state__engine_8h" startline="126">UV_TASK_DELETED</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" compoundref="uvfr__state__engine_8h" startline="125">UV_TASK_NOT_STARTED</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88ad4da927019afea812b31d46d28b7354c" compoundref="uvfr__state__engine_8h" startline="127">UV_TASK_RUNNING</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" compoundref="uvfr__state__engine_8h" startline="128">UV_TASK_SUSPENDED</references>
        <references refid="group__state__engine__backend_1ga6291142ec714ce1450099943b1b8d00a" compoundref="uvfr__state__engine_8c" startline="491" endline="544">uvDeleteTask</references>
        <references refid="group__state__engine__backend_1ga3ef71d11e9525846568eadac11c7e8e4" compoundref="uvfr__state__engine_8c" startline="563" endline="581">uvScheduleTaskDeletion</references>
        <references refid="group__state__engine__backend_1ga15cdf09b5625c2ba29a6c6d5c96214dc" compoundref="uvfr__state__engine_8c" startline="365" endline="431">uvStartTask</references>
        <references refid="group__state__engine__backend_1gafd67eecbab2e6e6915bc6bc71806b715" compoundref="uvfr__state__engine_8c" startline="590" endline="633">uvSuspendTask</references>
        <references refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" compoundref="uvfr__state__engine_8c" startline="39">vehicle_state</references>
        <referencedby refid="group__state__engine__api_1gaa3ad3e8df75177c00265881c16563212" compoundref="uvfr__state__engine_8c" startline="86" endline="143">changeVehicleState</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga07f1b117d38d4723eb85c17913b06713" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvInvokeSCD</definition>
        <argsstring>(void *scd_params)</argsstring>
        <name>uvInvokeSCD</name>
        <param>
          <type>void *</type>
          <declname>scd_params</declname>
        </param>
        <briefdescription>
<para>used to wake up the SCD </para>
        </briefdescription>
        <detaileddescription>
<para>This is only called from uvTaskManager to wake up the SCD </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="1049" column="18" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="1049" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga20334b4aff0cfdab7be1d2864089c5ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
        <definition>uv_task_info* uvCreateServiceTask</definition>
        <argsstring>()</argsstring>
        <name>uvCreateServiceTask</name>
        <briefdescription>
<para>Create a new service task, because fuck you, thats why. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Acquire the pointer to the spot in the array, we are doing this since we need to return the pointer anyways, and it cleans up the syntax a little.</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="1138" column="14" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="1138" bodyend="1173"/>
        <references refid="group__state__engine_1gae48b13e362d2b9d10ec61f516ea5c09f" compoundref="uvfr__state__engine_8c" startline="28">_next_svc_task_id</references>
        <references refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" compoundref="uvfr__state__engine_8c" startline="25">_next_task_id</references>
        <references refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" compoundref="uvfr__state__engine_8c" startline="26">_task_register</references>
        <references refid="uvfr__state__engine_8h_1a32571accb85a2d8f479c6066d7a46238" compoundref="uvfr__state__engine_8h" startline="58">_UV_DEFAULT_TASK_STACK_SIZE</references>
        <references refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" compoundref="uvfr__state__engine_8h" startline="239">uv_task_info::active_states</references>
        <references refid="structuv__task__info_1a6986d7216c7f889164931b37ab752c29" compoundref="uvfr__state__engine_8h" startline="240">uv_task_info::deletion_states</references>
        <references refid="group__state__engine_1ga8a80fe70c2d06583bbcd00c5162860c5" compoundref="uvfr__state__engine_8c" startline="20">MAX_NUM_MANAGED_TASKS</references>
        <references refid="structuv__task__info_1a5d32fc8f47b905499257336c561d189b" compoundref="uvfr__state__engine_8h" startline="234">uv_task_info::parent</references>
        <references refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" compoundref="uvfr__state__engine_8h" startline="220">uv_task_info::stack_size</references>
        <references refid="structuv__task__info_1aafd4e2d916f50b54b99fd02d63831e43" compoundref="uvfr__state__engine_8h" startline="241">uv_task_info::suspension_states</references>
        <references refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" compoundref="uvfr__state__engine_8h" startline="243">uv_task_info::task_flags</references>
        <references refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" compoundref="uvfr__state__engine_8h" startline="216">uv_task_info::task_function</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" compoundref="uvfr__state__engine_8h" startline="210">uv_task_info::task_id</references>
        <references refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" compoundref="uvfr__state__engine_8h" startline="211">uv_task_info::task_name</references>
        <references refid="structuv__task__info_1aff45751f7189980589d55379d1d5a355" compoundref="uvfr__state__engine_8h" startline="217">uv_task_info::task_priority</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="group__state__engine__api_1ga056a2272c9356c78597c5c82bc58db2f" compoundref="uvfr__state__engine_8h" startline="184">UV_TASK_GENERIC_SVC</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" compoundref="uvfr__state__engine_8h" startline="125">UV_TASK_NOT_STARTED</references>
        <referencedby refid="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" compoundref="uvfr__state__engine_8c" startline="151" endline="172">uvInitStateEngine</referencedby>
        <referencedby refid="group__state__engine_1gaff684308203d45e9e16ad3d115c54279" compoundref="uvfr__state__engine_8c" startline="1284" endline="1335">uvSVCTaskManager</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga91b9f84bc63d5808a3f70623ed8a0700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvStartSVCTask</definition>
        <argsstring>(uv_task_info *t)</argsstring>
        <name>uvStartSVCTask</name>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Function to start a service task specifically. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="1178" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="1178" bodyend="1212"/>
        <references refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" compoundref="uvfr__state__engine_8h" startline="220">uv_task_info::stack_size</references>
        <references refid="structuv__task__info_1ae255dff9b38fc8c0754085060e8ae699" compoundref="uvfr__state__engine_8h" startline="232">uv_task_info::task_args</references>
        <references refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" compoundref="uvfr__state__engine_8h" startline="243">uv_task_info::task_flags</references>
        <references refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" compoundref="uvfr__state__engine_8h" startline="216">uv_task_info::task_function</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" compoundref="uvfr__state__engine_8h" startline="211">uv_task_info::task_name</references>
        <references refid="structuv__task__info_1aff45751f7189980589d55379d1d5a355" compoundref="uvfr__state__engine_8h" startline="217">uv_task_info::task_priority</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" compoundref="uvfr__utils_8h" startline="170">UV_ABORTED</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1ga056a2272c9356c78597c5c82bc58db2f" compoundref="uvfr__state__engine_8h" startline="184">UV_TASK_GENERIC_SVC</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88ad4da927019afea812b31d46d28b7354c" compoundref="uvfr__state__engine_8h" startline="127">UV_TASK_RUNNING</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" compoundref="uvfr__state__engine_8h" startline="128">UV_TASK_SUSPENDED</references>
        <referencedby refid="group__state__engine__backend_1gad930776c44487128dbb60294a66a68e3" compoundref="uvfr__state__engine_8c" startline="1260" endline="1278">uvRestartSVCTask</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga87455110c1a898b9294c66c14043f02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvSuspendSVCTask</definition>
        <argsstring>(uv_task_info *t)</argsstring>
        <name>uvSuspendSVCTask</name>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Function that suspends a service task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="1217" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="1217" bodyend="1227"/>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" compoundref="uvfr__utils_8h" startline="170">UV_ABORTED</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" compoundref="uvfr__state__engine_8h" startline="128">UV_TASK_SUSPENDED</references>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga02ceb2f70d4474d4734de6494aca8978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvDeleteSVCTask</definition>
        <argsstring>(uv_task_info *t)</argsstring>
        <name>uvDeleteSVCTask</name>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>For when you need to delete a service task... for some reason... </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="1232" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="1232" bodyend="1253"/>
        <references refid="structuv__task__info_1af532b5031cd6a168a3ec45ab9ead4f23" compoundref="uvfr__state__engine_8h" startline="230">uv_task_info::cmd_data</references>
        <references refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" compoundref="uvfr__state__engine_8h" startline="228">uv_task_info::task_handle</references>
        <references refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" compoundref="uvfr__state__engine_8h" startline="225">uv_task_info::task_state</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" compoundref="uvfr__utils_8h" startline="170">UV_ABORTED</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca0e75e398c2bbcb663eaeb98684ca69d6" compoundref="uvfr__state__engine_8h" startline="98">UV_KILL_CMD</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" compoundref="uvfr__state__engine_8h" startline="126">UV_TASK_DELETED</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" compoundref="uvfr__state__engine_8h" startline="125">UV_TASK_NOT_STARTED</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88ad4da927019afea812b31d46d28b7354c" compoundref="uvfr__state__engine_8h" startline="127">UV_TASK_RUNNING</references>
        <references refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" compoundref="uvfr__state__engine_8h" startline="128">UV_TASK_SUSPENDED</references>
        <referencedby refid="group__state__engine__backend_1gad930776c44487128dbb60294a66a68e3" compoundref="uvfr__state__engine_8c" startline="1260" endline="1278">uvRestartSVCTask</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1gad930776c44487128dbb60294a66a68e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvRestartSVCTask</definition>
        <argsstring>(uv_task_info *t)</argsstring>
        <name>uvRestartSVCTask</name>
        <param>
          <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Function that takes a service part that may be messed up and tries to reboot it to recover. </para>
        </briefdescription>
        <detaileddescription>
<para>This may be neccessary if a SVC task is not responding. Be careful though, since this has the potential to delay more important tasks :o Therefore, this technique should be used sparingly, and each task gets a limited number of attempts within a certain time period. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="1260" column="11" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="1260" bodyend="1278"/>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__backend_1ga02ceb2f70d4474d4734de6494aca8978" compoundref="uvfr__state__engine_8c" startline="1232" endline="1253">uvDeleteSVCTask</references>
        <references refid="group__state__engine__backend_1gae0caac28206291f3dc5c416f11892edd" compoundref="uvfr__state__engine_8c" startline="467" endline="480">uvKillTaskViolently</references>
        <references refid="group__state__engine__backend_1ga91b9f84bc63d5808a3f70623ed8a0700" compoundref="uvfr__state__engine_8c" startline="1178" endline="1212">uvStartSVCTask</references>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1ga273ef3bc881c3188a46e1707a8a6c0d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
        <definition>uv_task_info* uvGetTaskFromName</definition>
        <argsstring>(char *tsk_name)</argsstring>
        <name>uvGetTaskFromName</name>
        <param>
          <type>char *</type>
          <declname>tsk_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sometimes you just gottta deal with it lol </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="1340" column="14" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="1340" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="group__state__engine__backend_1gab212c58efa87a2bc8ab5d256733a0b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> *</type>
        <definition>uv_task_info* uvGetTaskFromRTOSHandle</definition>
        <argsstring>(TaskHandle_t t_handle)</argsstring>
        <name>uvGetTaskFromRTOSHandle</name>
        <param>
          <type>TaskHandle_t</type>
          <declname>t_handle</declname>
        </param>
        <briefdescription>
<para>Returns the pointer to the task info structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A freeRTOS task handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="structuv__task__info" kindref="compound">uv_task_info</ref> data structure. This is mostly useful for cases where you know the RTOS handle, but not the task info struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_state_engine.c" line="1352" column="14" bodyfile="Core/Src/uvfr_state_engine.c" bodystart="1352" bodyend="1357"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File containing the implementation of the vehicle&apos;s state engine and error handling infrastructure. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Byron Oser </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="10" refid="uvfr__state__engine_8c_1a6cd439d1fb18334cd13cf3539aebca5c" refkind="member"><highlight class="preprocessor">#define<sp/>UVFR_STATE_MACHINE_IMPLIMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="uvfr__utils_8h" kindref="compound">uvfr_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&quot;assert.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="group__state__engine_1ga8a80fe70c2d06583bbcd00c5162860c5" refkind="member"><highlight class="preprocessor">#define<sp/>MAX_NUM_MANAGED_TASKS<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//Stores<sp/>the<sp/>actual<sp/>task<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="uvfr__state__engine_8h_1aa6ffd72eb4909ddb38c37a1369e13f09" kindref="member">uv_task_id</ref><sp/><ref refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" kindref="member">_next_task_id</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26" refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/><ref refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" kindref="member">_task_register</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="group__state__engine_1gae48b13e362d2b9d10ec61f516ea5c09f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="uvfr__state__engine_8h_1aa6ffd72eb4909ddb38c37a1369e13f09" kindref="member">uv_task_id</ref><sp/><ref refid="group__state__engine_1gae48b13e362d2b9d10ec61f516ea5c09f" kindref="member">_next_svc_task_id</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29" refid="group__state__engine_1ga031bbb86895e7346f4c7c168b36ffbd4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/><ref refid="group__state__engine_1ga031bbb86895e7346f4c7c168b36ffbd4" kindref="member">_svc_task_register</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="group__state__engine_1gac204f3b14ce9bf370b2e5477dc87afea" refkind="member"><highlight class="normal">TaskHandle_t*<sp/><ref refid="group__state__engine_1gac204f3b14ce9bf370b2e5477dc87afea" kindref="member">scd_handle_ptr</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="group__state__engine_1gaa11ee7595fe2da14c5949195824179af" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__state__engine_1gaa11ee7595fe2da14c5949195824179af" kindref="member">SCD_active</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35" refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QueueHandle_t<sp/><ref refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" kindref="member">state_change_queue</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="group__state__engine_1ga168524a5d658247db44217e643b6396f" refkind="member"><highlight class="normal"><ref refid="structrbtree" kindref="compound">rbtree</ref>*<sp/><ref refid="group__state__engine_1ga168524a5d658247db44217e643b6396f" kindref="member">task_name_lut</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__state__engine__api_1ga259abff5a03eaf908dc8f03d99f478e4" kindref="member">uv_vehicle_state_t</ref><sp/><ref refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" kindref="member">vehicle_state</ref><sp/>=<sp/><ref refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4afdfc4cdb8c5210e05bdfdc3df51f80ff" kindref="member">UV_BOOT</ref>;</highlight></codeline>
<codeline lineno="40" refid="group__state__engine_1ga2ce6eef16a78c095592954d2fe68af2e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__state__engine__api_1ga259abff5a03eaf908dc8f03d99f478e4" kindref="member">uv_vehicle_state_t</ref><sp/><ref refid="group__state__engine_1ga2ce6eef16a78c095592954d2fe68af2e" kindref="member">previous_state</ref><sp/>=<sp/><ref refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4afdfc4cdb8c5210e05bdfdc3df51f80ff" kindref="member">UV_BOOT</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" refkind="member"><highlight class="normal"><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/><ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="43" refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" refkind="member"><highlight class="normal"><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/><ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="group__state__engine_1gad9e02be6d2d0bc1ab5cd9fd8cae34230" refkind="member"><highlight class="normal"><ref refid="structuv__os__settings" kindref="compound">uv_os_settings</ref><sp/><ref refid="group__state__engine_1gad9e02be6d2d0bc1ab5cd9fd8cae34230" kindref="member">default_os_settings</ref><sp/>={</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structuv__os__settings_1a82068c14ee06131f3184d99fd2c1fae0" kindref="member">svc_task_manager_period</ref><sp/>=<sp/>50,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.task_manager_period<sp/>=<sp/>50,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max_svc_task_period<sp/>=<sp/>250,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max_task_period<sp/>=<sp/>500,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>prototypes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1gab8a03e5812e395199b3b0003cd8266cb" kindref="member">killEmAll</ref>();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__state__engine_1gaff684308203d45e9e16ad3d115c54279" kindref="member">uvSVCTaskManager</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>args);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__state__engine__backend_1gaf2dbdd0d9d9aa8bcbef120661117fc5e" kindref="member">uvTaskManager</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>args);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="structstate__change__daemon__args" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstate__change__daemon__args" kindref="compound">state_change_daemon_args</ref>{</highlight></codeline>
<codeline lineno="59" refid="structstate__change__daemon__args_1aa19a15c725f1fdc8dcc05227584153bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskHandle_t<sp/><ref refid="structstate__change__daemon__args_1aa19a15c725f1fdc8dcc05227584153bc" kindref="member">meta_task_handle</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}<ref refid="group__state__engine_1gac9bd88d7c454ec151183930fce544c9c" kindref="member">state_change_daemon_args</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="group__state__engine__api_1gaa3ad3e8df75177c00265881c16563212" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__api_1gaa3ad3e8df75177c00265881c16563212" kindref="member">changeVehicleState</ref>(uint16_t<sp/>state){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(<ref refid="group__utility__macros_1gade3043fb92536f8e1a616ba8aaef4ab9" kindref="member">isPowerOfTwo</ref>(state))){</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;<sp/></highlight><highlight class="comment">//literally<sp/>not<sp/>a<sp/>possible<sp/>state,<sp/>since<sp/>all<sp/>vehicle<sp/>states<sp/>are<sp/>powers<sp/>of<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(state<sp/>==<sp/><ref refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" kindref="member">vehicle_state</ref>){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" kindref="member">UV_ABORTED</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga2ce6eef16a78c095592954d2fe68af2e" kindref="member">previous_state</ref><sp/>=<sp/><ref refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" kindref="member">vehicle_state</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" kindref="member">vehicle_state</ref><sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>state_diff<sp/>=<sp/><ref refid="group__state__engine_1ga2ce6eef16a78c095592954d2fe68af2e" kindref="member">previous_state</ref>-<ref refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" kindref="member">vehicle_state</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(state_diff){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a5e3e7ecab0a58b320912cb4129641579" kindref="member">UV_INIT</ref>-<ref refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a9ec1eef180c6208b25b08f0526dc5eb8" kindref="member">UV_READY</ref>):</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a5e3e7ecab0a58b320912cb4129641579" kindref="member">UV_INIT</ref>-<ref refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4ac1fcacc095b8c0f1c9f452d51815bcb5" kindref="member">UV_ERROR_STATE</ref>):</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//invalid<sp/>transitions<sp/>that<sp/>should<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>State<sp/>Transition&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstate__change__daemon__args" kindref="compound">state_change_daemon_args</ref>*<sp/>scd_args<sp/>=<sp/>uvMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structstate__change__daemon__args" kindref="compound">state_change_daemon_args</ref>));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>scd_args-&gt;<ref refid="structstate__change__daemon__args_1aa19a15c725f1fdc8dcc05227584153bc" kindref="member">meta_task_handle</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseType_t<sp/>retval;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>xTaskCreate(<ref refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" kindref="member">_stateChangeDaemon</ref>,</highlight><highlight class="stringliteral">&quot;scd&quot;</highlight><highlight class="normal">,256,scd_args,osPriorityAboveNormal,&amp;(scd_args-&gt;<ref refid="structstate__change__daemon__args_1aa19a15c725f1fdc8dcc05227584153bc" kindref="member">meta_task_handle</ref>));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval<sp/>!=<sp/>pdPASS<sp/>||<sp/>scd_args-&gt;<ref refid="structstate__change__daemon__args_1aa19a15c725f1fdc8dcc05227584153bc" kindref="member">meta_task_handle</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvFree(scd_args);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;State<sp/>Transition<sp/>Failed&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//scd_args-&gt;meta_task_handle<sp/>=<sp/>osThreadCreate(&amp;SCD_thread,scd_args);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(*scd_handle_ptr<sp/>!=<sp/>NULL){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>xTaskNotifyGive(*scd_handle_ptr);<sp/>//basically<sp/>we<sp/>just<sp/>wanna<sp/>wake<sp/>up<sp/>the<sp/>SCD<sp/>so<sp/>it<sp/>rectifies<sp/>the<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>UV_ERROR;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" kindref="member">uvInitStateEngine</ref>(){</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>all<sp/>the<sp/>managed<sp/>tasks<sp/>:)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" kindref="member">_task_register</ref><sp/>=<sp/>uvMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>)*<ref refid="group__state__engine_1ga8a80fe70c2d06583bbcd00c5162860c5" kindref="member">MAX_NUM_MANAGED_TASKS</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" kindref="member">_task_register</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uvfr__utils_8h_1a92b5ac44171d49acd084c274385a043a" kindref="member">__uvInitPanic</ref>();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref><sp/>=<sp/><ref refid="group__state__engine__backend_1ga20334b4aff0cfdab7be1d2864089c5ce" kindref="member">uvCreateServiceTask</ref>();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref><sp/>=<sp/><ref refid="group__state__engine__backend_1ga20334b4aff0cfdab7be1d2864089c5ce" kindref="member">uvCreateServiceTask</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref><sp/>==<sp/>NULL)||(<ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref><sp/>==<sp/>NULL)){</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uvfr__utils_8h_1a92b5ac44171d49acd084c274385a043a" kindref="member">__uvInitPanic</ref>();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="driving__loop_8h_1af580185fb5bb1cfba30ee1709d90628c" kindref="member">initDrivingLoop</ref>(NULL);<sp/></highlight><highlight class="comment">//create<sp/>the<sp/>main<sp/>driving<sp/>loop<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="temp__monitoring_8h_1a4d862a74e85fea73d9089ed437f9859b" kindref="member">initTempMonitor</ref>(NULL);<sp/></highlight><highlight class="comment">//create<sp/>the<sp/>temperature<sp/>monitoring<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daq_8h_1adecae26482eb2c3289131a2a486ac8b3" kindref="member">initDaqTask</ref>(NULL);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="odometer_8h_1ace344890a9a3f03e059a4eb44af85e00" kindref="member">initOdometer</ref>(NULL);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" kindref="member">uvStartStateMachine</ref>(){</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga2ce6eef16a78c095592954d2fe68af2e" kindref="member">previous_state</ref><sp/>=<sp/><ref refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" kindref="member">vehicle_state</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" kindref="member">vehicle_state</ref><sp/>=<sp/><ref refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a5e3e7ecab0a58b320912cb4129641579" kindref="member">UV_INIT</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref>-&gt;<ref refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" kindref="member">task_name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;svcTaskManager&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Task<sp/>info<sp/>for<sp/>the<sp/>svc<sp/>task<sp/>manager<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref>-&gt;<ref refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" kindref="member">task_flags</ref><sp/>|=<sp/><ref refid="group__state__engine__api_1gab37af27fe89f1987ee38bdb0bc945c43" kindref="member">UV_TASK_MISSION_CRITICAL</ref><sp/>|<sp/><ref refid="group__state__engine__api_1ga4d87bda0a72990876364bd8764777cb2" kindref="member">UV_TASK_SCD_IGNORE</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref>-&gt;<ref refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" kindref="member">task_function</ref><sp/>=<sp/><ref refid="group__state__engine_1gaff684308203d45e9e16ad3d115c54279" kindref="member">uvSVCTaskManager</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref>-&gt;<ref refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" kindref="member">stack_size</ref><sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref>-&gt;<ref refid="structuv__task__info_1ad157811debce6672bb6d00da7e90b6ca" kindref="member">task_period</ref><sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref>-&gt;<ref refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" kindref="member">task_name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;taskManager&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Task<sp/>info<sp/>for<sp/>regular<sp/>uvTaskManager<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref>-&gt;<ref refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" kindref="member">task_flags</ref><sp/>|=<sp/><ref refid="group__state__engine__api_1gab37af27fe89f1987ee38bdb0bc945c43" kindref="member">UV_TASK_MISSION_CRITICAL</ref><sp/>|<sp/><ref refid="group__state__engine__api_1ga4d87bda0a72990876364bd8764777cb2" kindref="member">UV_TASK_SCD_IGNORE</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref>-&gt;<ref refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" kindref="member">task_function</ref><sp/>=<sp/><ref refid="group__state__engine__backend_1gaf2dbdd0d9d9aa8bcbef120661117fc5e" kindref="member">uvTaskManager</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref>-&gt;<ref refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" kindref="member">stack_size</ref><sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref>-&gt;<ref refid="structuv__task__info_1ad157811debce6672bb6d00da7e90b6ca" kindref="member">task_period</ref><sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine__backend_1ga8c1618caac0d7f29836107f1a44833e8" kindref="member">uvValidateManagedTasks</ref>()<sp/>!=<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseType_t<sp/>retval;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//starting<sp/>up<sp/>the<sp/>terrifying<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>xTaskCreate(<ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref>-&gt;<ref refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" kindref="member">task_function</ref>,<ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref>-&gt;<ref refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" kindref="member">task_name</ref>,<ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref>-&gt;<ref refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" kindref="member">stack_size</ref>,<ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref>,4,&amp;(<ref refid="group__state__engine_1ga42329069c59ef55a97a6b0bca0cafd32" kindref="member">svc_task_manager</ref>-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;<sp/></highlight><highlight class="comment">//if<sp/>for<sp/>whatever<sp/>god<sp/>forsaken<sp/>reason<sp/>neither<sp/>of<sp/>these<sp/>tasks<sp/>actually<sp/>activate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>xTaskCreate(<ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref>-&gt;<ref refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" kindref="member">task_function</ref>,<ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref>-&gt;<ref refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" kindref="member">task_name</ref>,<ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref>-&gt;<ref refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" kindref="member">stack_size</ref>,<ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref>,4,&amp;(<ref refid="group__state__engine_1ga3de41676729241e58688c61c450e4a1e" kindref="member">task_manager</ref>-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight><highlight class="comment">//very<sp/>much<sp/>++<sp/>ungoods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>state_change_daemon_args*<sp/>scd_args<sp/>=<sp/>uvMalloc(sizeof(state_change_daemon_args));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>scd_args-&gt;meta_task_handle<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>scd_handle_ptr<sp/>=<sp/>&amp;(scd_args-&gt;meta_task_handle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>retval<sp/>=<sp/>xTaskCreate(_stateChangeDaemon,&quot;scd&quot;,256,scd_args,5,&amp;(scd_args-&gt;meta_task_handle));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>if(retval<sp/>!=<sp/>pdPASS<sp/>||<sp/>scd_args-&gt;meta_task_handle<sp/>==<sp/>NULL){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>uvFree(scd_args);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(&quot;SCD<sp/>Not<sp/>starting<sp/>:(&quot;,0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="group__state__engine__api_1ga5cb739823b10b90a139315356aa6b22f" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__api_1ga5cb739823b10b90a139315356aa6b22f" kindref="member">uvDeInitStateEngine</ref>(){</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__state__engine__backend_1gab8a03e5812e395199b3b0003cd8266cb" kindref="member">killEmAll</ref>();</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="group__state__engine__api_1ga99bfc92472cdc99e9005e9d3c792909a" refkind="member"><highlight class="normal"><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref><sp/>*<ref refid="group__state__engine__api_1ga99bfc92472cdc99e9005e9d3c792909a" kindref="member">uvCreateTask</ref>(){</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" kindref="member">_next_task_id</ref><sp/>&gt;=<sp/><ref refid="group__state__engine_1ga8a80fe70c2d06583bbcd00c5162860c5" kindref="member">MAX_NUM_MANAGED_TASKS</ref>){</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>_newtask<sp/>=<sp/>&amp;(<ref refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" kindref="member">_task_register</ref>[<ref refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" kindref="member">_next_task_id</ref>]);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref><sp/>=<sp/><ref refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" kindref="member">_next_task_id</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" kindref="member">_next_task_id</ref>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" kindref="member">task_name</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" kindref="member">task_function</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1aff45751f7189980589d55379d1d5a355" kindref="member">task_priority</ref><sp/>=<sp/>osPriorityNormal;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" kindref="member">stack_size</ref><sp/>=<sp/><ref refid="uvfr__state__engine_8h_1a32571accb85a2d8f479c6066d7a46238" kindref="member">_UV_DEFAULT_TASK_STACK_SIZE</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" kindref="member">UV_TASK_NOT_STARTED</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" kindref="member">active_states</ref><sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a6986d7216c7f889164931b37ab752c29" kindref="member">deletion_states</ref><sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1aafd4e2d916f50b54b99fd02d63831e43" kindref="member">suspension_states</ref><sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a5d32fc8f47b905499257336c561d189b" kindref="member">parent</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" kindref="member">task_flags</ref><sp/>|=<sp/><ref refid="group__state__engine__api_1ga253c75b331d0976b9a414657cef780cd" kindref="member">UV_TASK_VEHICLE_APPLICATION</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_newtask;</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/></highlight><highlight class="comment">//end<sp/>of<sp/>public<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="group__state__engine__backend_1ga8e41e95f69723171fab38aba3b00a091" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1ga8e41e95f69723171fab38aba3b00a091" kindref="member">addTaskToTaskRegister</ref>(<ref refid="uvfr__state__engine_8h_1aa6ffd72eb4909ddb38c37a1369e13f09" kindref="member">uv_task_id</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint8_t<sp/>assign_to_whom){</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/>retval<sp/>=<sp/><ref refid="group__state__engine__backend_1gaf342326f88e8accc1efa35e02cdd6c37" kindref="member">_uvValidateSpecificTask</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval<sp/>!=<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="group__state__engine__backend_1gaf342326f88e8accc1efa35e02cdd6c37" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1gaf342326f88e8accc1efa35e02cdd6c37" kindref="member">_uvValidateSpecificTask</ref>(<ref refid="uvfr__state__engine_8h_1aa6ffd72eb4909ddb38c37a1369e13f09" kindref="member">uv_task_id</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>current_task<sp/>=<sp/>&amp;(<ref refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" kindref="member">_task_register</ref>[id]);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((current_task-&gt;<ref refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" kindref="member">active_states</ref>&amp;current_task-&gt;<ref refid="structuv__task__info_1a6986d7216c7f889164931b37ab752c29" kindref="member">deletion_states</ref>)|</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(current_task-&gt;<ref refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" kindref="member">active_states</ref>&amp;current_task-&gt;<ref refid="structuv__task__info_1aafd4e2d916f50b54b99fd02d63831e43" kindref="member">suspension_states</ref>)|</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(current_task-&gt;<ref refid="structuv__task__info_1a6986d7216c7f889164931b37ab752c29" kindref="member">deletion_states</ref>&amp;current_task-&gt;<ref refid="structuv__task__info_1aafd4e2d916f50b54b99fd02d63831e43" kindref="member">suspension_states</ref>)){</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Undefined<sp/>behavior<sp/>time,<sp/>this<sp/>should<sp/>be<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((current_task-&gt;<ref refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" kindref="member">active_states</ref><sp/>|<sp/>current_task-&gt;<ref refid="structuv__task__info_1a6986d7216c7f889164931b37ab752c29" kindref="member">deletion_states</ref><sp/>|<sp/>current_task-&gt;<ref refid="structuv__task__info_1aafd4e2d916f50b54b99fd02d63831e43" kindref="member">suspension_states</ref>)<sp/>!=<sp/>0x01FF){</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_task-&gt;<ref refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" kindref="member">task_flags</ref><sp/>&amp;<sp/><ref refid="group__state__engine__api_1ga96c7c915194ecba48edd70def54a700b" kindref="member">UV_TASK_MANAGER_MASK</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ga253c75b331d0976b9a414657cef780cd" kindref="member">UV_TASK_VEHICLE_APPLICATION</ref>)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;<sp/></highlight><highlight class="comment">//This<sp/>avoids<sp/>undefined<sp/>states<sp/>where<sp/>the<sp/>task<sp/>state<sp/>is<sp/>not<sp/>specified<sp/>for<sp/>a<sp/>given<sp/>vehicle<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_task-&gt;<ref refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" kindref="member">task_function</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Invalid,<sp/>since<sp/>no<sp/>task<sp/>assigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(current_task-&gt;<ref refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" kindref="member">task_name</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Invalid,<sp/>task<sp/>needs<sp/>a<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>we<sp/>check<sp/>for<sp/>invalid<sp/>combinations<sp/>of<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="group__state__engine__backend_1ga8c1618caac0d7f29836107f1a44833e8" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1ga8c1618caac0d7f29836107f1a44833e8" kindref="member">uvValidateManagedTasks</ref>(){</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/>is_chill;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" kindref="member">_next_task_id</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_chill<sp/>=<sp/><ref refid="group__state__engine__backend_1gaf342326f88e8accc1efa35e02cdd6c37" kindref="member">_uvValidateSpecificTask</ref>(i);<sp/></highlight><highlight class="comment">//probably<sp/>a<sp/>slightly<sp/>more<sp/>elegant<sp/>way<sp/>to<sp/>do<sp/>this<sp/>than<sp/>have<sp/>it<sp/>immediately<sp/>hang<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(is_chill<sp/>!=<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_chill;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_chill;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="group__state__engine__backend_1ga15cdf09b5625c2ba29a6c6d5c96214dc" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1ga15cdf09b5625c2ba29a6c6d5c96214dc" kindref="member">uvStartTask</ref>(uint32_t*<sp/>tracker,<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88ad4da927019afea812b31d46d28b7354c" kindref="member">UV_TASK_RUNNING</ref>){</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;<sp/></highlight><highlight class="comment">//LITERALLY<sp/>HOW<sp/>HAS<sp/>THIS<sp/>HAPPENED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tracker<sp/>&amp;=<sp/>~<ref refid="group__utility__macros_1ga581e5838a8a85f12137dd310b210024d" kindref="member">_BV_32</ref>(t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" kindref="member">UV_ABORTED</ref>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" kindref="member">UV_TASK_SUSPENDED</ref>){</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>==<sp/>NULL){<sp/></highlight><highlight class="comment">//this<sp/>should<sp/>not<sp/>be<sp/>physically<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskResume(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88ad4da927019afea812b31d46d28b7354c" kindref="member">UV_TASK_RUNNING</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tracker<sp/>&amp;=<sp/>~<ref refid="group__utility__macros_1ga581e5838a8a85f12137dd310b210024d" kindref="member">_BV_32</ref>(t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>);<sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>bit<sp/>in<sp/>the<sp/>tracker<sp/>so<sp/>that<sp/>we<sp/>won&apos;t<sp/>have<sp/>issues<sp/>down<sp/>the<sp/>road</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" kindref="member">task_function</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseType_t<sp/>x_return<sp/>=<sp/>xTaskCreate(t-&gt;<ref refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" kindref="member">task_function</ref>,t-&gt;<ref refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" kindref="member">task_name</ref>,t-&gt;<ref refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" kindref="member">stack_size</ref>,t,t-&gt;<ref refid="structuv__task__info_1aff45751f7189980589d55379d1d5a355" kindref="member">task_priority</ref>,&amp;(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x_return<sp/>!=<sp/>pdPASS){<sp/></highlight><highlight class="comment">//thats<sp/>not<sp/>very<sp/>good,<sp/>or<sp/>very<sp/>cash<sp/>money<sp/>of<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>==<sp/>NULL){<sp/></highlight><highlight class="comment">//WTF,<sp/>how<sp/>has<sp/>this<sp/>occurred</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>may<sp/>need<sp/>to<sp/>explicitely<sp/>start<sp/>a<sp/>task.<sp/>Ha,<sp/>JK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88ad4da927019afea812b31d46d28b7354c" kindref="member">UV_TASK_RUNNING</ref>;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="group__state__engine__backend_1gab8a03e5812e395199b3b0003cd8266cb" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1gab8a03e5812e395199b3b0003cd8266cb" kindref="member">killEmAll</ref>(){</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>tracker<sp/>=<sp/>0x00000000;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QueueHandle_t<sp/>incoming_scd_msg<sp/>=<sp/>xQueueCreate(8,sizeof(uv_init_task_response));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;<ref refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" kindref="member">_next_task_id</ref>;i++){</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracker<sp/>|=<sp/><ref refid="group__utility__macros_1ga581e5838a8a85f12137dd310b210024d" kindref="member">_BV_32</ref>(i);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__state__engine__backend_1ga6291142ec714ce1450099943b1b8d00a" kindref="member">uvDeleteTask</ref>(&amp;tracker,&amp;<ref refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" kindref="member">_task_register</ref>[i]);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tracker){</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;<sp/></highlight><highlight class="comment">//When<sp/>the<sp/>function<sp/>of<sp/>last<sp/>resort<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="467" refid="group__state__engine__backend_1gae0caac28206291f3dc5c416f11892edd" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1gae0caac28206291f3dc5c416f11892edd" kindref="member">uvKillTaskViolently</ref>(<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t==NULL){</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;null<sp/>task<sp/>info<sp/>block&quot;</highlight><highlight class="normal">,0);<sp/></highlight><highlight class="comment">//sub-optimal<sp/>situation<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="group__state__engine__backend_1ga6291142ec714ce1450099943b1b8d00a" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1ga6291142ec714ce1450099943b1b8d00a" kindref="member">uvDeleteTask</ref>(uint32_t*<sp/>tracker,<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;Null<sp/>Task<sp/>Info<sp/>Struct&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" kindref="member">UV_TASK_DELETED</ref><sp/>||<sp/>t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" kindref="member">UV_TASK_NOT_STARTED</ref>){</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;(t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" kindref="member">UV_ABORTED</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TaskStatus_t<sp/>task_state<sp/>=<sp/>eTaskGetState(<sp/>TaskHandle_t<sp/>xTask<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vTaskGetInfo(t-&gt;task_handle,&amp;task_status,pdFalse,eInvalid);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" kindref="member">UV_TASK_SUSPENDED</ref>){</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelete(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" kindref="member">UV_TASK_DELETED</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;(t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>eTaskState<sp/>task_state<sp/>=<sp/>eTaskGetState(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((task_state<sp/>==<sp/>eSuspended)&amp;&amp;(task_state<sp/>!=<sp/>eBlocked)){</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelete(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" kindref="member">UV_TASK_DELETED</ref>;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;(t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(task_state<sp/>==<sp/>eDeleted){<sp/></highlight><highlight class="comment">//Should<sp/>this<sp/>be<sp/>ok?<sp/>I<sp/>dont<sp/>really<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" kindref="member">UV_TASK_DELETED</ref>;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;(t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1af532b5031cd6a168a3ec45ab9ead4f23" kindref="member">cmd_data</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca0e75e398c2bbcb663eaeb98684ca69d6" kindref="member">UV_KILL_CMD</ref>;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine__api_1ga0e5d6feafad4764ab2ffd4604ab633b5" kindref="member">uvTaskIsDelaying</ref>(t)){</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTaskAbortDelay(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="group__state__engine__backend_1ga40d4bc9be9f3b81c51aef7ed7c37172f" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1ga40d4bc9be9f3b81c51aef7ed7c37172f" kindref="member">uvAbortTaskDeletion</ref>(<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="group__state__engine__backend_1ga3ef71d11e9525846568eadac11c7e8e4" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1ga3ef71d11e9525846568eadac11c7e8e4" kindref="member">uvScheduleTaskDeletion</ref>(uint32_t*<sp/>tracker,<sp/><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" kindref="member">UV_TASK_DELETED</ref>){<sp/></highlight><highlight class="comment">//no<sp/>need<sp/>to<sp/>delete<sp/>an<sp/>already<sp/>deleted<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tracker<sp/>&amp;=<sp/>~(0x0001U&lt;&lt;(t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" kindref="member">UV_ABORTED</ref>;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" kindref="member">task_flags</ref><sp/>&amp;<sp/><ref refid="group__state__engine__api_1ga0ce66ea8b0c49749cc05a3ba06b2df75" kindref="member">UV_TASK_AWAITING_DELETION</ref>){</highlight><highlight class="comment">//previos<sp/>calls<sp/>of<sp/>this<sp/>function<sp/>get<sp/>precedence<sp/>over<sp/>subsequent<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tracker<sp/>&amp;=<sp/>~(0x0001U&lt;&lt;(t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>we<sp/>get<sp/>to<sp/>create<sp/>some<sp/>timers<sp/>to<sp/>actually<sp/>delete<sp/>tasks<sp/>because<sp/>that<sp/>is<sp/>simply<sp/>what<sp/>we<sp/>need<sp/>to<sp/>do.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="590" refid="group__state__engine__backend_1gafd67eecbab2e6e6915bc6bc71806b715" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1gafd67eecbab2e6e6915bc6bc71806b715" kindref="member">uvSuspendTask</ref>(uint32_t*<sp/>tracker,<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;Null<sp/>Task<sp/>Info<sp/>Struct&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>eTaskState<sp/>rtos_task_state<sp/>=<sp/>eInvalid;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rtos_task_state<sp/>=<sp/>eTaskGetState(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" kindref="member">UV_TASK_DELETED</ref>)||(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" kindref="member">UV_TASK_NOT_STARTED</ref>)){</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tracker<sp/>=<sp/>*tracker<sp/>&amp;<sp/>~(0x01&lt;&lt;(t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;<sp/></highlight><highlight class="comment">//WHY<sp/>IS<sp/>IT<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" kindref="member">UV_TASK_SUSPENDED</ref>){</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rtos_task_state<sp/>!=<sp/>eSuspended){<sp/></highlight><highlight class="comment">//SCD<sp/>thinks<sp/>this<sp/>is<sp/>suspended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;TState<sp/>Not<sp/>Match<sp/>RTOS<sp/>in<sp/>UVsuspend&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;(t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>));</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" kindref="member">UV_TASK_DELETED</ref>){</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rtos_task_state<sp/>!=<sp/>eDeleted){</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;State<sp/>Engine<sp/>Claim<sp/>deleted<sp/>but<sp/>RTOS<sp/>exist&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1af532b5031cd6a168a3ec45ab9ead4f23" kindref="member">cmd_data</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca5f389a67f2a45fe1f51492b3b8f04077" kindref="member">UV_SUSPEND_CMD</ref>;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine__api_1ga0e5d6feafad4764ab2ffd4604ab633b5" kindref="member">uvTaskIsDelaying</ref>(t)){</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTaskAbortDelay(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>);<sp/></highlight><highlight class="comment">//Speed<sp/>up<sp/>the<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="group__state__engine__backend_1gac1a1157d12026b20c6bbb5542c9f7efb" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1gac1a1157d12026b20c6bbb5542c9f7efb" kindref="member">uvTaskCrashHandler</ref>(<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>is<sp/>not<sp/>a<sp/>good<sp/>place<sp/>to<sp/>be<sp/>ngl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" kindref="member">task_flags</ref><sp/>&amp;<sp/><ref refid="group__state__engine__api_1gab37af27fe89f1987ee38bdb0bc945c43" kindref="member">UV_TASK_MISSION_CRITICAL</ref>){</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;fuck&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//state_change_daemon_args*<sp/>scd_args<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="669" refid="group__state__engine__backend_1ga8073be27b31b156bee66e3b3038144c9" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__state__engine__backend_1ga8073be27b31b156bee66e3b3038144c9" kindref="member">uvSecureVehicle</ref>(){</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Stop<sp/>MCU<sp/>Torque<sp/>requests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//open<sp/>SDC<sp/>&gt;:)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="697" refid="group__state__engine__backend_1gab2449f66698295ebfaff451c2f63607f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__state__engine__backend_1gab2449f66698295ebfaff451c2f63607f" kindref="member">__uvPanic</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg,<sp/>uint8_t<sp/>msg_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>func){</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine__backend_1ga8073be27b31b156bee66e3b3038144c9" kindref="member">uvSecureVehicle</ref>();<sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>safe<sp/>state<sp/>of<sp/>vehicle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ruh<sp/>roh,<sp/>something<sp/>has<sp/>gone<sp/>a<sp/>little<sp/>bit<sp/>fucky<sp/>wucky</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vTaskSuspendAll();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//while(1){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="715" refid="group__state__engine__backend_1ga5f35b34432afed7f18f91fb8607f096f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__state__engine__backend_1ga5f35b34432afed7f18f91fb8607f096f" kindref="member">killSelf</ref>(<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;Null<sp/>Task<sp/>Info<sp/>Struct&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QueueHandle_t<sp/>status_queue<sp/>=<sp/>t-&gt;manager;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__scd__response" kindref="compound">uv_scd_response</ref>*<sp/>response<sp/>=<sp/>uvMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structuv__scd__response" kindref="compound">uv_scd_response</ref>));</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(response<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;uvMalloc<sp/>Failed&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" kindref="member">UV_TASK_DELETED</ref>;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>response-&gt;<ref refid="structuv__scd__response_1a0812669214881a452cc54e8783a74c4f" kindref="member">meta_id</ref><sp/>=<sp/>t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>response-&gt;<ref refid="structuv__scd__response_1a92a8d03f9ffbbd860cb0bbe48f90bd7e" kindref="member">response_val</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a886d929188a37a7fdae4b18b65a261ca" kindref="member">UV_SUCCESSFUL_DELETION</ref>;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" kindref="member">state_change_queue</ref><sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xQueueSend(<ref refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" kindref="member">state_change_queue</ref>,<sp/>&amp;response,<sp/>0)<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvFree(response);<sp/></highlight><highlight class="comment">//no<sp/>memory<sp/>leaks<sp/>here<sp/>sir<sp/>:)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>scd<sp/>queue<sp/>msg&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//bro<sp/>why<sp/>tf<sp/>is<sp/>the<sp/>queue<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;Task<sp/>Has<sp/>invalid<sp/>queue<sp/>while<sp/>SCD<sp/>active&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1af532b5031cd6a168a3ec45ab9ead4f23" kindref="member">cmd_data</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca3641b5b35403903b66faf4d615c3199d" kindref="member">UV_NO_CMD</ref>;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="group__state__engine__backend_1gad6117850b55ad52be51d93915bcc313c" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__state__engine__backend_1gad6117850b55ad52be51d93915bcc313c" kindref="member">suspendSelf</ref>(<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;Null<sp/>Task<sp/>Info<sp/>Struct&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//QueueHandle_t<sp/>status_queue<sp/>=<sp/>t-&gt;manager;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__scd__response" kindref="compound">uv_scd_response</ref>*<sp/>response<sp/>=<sp/>uvMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structuv__scd__response" kindref="compound">uv_scd_response</ref>));</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(response<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;uvMalloc<sp/>Failed&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" kindref="member">UV_TASK_SUSPENDED</ref>;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>response-&gt;<ref refid="structuv__scd__response_1a0812669214881a452cc54e8783a74c4f" kindref="member">meta_id</ref><sp/>=<sp/>t-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref>;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>response-&gt;<ref refid="structuv__scd__response_1a92a8d03f9ffbbd860cb0bbe48f90bd7e" kindref="member">response_val</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a75d7f4415a6450a9c3d35aaf7b9577cd" kindref="member">UV_SUCCESSFUL_SUSPENSION</ref>;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" kindref="member">state_change_queue</ref><sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xQueueSend(<ref refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" kindref="member">state_change_queue</ref>,<sp/>&amp;response,<sp/>0)<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvFree(response);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;Task<sp/>couldn&apos;t<sp/>send<sp/>msg<sp/>to<sp/>scd<sp/>queue&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;Task<sp/>Has<sp/>invalid<sp/>queue<sp/>while<sp/>SCD<sp/>active&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1af532b5031cd6a168a3ec45ab9ead4f23" kindref="member">cmd_data</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca3641b5b35403903b66faf4d615c3199d" kindref="member">UV_NO_CMD</ref>;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskSuspend(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>);</highlight></codeline>
<codeline lineno="787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="799" refid="group__state__engine__backend_1ga2e8a31626909ac17be499f2941d359d0" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1ga2e8a31626909ac17be499f2941d359d0" kindref="member">proccessSCDMsg</ref>(<ref refid="structuv__scd__response" kindref="compound">uv_scd_response</ref>*<sp/>msg){</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(msg<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="uvfr__state__engine_8h_1aa6ffd72eb4909ddb38c37a1369e13f09" kindref="member">uv_task_id</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>msg-&gt;<ref refid="structuv__scd__response_1a0812669214881a452cc54e8783a74c4f" kindref="member">meta_id</ref>;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__state__engine__api_1gadfdfabf66fb37e4e702a1019bf1a9a76" kindref="member">uv_scd_response_e</ref><sp/>replystatus<sp/>=<sp/>msg-&gt;<ref refid="structuv__scd__response_1a92a8d03f9ffbbd860cb0bbe48f90bd7e" kindref="member">response_val</ref>;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t<sp/>=<sp/>&amp;(<ref refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" kindref="member">_task_register</ref>[id]);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>eTaskState<sp/>rtos_task_state<sp/>=eInvalid;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rtos_task_state<sp/>=<sp/>eTaskGetState(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(replystatus<sp/>==<sp/><ref refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a886d929188a37a7fdae4b18b65a261ca" kindref="member">UV_SUCCESSFUL_DELETION</ref>){</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>!=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" kindref="member">UV_TASK_DELETED</ref>){</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//rtos_task_state<sp/>=<sp/>eTaskGetState(t-&gt;task_handle);<sp/>//HOL<sp/>UP:<sp/>MAYBE<sp/>CHECK<sp/>TO<sp/>MAKE<sp/>SURE<sp/>THE<sp/>TASK<sp/>EXISTS<sp/>LOL,<sp/>otherwise<sp/>null<sp/>pointer<sp/>dereference<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rtos_task_state<sp/>!=<sp/>eDeleted){</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>Handle<sp/>this<sp/>error,<sp/>because<sp/>this<sp/>is<sp/>BAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(replystatus<sp/>==<sp/><ref refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a75d7f4415a6450a9c3d35aaf7b9577cd" kindref="member">UV_SUCCESSFUL_SUSPENSION</ref>){</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;<sp/></highlight><highlight class="comment">//that<sp/>sure<sp/>aint<sp/>good,<sp/>imma<sp/>go<sp/>complain<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//rtos_task_state<sp/>=<sp/>eTaskGetState(t-&gt;task_handle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((rtos_task_state<sp/>!=<sp/>eSuspended)&amp;&amp;(rtos_task_state<sp/>!=<sp/>eBlocked)){</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>task<sp/>is<sp/>not<sp/>actually<sp/>suspended!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(replystatus<sp/>==<sp/><ref refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76aa66da42f9355512e286812074433015b" kindref="member">UV_COULDNT_DELETE</ref>){</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(replystatus<sp/>==<sp/><ref refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a3c33585e5ac7f76a9bc4dc1fccb764ec" kindref="member">UV_COULDNT_SUSPEND</ref>){</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(replystatus<sp/>==<sp/><ref refid="group__state__engine__api_1ggadfdfabf66fb37e4e702a1019bf1a9a76a0dd4e6d2bbbde83536ed21ac4ce2bd00" kindref="member">UV_UNSAFE_STATE</ref>){</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unknown<sp/>reply,<sp/>wtf<sp/>man??</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>Give<sp/>SCD<sp/>Object<sp/>permanence,<sp/>make<sp/>a<sp/>function<sp/>that<sp/>is<sp/>called<sp/>by<sp/>the<sp/>task<sp/>manager.<sp/>Allocation<sp/>of<sp/>SCD<sp/>resources<sp/>costs<sp/>valuable<sp/>time<sp/>in<sp/>the<sp/>event<sp/>of<sp/>a<sp/>fault</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="868" refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__state__engine__backend_1ga8519c96858b096f2fccb96d3334df93a" kindref="member">_stateChangeDaemon</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>args)<sp/>PRIVILEGED_FUNCTION{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1gaa11ee7595fe2da14c5949195824179af" kindref="member">SCD_active</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>task_tracker<sp/>=<sp/>0x00000000;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>tmp_task;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//BaseType_t<sp/>rtos_status;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" kindref="member">state_change_queue</ref><sp/>=<sp/>xQueueCreate(8,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structuv__scd__response" kindref="compound">uv_scd_response</ref>*));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" kindref="member">state_change_queue</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;didntcreatequeue&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>uint32_t<sp/>notification_value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>BaseType_t<sp/>notification_received;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for(;;){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>notification_value<sp/>=<sp/>ulTaskNotifyTake(pdTRUE,500);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if(notification_value<sp/>==<sp/>0){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;<ref refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" kindref="member">_next_task_id</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_task<sp/>=<sp/>&amp;(<ref refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" kindref="member">_task_register</ref>[i]);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//task_tracker<sp/>|=<sp/>0x01&lt;&lt;i;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tmp_task-&gt;manager<sp/>=<sp/>incoming_scd_msg;<sp/>//No<sp/>longer<sp/>using<sp/>this<sp/>var,<sp/>instead<sp/>using<sp/>the<sp/>state_change_queue<sp/>static<sp/>global<sp/>var</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//redundant_tracker<sp/>|=<sp/>0x01&lt;&lt;i;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp_task-&gt;<ref refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" kindref="member">active_states</ref><sp/>&amp;<sp/><ref refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" kindref="member">vehicle_state</ref>){</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//should<sp/>be<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp_task-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>!=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88ad4da927019afea812b31d46d28b7354c" kindref="member">UV_TASK_RUNNING</ref>){</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//start<sp/>dah<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine__backend_1ga15cdf09b5625c2ba29a6c6d5c96214dc" kindref="member">uvStartTask</ref>(&amp;task_tracker,tmp_task)<sp/>==<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;i);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>start<sp/>task&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp_task-&gt;<ref refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" kindref="member">task_flags</ref><sp/>&amp;<sp/><ref refid="group__state__engine__api_1ga0ce66ea8b0c49749cc05a3ba06b2df75" kindref="member">UV_TASK_AWAITING_DELETION</ref>){</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FUCK,<sp/>GO<sp/>BACK!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;i);<sp/></highlight><highlight class="comment">//didnt<sp/>need<sp/>to<sp/>do<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp_task-&gt;<ref refid="structuv__task__info_1a6986d7216c7f889164931b37ab752c29" kindref="member">deletion_states</ref><sp/>&amp;<sp/><ref refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" kindref="member">vehicle_state</ref>){</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>task<sp/>should<sp/>not<sp/>exist<sp/>right<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((tmp_task-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>!=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" kindref="member">UV_TASK_NOT_STARTED</ref>)&amp;&amp;(tmp_task-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>!=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" kindref="member">UV_TASK_DELETED</ref>)){</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//gotta<sp/>delete<sp/>that<sp/>task<sp/>buddy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp_task-&gt;<ref refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" kindref="member">task_flags</ref><sp/>&amp;<sp/><ref refid="group__state__engine__api_1gaf1374f633bd37be99d7d58e33270ce8c" kindref="member">UV_TASK_DEFER_DELETION</ref>){</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__state__engine__backend_1ga3ef71d11e9525846568eadac11c7e8e4" kindref="member">uvScheduleTaskDeletion</ref>(&amp;task_tracker,<sp/>tmp_task);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__state__engine__backend_1ga6291142ec714ce1450099943b1b8d00a" kindref="member">uvDeleteTask</ref>(&amp;task_tracker,tmp_task);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//task_tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;i);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp_task-&gt;<ref refid="structuv__task__info_1aafd4e2d916f50b54b99fd02d63831e43" kindref="member">suspension_states</ref><sp/>&amp;<sp/><ref refid="group__state__engine_1ga2f58cf65b3566bc390600f877f8bed35" kindref="member">vehicle_state</ref>){</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp_task-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>!=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" kindref="member">UV_TASK_SUSPENDED</ref>){</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Suspend<sp/>that<sp/>thang</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__state__engine__backend_1gafd67eecbab2e6e6915bc6bc71806b715" kindref="member">uvSuspendTask</ref>(&amp;task_tracker,tmp_task);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//task_tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;i);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>of<sp/>first<sp/>iteration<sp/>loop<sp/>where<sp/>thas<sp/>reconciliation<sp/>occurs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structuv__scd__response" kindref="compound">uv_scd_response</ref>*<sp/>response<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="uvfr__state__engine_8h_1a2b86418bd482f9d4a2a36f35e786798e" kindref="member">_LONGEST_SC_TIME</ref>/<ref refid="uvfr__state__engine_8h_1a092c530d4a0cd880a59598dc0fca95d4" kindref="member">_SC_DAEMON_PERIOD</ref>;<sp/>i++){<sp/></highlight><highlight class="comment">//This<sp/>loop<sp/>verifies<sp/>to<sp/>make<sp/>sure<sp/>things<sp/>are<sp/>actually<sp/>chillin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(<ref refid="uvfr__state__engine_8h_1a092c530d4a0cd880a59598dc0fca95d4" kindref="member">_SC_DAEMON_PERIOD</ref>);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;j&lt;10;j++){<sp/></highlight><highlight class="comment">//What<sp/>kinda<sp/>magic<sp/>number<sp/>is<sp/>this?<sp/>Why<sp/>10?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xQueueReceive(<ref refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" kindref="member">state_change_queue</ref>,&amp;response,1)<sp/>==<sp/>pdPASS){</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(response<sp/>==<sp/>NULL){</highlight><highlight class="comment">//definately<sp/>not<sp/>supposed<sp/>to<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;null<sp/>scd<sp/>response&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine__backend_1ga2e8a31626909ac17be499f2941d359d0" kindref="member">proccessSCDMsg</ref>(response)==<ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_tracker<sp/>&amp;=<sp/>~(0x01&lt;&lt;response-&gt;<ref refid="structuv__scd__response_1a0812669214881a452cc54e8783a74c4f" kindref="member">meta_id</ref>);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" kindref="member">_task_register</ref>[response-&gt;<ref refid="structuv__scd__response_1a0812669214881a452cc54e8783a74c4f" kindref="member">meta_id</ref>].<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" kindref="member">UV_TASK_DELETED</ref>){</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" kindref="member">_task_register</ref>[response-&gt;<ref refid="structuv__scd__response_1a0812669214881a452cc54e8783a74c4f" kindref="member">meta_id</ref>].<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Not<sp/>ok,<sp/>this<sp/>means<sp/>that<sp/>process<sp/>SCD<sp/>has<sp/>returned<sp/>something<sp/>weird.<sp/>More<sp/>detailed<sp/>error_handling<sp/>can<sp/>be<sp/>added<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;Task<sp/>giving<sp/>Sass<sp/>to<sp/>SCD&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(uvFree(response)!=<ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>free<sp/>memory&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//You<sp/>timed<sp/>out<sp/>didnt<sp/>you...<sp/>Naughty<sp/>naughty...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(task_tracker<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;SCD<sp/>Timeout&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>Forcibly<sp/>reconcile<sp/>vehicle<sp/>state,<sp/>and<sp/>nuke<sp/>whatever<sp/>tasks<sp/>require<sp/>nuking,<sp/>suspend<sp/>whatever<sp/>needs<sp/>suspended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//END_OF_STATE_CHANGE_DAEMON:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskHandle_t<sp/>scd_handle<sp/>=<sp/>((<ref refid="structstate__change__daemon__args" kindref="compound">state_change_daemon_args</ref>*)args)-&gt;meta_task_handle;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>uvFree(args);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>vQueueDelete(<ref refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" kindref="member">state_change_queue</ref>);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1ga6837d935e61f84062544da8971a18560" kindref="member">state_change_queue</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine_1gaa11ee7595fe2da14c5949195824179af" kindref="member">SCD_active</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(scd_handle);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">//end<sp/>of<sp/>SCD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049" refid="group__state__engine__backend_1ga07f1b117d38d4723eb85c17913b06713" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1ga07f1b117d38d4723eb85c17913b06713" kindref="member">uvInvokeSCD</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>scd_params){</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065" refid="group__state__engine__backend_1gaf2dbdd0d9d9aa8bcbef120661117fc5e" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__state__engine__backend_1gaf2dbdd0d9d9aa8bcbef120661117fc5e" kindref="member">uvTaskManager</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>args)<sp/>PRIVILEGED_FUNCTION{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>params<sp/>=<sp/>(<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*)<sp/>args;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__management__info" kindref="compound">task_management_info</ref>*<sp/>tmi<sp/>=<sp/>params-&gt;<ref refid="structuv__task__info_1ab0a6666d8589de0cbc508cc8b12c0945" kindref="member">tmi</ref>;<sp/></highlight><highlight class="comment">//Task<sp/>Manager<sp/>interface;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>tmi-&gt;task_handle<sp/>=<sp/>params-&gt;task_handle;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>tmi-&gt;parent_msg_queue<sp/>=<sp/>xQueueCreate(8,sizeof(uv_task_msg));//our<sp/>good<sp/>ol<sp/>friend<sp/>the<sp/>message<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//Init<sp/>the<sp/>variables<sp/>we<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>uv_task_msg<sp/>incoming_msg;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>uv_msg_type<sp/>incoming_msg_type<sp/>=<sp/>UV_INVALID_MSG;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>BaseType_t<sp/>queue_status;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;){</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(1000);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>queue_status<sp/>=<sp/>xQueueReceive(tmi-&gt;parent_msg_queue,&amp;incoming_msg,pdMS_TO_TICKS(params-&gt;task_period));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if(queue_status<sp/>==<sp/>pdTRUE){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//You&apos;ve<sp/>got<sp/>mail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(incoming_msg.intended_recipient<sp/>!=<sp/>params){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//this<sp/>is<sp/>not<sp/>our<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incoming_msg_type<sp/>=<sp/>incoming_msg.message_type;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch(incoming_msg_type){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>UV_TASK_STATUS_REPORT:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//this<sp/>means<sp/>that<sp/>we<sp/>have<sp/>an<sp/>incoming<sp/>TSB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//read<sp/>the<sp/>TSB<sp/>and<sp/>ensure<sp/>that<sp/>everything<sp/>is<sp/>within<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//parameters,<sp/>and<sp/>that<sp/>there<sp/>isnt<sp/>any<sp/>catasrophic<sp/>problems.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>UV_COMMAND_ACKNOWLEDGEMENT:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>UV_ERROR_REPORT:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_state<sp/>=<sp/>vehicle_state;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vehicle_state<sp/>=<sp/>UV_ERROR_STATE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>UV_SC_COMMAND:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138" refid="group__state__engine__backend_1ga20334b4aff0cfdab7be1d2864089c5ce" refkind="member"><highlight class="normal"><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/><ref refid="group__state__engine__backend_1ga20334b4aff0cfdab7be1d2864089c5ce" kindref="member">uvCreateServiceTask</ref>(){</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" kindref="member">_next_task_id</ref><sp/>&gt;=<sp/><ref refid="group__state__engine_1ga8a80fe70c2d06583bbcd00c5162860c5" kindref="member">MAX_NUM_MANAGED_TASKS</ref>){</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>_newtask<sp/>=<sp/>&amp;(<ref refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" kindref="member">_task_register</ref>[<ref refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" kindref="member">_next_task_id</ref>]);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a8ed5c619d9eea62c2beb08fa2db6b092" kindref="member">task_id</ref><sp/>=<sp/><ref refid="group__state__engine_1gae48b13e362d2b9d10ec61f516ea5c09f" kindref="member">_next_svc_task_id</ref>;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="group__state__engine_1gaf070a24ce066297b4a8276ddcb884b0c" kindref="member">_next_task_id</ref>;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" kindref="member">task_name</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" kindref="member">task_function</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1aff45751f7189980589d55379d1d5a355" kindref="member">task_priority</ref><sp/>=<sp/>osPriorityRealtime;<sp/></highlight><highlight class="comment">//DEPRECATED<sp/>PRIORITY<sp/>SYSTEM,<sp/>GET<sp/>THAT<sp/>SHIT<sp/>OUTTA<sp/>HERE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" kindref="member">stack_size</ref><sp/>=<sp/><ref refid="uvfr__state__engine_8h_1a32571accb85a2d8f479c6066d7a46238" kindref="member">_UV_DEFAULT_TASK_STACK_SIZE</ref>;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" kindref="member">UV_TASK_NOT_STARTED</ref>;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" kindref="member">active_states</ref><sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a6986d7216c7f889164931b37ab752c29" kindref="member">deletion_states</ref><sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1aafd4e2d916f50b54b99fd02d63831e43" kindref="member">suspension_states</ref><sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a5d32fc8f47b905499257336c561d189b" kindref="member">parent</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>_newtask-&gt;<ref refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" kindref="member">task_flags</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ga056a2272c9356c78597c5c82bc58db2f" kindref="member">UV_TASK_GENERIC_SVC</ref>;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_newtask;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178" refid="group__state__engine__backend_1ga91b9f84bc63d5808a3f70623ed8a0700" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1ga91b9f84bc63d5808a3f70623ed8a0700" kindref="member">uvStartSVCTask</ref>(<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(t-&gt;<ref refid="structuv__task__info_1a6567a294eec7b11ac0d4bc3b927ef9e9" kindref="member">task_flags</ref><sp/>&amp;<sp/><ref refid="group__state__engine__api_1ga056a2272c9356c78597c5c82bc58db2f" kindref="member">UV_TASK_GENERIC_SVC</ref>)){<sp/></highlight><highlight class="comment">//not<sp/>a<sp/>svc<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88ad4da927019afea812b31d46d28b7354c" kindref="member">UV_TASK_RUNNING</ref>){</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" kindref="member">UV_ABORTED</ref>;<sp/></highlight><highlight class="comment">//only<sp/>one<sp/>instance<sp/>of<sp/>this<sp/>particular<sp/>task<sp/>is<sp/>permitted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" kindref="member">UV_TASK_SUSPENDED</ref>){</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskResume(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseType_t<sp/>retval;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>xTaskCreate(t-&gt;<ref refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" kindref="member">task_function</ref>,t-&gt;<ref refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" kindref="member">task_name</ref>,t-&gt;<ref refid="structuv__task__info_1a353ec6bf2c42ab0920f3d1e671e568a3" kindref="member">stack_size</ref>,t-&gt;<ref refid="structuv__task__info_1ae255dff9b38fc8c0754085060e8ae699" kindref="member">task_args</ref>,t-&gt;<ref refid="structuv__task__info_1aff45751f7189980589d55379d1d5a355" kindref="member">task_priority</ref>,&amp;(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>));</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>creates<sp/>a<sp/>task<sp/>cause<sp/>the<sp/>necessary<sp/>conditions<sp/>have<sp/>been<sp/>met</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Something<sp/>has<sp/>gone<sp/>wrong<sp/>with<sp/>the<sp/>task<sp/>creation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217" refid="group__state__engine__backend_1ga87455110c1a898b9294c66c14043f02a" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1ga87455110c1a898b9294c66c14043f02a" kindref="member">uvSuspendSVCTask</ref>(<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" kindref="member">UV_TASK_SUSPENDED</ref>){</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" kindref="member">UV_ABORTED</ref>;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232" refid="group__state__engine__backend_1ga02ceb2f70d4474d4734de6494aca8978" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1ga02ceb2f70d4474d4734de6494aca8978" kindref="member">uvDeleteSVCTask</ref>(<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a529c3f9ad3ef9a8e387d875c7a118c7e" kindref="member">UV_TASK_NOT_STARTED</ref>)<sp/>||<sp/>(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88af6465f57e0b6515721c5cbebd769e691" kindref="member">UV_TASK_DELETED</ref>)){</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea6aa86f67f1dcd70789b27731c3ac4e7a" kindref="member">UV_ABORTED</ref>;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref>)<sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88a147f6febce613c666fe922907472ca0f" kindref="member">UV_TASK_SUSPENDED</ref>){</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Somebody<sp/>has<sp/>suspended<sp/>the<sp/>task.<sp/>Get<sp/>it&apos;s<sp/>ass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelete(t-&gt;<ref refid="structuv__task__info_1a5347f41c4b15b2d6b039c339613fde43" kindref="member">task_handle</ref>);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t-&gt;<ref refid="structuv__task__info_1a43e5b3136b38dde4272aa510c5349ba3" kindref="member">task_state</ref><sp/>==<sp/><ref refid="group__state__engine__api_1ggac94b6bd11853173599ccff034055cc88ad4da927019afea812b31d46d28b7354c" kindref="member">UV_TASK_RUNNING</ref>){</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//kindly<sp/>tell<sp/>it<sp/>to<sp/>fucking<sp/>stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structuv__task__info_1af532b5031cd6a168a3ec45ab9ead4f23" kindref="member">cmd_data</ref><sp/>=<sp/><ref refid="group__state__engine__api_1ggaf11e8677926913f2dd803fabbed3455ca0e75e398c2bbcb663eaeb98684ca69d6" kindref="member">UV_KILL_CMD</ref>;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260" refid="group__state__engine__backend_1gad930776c44487128dbb60294a66a68e3" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="group__state__engine__backend_1gad930776c44487128dbb60294a66a68e3" kindref="member">uvRestartSVCTask</ref>(<ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>t){</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//force<sp/>task<sp/>to<sp/>relinquish<sp/>resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ask<sp/>nicely<sp/>for<sp/>task<sp/>to<sp/>be<sp/>deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine__backend_1ga02ceb2f70d4474d4734de6494aca8978" kindref="member">uvDeleteSVCTask</ref>(t)<sp/>==<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>){</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>that<sp/>fails,<sp/>forcibly<sp/>delete<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__state__engine__backend_1gae0caac28206291f3dc5c416f11892edd" kindref="member">uvKillTaskViolently</ref>(t);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//try<sp/>to<sp/>start<sp/>the<sp/>task<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine__backend_1ga91b9f84bc63d5808a3f70623ed8a0700" kindref="member">uvStartSVCTask</ref>(t)<sp/>==<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284" refid="group__state__engine_1gaff684308203d45e9e16ad3d115c54279" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__state__engine_1gaff684308203d45e9e16ad3d115c54279" kindref="member">uvSVCTaskManager</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>args){</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask__management__info" kindref="compound">task_management_info</ref>*<sp/>params<sp/>=(<ref refid="structtask__management__info" kindref="compound">task_management_info</ref>*)<sp/>args;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_svc_task_register<sp/>=<sp/>uvMalloc(sizeof(uv_task_info)*MAX_NUM_SVC_TASKS);<sp/>//allocate<sp/>mem<sp/>for<sp/>the<sp/>svc<sp/>task<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine_1ga6b49ab568bed9d9189782eebb90545b5" kindref="member">_task_register</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uvfr__utils_8h_1a92b5ac44171d49acd084c274385a043a" kindref="member">__uvInitPanic</ref>();<sp/></highlight><highlight class="comment">//Double<sp/>Plus<sp/>Ungood</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/>canTxtask<sp/>=<sp/><ref refid="group__state__engine__backend_1ga20334b4aff0cfdab7be1d2864089c5ce" kindref="member">uvCreateServiceTask</ref>();</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>canTxtask-&gt;<ref refid="structuv__task__info_1afcd240d2b6b01b4acea600ef4dfe8fbc" kindref="member">task_function</ref><sp/>=<sp/><ref refid="can_8h_1a2357e197a9ac26277eec808769fe409f" kindref="member">CANbusTxSvcDaemon</ref>;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>canTxtask-&gt;<ref refid="structuv__task__info_1ab24dea3bde4de2d839bf15e65c2df0d6" kindref="member">active_states</ref><sp/>=<sp/>0xFFFF;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>canTxtask-&gt;<ref refid="structuv__task__info_1ad24b438130bb3098ee5e855222dff21d" kindref="member">task_name</ref><sp/>=<sp/><ref refid="can_8h_1a8258cafd2b5e0bfb1e4228e7a45750bf" kindref="member">CAN_TX_DAEMON_NAME</ref>;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//super<sp/>basic<sp/>for<sp/>now,<sp/>just<sp/>need<sp/>something<sp/>working</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>var<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//retarded<sp/>dummy<sp/>var</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__state__engine__backend_1ga15cdf09b5625c2ba29a6c6d5c96214dc" kindref="member">uvStartTask</ref>(&amp;var,canTxtask);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vTaskSuspend(params-&gt;task_handle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//iterate<sp/>through<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;){</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Hold<sp/>for<sp/>a<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(100);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Do<sp/>different<sp/>things<sp/>depending<sp/>on<sp/>what<sp/>the<sp/>value<sp/>of<sp/>the<sp/>command<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//update<sp/>various<sp/>parameters<sp/>that<sp/>need<sp/>updated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//uvFree(_svc_task_register);<sp/>//Free<sp/>this<sp/>to<sp/>avoid<sp/>mem<sp/>leaks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(params-&gt;<ref refid="structtask__management__info_1a29b374b2d26cc5a52c75160816da83aa" kindref="member">task_handle</ref>);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340" refid="group__state__engine__backend_1ga273ef3bc881c3188a46e1707a8a6c0d4" refkind="member"><highlight class="normal"><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/><ref refid="group__state__engine__backend_1ga273ef3bc881c3188a46e1707a8a6c0d4" kindref="member">uvGetTaskFromName</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tsk_name){</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0xFF;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352" refid="group__state__engine__backend_1gab212c58efa87a2bc8ab5d256733a0b0a" refkind="member"><highlight class="normal"><ref refid="structuv__task__info" kindref="compound">uv_task_info</ref>*<sp/><ref refid="group__state__engine__backend_1gab212c58efa87a2bc8ab5d256733a0b0a" kindref="member">uvGetTaskFromRTOSHandle</ref>(TaskHandle_t<sp/>t_handle){</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t_handle<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/></highlight><highlight class="comment">//end<sp/>of<sp/>backend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Core/Src/uvfr_state_engine.c"/>
  </compounddef>
</doxygen>
