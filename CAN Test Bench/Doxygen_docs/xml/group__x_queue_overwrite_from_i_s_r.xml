<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__x_queue_overwrite_from_i_s_r" kind="group">
    <compoundname>xQueueOverwriteFromISR</compoundname>
    <title>xQueueOverwriteFromISR</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>queue. h <preformatted>
 BaseType_t xQueueOverwriteFromISR(
                              QueueHandle_t xQueue,
                              const void * pvItemToQueue,
                              BaseType_t *pxHigherPriorityTaskWoken
                         );
   </preformatted></para>
<para>A version of <ref refid="queue_8h_1a8e9ced123b5a0e37a36d3bbdb2e56b4e" kindref="member">xQueueOverwrite()</ref> that can be used in an interrupt service routine (ISR).</para>
<para>Only for use with queues that can hold a single item - so the queue is either empty or full.</para>
<para>Post an item on a queue. If the queue is already full then overwrite the value held in the queue. The item is queued by copy, not by reference.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xQueue</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the queue on which the item is to be posted.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvItemToQueue</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the item that is to be placed on the queue. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from pvItemToQueue into the queue storage area.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxHigherPriorityTaskWoken</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="queue_8h_1abdcd6a86ef82034d002193e79cfd3ce8" kindref="member">xQueueOverwriteFromISR()</ref> will set *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task to unblock, and the unblocked task has a priority higher than the currently running task. If <ref refid="queue_8h_1abdcd6a86ef82034d002193e79cfd3ce8" kindref="member">xQueueOverwriteFromISR()</ref> sets this value to pdTRUE then a context switch should be requested before the interrupt is exited.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="queue_8h_1abdcd6a86ef82034d002193e79cfd3ce8" kindref="member">xQueueOverwriteFromISR()</ref> is a macro that calls <ref refid="queue_8h_1a263711eb0124112e828a18fd4b8ab29d" kindref="member">xQueueGenericSendFromISR()</ref>, and therefore has the same return values as <ref refid="queue_8h_1af03b83396462affe9e28302660e7b9c6" kindref="member">xQueueSendToFrontFromISR()</ref>. However, pdPASS is the only value that can be returned because <ref refid="queue_8h_1abdcd6a86ef82034d002193e79cfd3ce8" kindref="member">xQueueOverwriteFromISR()</ref> will write to the queue even when the queue is already full.</para>
</simplesect>
Example usage: <preformatted></preformatted></para>
<para><preformatted> QueueHandle_t xQueue;</preformatted></para>
<para><preformatted> void vFunction( void *pvParameters )
 {
    // Create a queue to hold one uint32_t value.  It is strongly
    // recommended *not* to use <ref refid="queue_8h_1abdcd6a86ef82034d002193e79cfd3ce8" kindref="member">xQueueOverwriteFromISR()</ref> on queues that can
    // contain more than one value, and doing so will trigger an assertion
    // if <ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT()</ref> is defined.
    xQueue = xQueueCreate( 1, sizeof( uint32_t ) );
}</preformatted></para>
<para><preformatted>void vAnInterruptHandler( void )
{
// xHigherPriorityTaskWoken must be set to pdFALSE before it is used.
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
uint32_t ulVarToSend, ulValReceived;</preformatted></para>
<para><preformatted>    // Write the value 10 to the queue using <ref refid="queue_8h_1abdcd6a86ef82034d002193e79cfd3ce8" kindref="member">xQueueOverwriteFromISR()</ref>.
    ulVarToSend = 10;
    <ref refid="queue_8h_1abdcd6a86ef82034d002193e79cfd3ce8" kindref="member">xQueueOverwriteFromISR( xQueue, &amp;ulVarToSend, &amp;xHigherPriorityTaskWoken )</ref>;</preformatted></para>
<para><preformatted>    // The queue is full, but calling <ref refid="queue_8h_1abdcd6a86ef82034d002193e79cfd3ce8" kindref="member">xQueueOverwriteFromISR()</ref> again will still
    // pass because the value held in the queue will be overwritten with the
    // new value.
    ulVarToSend = 100;
    <ref refid="queue_8h_1abdcd6a86ef82034d002193e79cfd3ce8" kindref="member">xQueueOverwriteFromISR( xQueue, &amp;ulVarToSend, &amp;xHigherPriorityTaskWoken )</ref>;</preformatted></para>
<para><preformatted>    // Reading from the queue will now return 100.</preformatted></para>
<para><preformatted>    // ...</preformatted></para>
<para><preformatted>    if( xHigherPrioritytaskWoken == pdTRUE )
    {
        // Writing to the queue caused a task to unblock and the unblocked task
        // has a priority higher than or equal to the priority of the currently
        // executing task (the task this interrupt interrupted).  Perform a context
        // switch so this interrupt returns directly to the unblocked task.
        portYIELD_FROM_ISR(); // or portEND_SWITCHING_ISR() depending on the port.
    }
}
 </preformatted> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
