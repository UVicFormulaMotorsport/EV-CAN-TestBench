<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__ul_task_notify_take" kind="group">
    <compoundname>ulTaskNotifyTake</compoundname>
    <title>ulTaskNotifyTake</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>task. h <preformatted>uint32_t <ref refid="task_8h_1a66540bef602522a01a519f776e4c07d8" kindref="member">ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )</ref>;</preformatted></para>
<para>configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.</para>
<para>When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private &quot;notification value&quot;, which is a 32-bit unsigned integer (uint32_t).</para>
<para>Events can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.</para>
<para>A notification sent to a task can optionally perform an action, such as update, overwrite or increment the task&apos;s notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.</para>
<para><ref refid="task_8h_1a66540bef602522a01a519f776e4c07d8" kindref="member">ulTaskNotifyTake()</ref> is intended for use when a task notification is used as a faster and lighter weight binary or counting semaphore alternative. Actual FreeRTOS semaphores are taken using the <ref refid="semphr_8h_1af116e436d2a5ae5bd72dbade2b5ea930" kindref="member">xSemaphoreTake()</ref> API function, the equivalent action that instead uses a task notification is <ref refid="task_8h_1a66540bef602522a01a519f776e4c07d8" kindref="member">ulTaskNotifyTake()</ref>.</para>
<para>When a task is using its notification value as a binary or counting semaphore other tasks should send notifications to it using the <ref refid="task_8h_1ac60cbd05577a3e4f3c3587dd9b213930" kindref="member">xTaskNotifyGive()</ref> macro, or <ref refid="task_8h_1a0d2d54fb8a64011dfbb54983e4ed06bd" kindref="member">xTaskNotify()</ref> function with the eAction parameter set to eIncrement.</para>
<para><ref refid="task_8h_1a66540bef602522a01a519f776e4c07d8" kindref="member">ulTaskNotifyTake()</ref> can either clear the task&apos;s notification value to zero on exit, in which case the notification value acts like a binary semaphore, or decrement the task&apos;s notification value on exit, in which case the notification value acts like a counting semaphore.</para>
<para>A task can use <ref refid="task_8h_1a66540bef602522a01a519f776e4c07d8" kindref="member">ulTaskNotifyTake()</ref> to [optionally] block to wait for a the task&apos;s notification value to be non-zero. The task does not consume any CPU time while it is in the Blocked state.</para>
<para>Where as <ref refid="task_8h_1a0475fcda9718f403521c270a7270ff93" kindref="member">xTaskNotifyWait()</ref> will return when a notification is pending, <ref refid="task_8h_1a66540bef602522a01a519f776e4c07d8" kindref="member">ulTaskNotifyTake()</ref> will return when the task&apos;s notification value is not zero.</para>
<para>See <ulink url="http://www.FreeRTOS.org/RTOS-task-notifications.html">http://www.FreeRTOS.org/RTOS-task-notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xClearCountOnExit</parametername>
</parameternamelist>
<parameterdescription>
<para>if xClearCountOnExit is pdFALSE then the task&apos;s notification value is decremented when the function exits. In this way the notification value acts like a counting semaphore. If xClearCountOnExit is not pdFALSE then the task&apos;s notification value is cleared to zero when the function exits. In this way the notification value acts like a binary semaphore.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTicksToWait</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time that the task should wait in the Blocked state for the task&apos;s notification value to be greater than zero, should the count not already be greater than zero when <ref refid="task_8h_1a66540bef602522a01a519f776e4c07d8" kindref="member">ulTaskNotifyTake()</ref> was called. The task will not consume any processing time while it is in the Blocked state. This is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time specified in milliseconds to a time specified in ticks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The task&apos;s notification count before it is either cleared to zero or decremented (see the xClearCountOnExit parameter). </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
