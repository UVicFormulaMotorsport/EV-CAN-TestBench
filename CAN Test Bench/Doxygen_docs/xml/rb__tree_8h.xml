<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="rb__tree_8h" kind="file" language="C++">
    <compoundname>rb_tree.h</compoundname>
    <includedby refid="daq_8h" local="yes">Core/Inc/daq.h</includedby>
    <includedby refid="uvfr__utils_8h" local="yes">Core/Inc/uvfr_utils.h</includedby>
    <includedby refid="rb__tree_8c" local="yes">Core/Src/rb_tree.c</includedby>
    <invincdepgraph>
      <node id="19">
        <label>Core/Inc/tim.h</label>
        <link refid="tim_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Core/Inc/imd.h</label>
        <link refid="imd_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>Core/Src/daq.c</label>
        <link refid="daq_8c"/>
      </node>
      <node id="29">
        <label>Core/Inc/dash.h</label>
        <link refid="dash_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Core/Inc/driving_loop.h</label>
        <link refid="driving__loop_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>Core/Inc/temp_monitoring.h</label>
        <link refid="temp__monitoring_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Core/Src/pdu.c</label>
        <link refid="pdu_8c"/>
      </node>
      <node id="12">
        <label>Core/Src/dash.c</label>
        <link refid="dash_8c"/>
      </node>
      <node id="20">
        <label>Core/Src/tim.c</label>
        <link refid="tim_8c"/>
      </node>
      <node id="45">
        <label>Core/Src/uvfr_state_engine.c</label>
        <link refid="uvfr__state__engine_8c"/>
      </node>
      <node id="39">
        <label>Core/Inc/oled.h</label>
        <link refid="oled_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Core/Inc/adc.h</label>
        <link refid="adc_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>Core/Src/stm32f4xx_hal_msp.c</label>
        <link refid="stm32f4xx__hal__msp_8c"/>
      </node>
      <node id="4">
        <label>Core/Inc/uvfr_utils.h</label>
        <link refid="uvfr__utils_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Core/Src/odometer.c</label>
        <link refid="odometer_8c"/>
      </node>
      <node id="33">
        <label>Core/Src/freertos.c</label>
        <link refid="freertos_8c"/>
      </node>
      <node id="10">
        <label>Core/Src/bms.c</label>
        <link refid="bms_8c"/>
      </node>
      <node id="28">
        <label>Core/Inc/bms.h</label>
        <link refid="bms_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Core/Src/motor_controller.c</label>
        <link refid="motor__controller_8c"/>
      </node>
      <node id="37">
        <label>Core/Src/uvfr_settings.c</label>
        <link refid="uvfr__settings_8c"/>
      </node>
      <node id="13">
        <label>Core/Src/driving_loop.c</label>
        <link refid="driving__loop_8c"/>
      </node>
      <node id="24">
        <label>Core/Inc/spi.h</label>
        <link refid="spi_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Core/Inc/pdu.h</label>
        <link refid="pdu_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Core/Src/gpio.c</label>
        <link refid="gpio_8c"/>
      </node>
      <node id="26">
        <label>Core/Inc/motor_controller.h</label>
        <link refid="motor__controller_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Core/Inc/uvfr_settings.h</label>
        <link refid="uvfr__settings_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>Core/Src/rb_tree.c</label>
        <link refid="rb__tree_8c"/>
      </node>
      <node id="18">
        <label>Core/Src/dma.c</label>
        <link refid="dma_8c"/>
      </node>
      <node id="23">
        <label>Core/Src/temp_monitoring.c</label>
        <link refid="temp__monitoring_8c"/>
      </node>
      <node id="47">
        <label>Core/Src/uvfr_vehicle_commands.c</label>
        <link refid="uvfr__vehicle__commands_8c"/>
      </node>
      <node id="2">
        <label>Core/Inc/daq.h</label>
        <link refid="daq_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Core/Inc/gpio.h</label>
        <link refid="gpio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>Core/Src/uvfr_utils.c</label>
        <link refid="uvfr__utils_8c"/>
      </node>
      <node id="1">
        <label>Core/Inc/rb_tree.h</label>
        <link refid="rb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Core/Src/spi.c</label>
        <link refid="spi_8c"/>
      </node>
      <node id="32">
        <label>Core/Src/constants.c</label>
        <link refid="constants_8c"/>
      </node>
      <node id="14">
        <label>Core/Src/imd.c</label>
        <link refid="imd_8c"/>
      </node>
      <node id="9">
        <label>Core/Inc/can.h</label>
        <link refid="can_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>Core/Src/stm32f4xx_it.c</label>
        <link refid="stm32f4xx__it_8c"/>
      </node>
      <node id="38">
        <label>Core/Inc/uvfr_state_engine.h</label>
        <link refid="uvfr__state__engine_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>Core/Src/can.c</label>
        <link refid="can_8c"/>
      </node>
      <node id="41">
        <label>Core/Inc/uvfr_vehicle_commands.h</label>
        <link refid="uvfr__vehicle__commands_8h"/>
      </node>
      <node id="34">
        <label>Core/Src/oled.c</label>
        <link refid="oled_8c"/>
      </node>
      <node id="7">
        <label>Core/Src/adc.c</label>
        <link refid="adc_8c"/>
      </node>
      <node id="8">
        <label>Core/Src/main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="17">
        <label>Core/Inc/dma.h</label>
        <link refid="dma_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Core/Inc/main.h</label>
        <link refid="main_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structrbnode" prot="public">rbnode</innerclass>
    <innerclass refid="structrbtree" prot="public">rbtree</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="rb__tree_8h_1a510fe2b629135f54b432746381c46eea" prot="public" static="no">
        <name>RB_DUP</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="9" column="9" bodyfile="Core/Inc/rb_tree.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8h_1a881c5582644c293e2a896670ec97be8f" prot="public" static="no">
        <name>RB_MIN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="10" column="9" bodyfile="Core/Inc/rb_tree.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" prot="public" static="no">
        <name>RED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="12" column="9" bodyfile="Core/Inc/rb_tree.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" prot="public" static="no">
        <name>BLACK</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="13" column="9" bodyfile="Core/Inc/rb_tree.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8h_1a98eb926978664a4bb7da0a93ec4b2239" prot="public" static="no">
        <name>RB_ROOT</name>
        <param><defname>rbt</defname></param>
        <initializer>(&amp;(rbt)-&gt;root)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="57" column="9" bodyfile="Core/Inc/rb_tree.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" prot="public" static="no">
        <name>RB_NIL</name>
        <param><defname>rbt</defname></param>
        <initializer>(&amp;(rbt)-&gt;nil)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="58" column="9" bodyfile="Core/Inc/rb_tree.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" prot="public" static="no">
        <name>RB_FIRST</name>
        <param><defname>rbt</defname></param>
        <initializer>((rbt)-&gt;root.left)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="59" column="9" bodyfile="Core/Inc/rb_tree.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8h_1aafcd1e43a9525fee54223b3ebf4fbdd3" prot="public" static="no">
        <name>RB_MINIMAL</name>
        <param><defname>rbt</defname></param>
        <initializer>((rbt)-&gt;min)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="60" column="9" bodyfile="Core/Inc/rb_tree.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8h_1a5ada8ea1bfd571f2c89a9f61d87593dc" prot="public" static="no">
        <name>RB_ISEMPTY</name>
        <param><defname>rbt</defname></param>
        <initializer>((rbt)-&gt;root.left == &amp;(rbt)-&gt;nil &amp;&amp; (rbt)-&gt;root.right == &amp;(rbt)-&gt;nil)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="62" column="9" bodyfile="Core/Inc/rb_tree.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8h_1a7ccff5243e00a6457fd2946aa0d0c46a" prot="public" static="no">
        <name>RB_APPLY</name>
        <param><defname>rbt</defname></param>
        <param><defname>f</defname></param>
        <param><defname>c</defname></param>
        <param><defname>o</defname></param>
        <initializer>rbapply_node((rbt), (rbt)-&gt;root.left, (f), (c), (o))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="63" column="9" bodyfile="Core/Inc/rb_tree.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5" prot="public" static="no" strong="no">
        <type></type>
        <name>rbtraversal</name>
        <enumvalue id="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5acd9d91cf59c093fdfa2b1736a26125ce" prot="public">
          <name>PREORDER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5a541a7d029edbe0dc4855fa23ba23162b" prot="public">
          <name>INORDER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5a9ab94412bf77ddc567d8cb5cd2996d44" prot="public">
          <name>POSTORDER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Evil traversal method specifier for traversing the tree. </para>
        </briefdescription>
        <detaileddescription>
<para>Function that applies some function to a subtree.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an the <computeroutput>rbtree</computeroutput> you wish to apply the functions to</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the node that is the root of the tree you wish to apply functions to. This can be a subtree of another tree if needed</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function you would like to apply to the nodes. This takes in two parameters. The first is a pointer to the data of the node. The second parameter is a pointer to the shared cookie, which allows information to be preserved between different calls to <computeroutput>func</computeroutput>. This function returns an integer value, with 0 being ok, and the others being various error states.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cookie</parametername>
</parameternamelist>
<parameterdescription>
<para>This is a pointer to some space in memory that all of the calls to @func share, to preserve information.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>This is a member of that specifies the order in which the tree will be traversed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>DANGER!! RECURSION!! Beware of stack memory usage, since most tasks are memory limited. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="18" column="17" bodyfile="Core/Inc/rb_tree.h" bodystart="18" bodyend="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="rb__tree_8h_1ad9b704a4502a7a016ca03de9acf95897" prot="public" static="no">
        <type>struct <ref refid="structrbnode" kindref="compound">rbnode</ref></type>
        <definition>typedef struct rbnode  rbnode</definition>
        <argsstring></argsstring>
        <name>rbnode</name>
        <briefdescription>
<para>Node of a Red-Black binary search tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="34" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="rb__tree_8h_1acfdf75dcc32d990f4818270cac09cf86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
        <definition>rbtree* rbCreate</definition>
        <argsstring>(int(*compare_func)(const void *, const void *), void(*destroy_func)(void *))</argsstring>
        <name>rbCreate</name>
        <param>
          <type>int(*)(const void *, const void *)</type>
          <declname>compare_func</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>destroy_func</declname>
        </param>
        <briefdescription>
<para>Create and initialize a binary search tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compare_func</parametername>
</parameternamelist>
<parameterdescription>
<para>A function that compares the data of two nodes. Accepts pointers to the data as parameters</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destroy_func</parametername>
</parameternamelist>
<parameterdescription>
<para>The destructor function for the data, for safe disposal of dynamically allocated data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="71" column="8" bodyfile="Core/Src/rb_tree.c" bodystart="28" bodyend="56" declfile="Core/Inc/rb_tree.h" declline="71" declcolumn="8"/>
        <references refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" compoundref="rb__tree_8h" startline="13">BLACK</references>
        <references refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" compoundref="rb__tree_8h" startline="32">rbnode::color</references>
        <references refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" compoundref="rb__tree_8h" startline="40">rbtree::compare</references>
        <references refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" compoundref="rb__tree_8h" startline="53">rbtree::count</references>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="structrbtree_1aee517470215137b01402d349e2650355" compoundref="rb__tree_8h" startline="42">rbtree::destroy</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" compoundref="rb__tree_8h" startline="50">rbtree::min</references>
        <references refid="structrbtree_1a1175ffa360f63b405305a04acfa2c433" compoundref="rb__tree_8h" startline="45">rbtree::nil</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
        <references refid="structrbtree_1ad865f18384b6a5872aceefe23ade18d9" compoundref="rb__tree_8h" startline="44">rbtree::root</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a9a58d42acc5dd251bf885a0f58c6abfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rbDestroy</definition>
        <argsstring>(rbtree *rbt)</argsstring>
        <name>rbDestroy</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <briefdescription>
<para>Destroy the tree, and de-allocate it&apos;s elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="76" column="6" bodyfile="Core/Src/rb_tree.c" bodystart="61" bodyend="65" declfile="Core/Inc/rb_tree.h" declline="76" declcolumn="6"/>
        <references refid="rb__tree_8c_1a0c6878a92eb6e665e3bc9849053e1d5a" compoundref="rb__tree_8c" startline="649" endline="701">destroyAllNodes</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1ad7470a946dc18fdea53de8efa48ba4eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
        <definition>rbnode* rbFind</definition>
        <argsstring>(rbtree *rbt, void *data)</argsstring>
        <name>rbFind</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Find a node of the tree based off the data you provide the tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the tree in which we would like to find the node.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Returns</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the node if the node is present in the tree. Otherwise, it will return NULL to indicate the node could not be found. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="86" column="8" bodyfile="Core/Src/rb_tree.c" bodystart="71" bodyend="86" declfile="Core/Inc/rb_tree.h" declline="86" declcolumn="8"/>
        <references refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" compoundref="rb__tree_8h" startline="40">rbtree::compare</references>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a70293914fa5f96508b9b502d7f3bb5dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
        <definition>rbnode* rbSuccessor</definition>
        <argsstring>(rbtree *rbt, rbnode *node)</argsstring>
        <name>rbSuccessor</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="87" column="8" bodyfile="Core/Src/rb_tree.c" bodystart="92" bodyend="110" declfile="Core/Inc/rb_tree.h" declline="87" declcolumn="8"/>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="rb__tree_8h_1a98eb926978664a4bb7da0a93ec4b2239" compoundref="rb__tree_8h" startline="57">RB_ROOT</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
        <referencedby refid="rb__tree_8c_1a8b7898139f560f35aa433a637c2a5381" compoundref="rb__tree_8c" startline="360" endline="449">rbDelete</referencedby>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a659f2a6354fea183df8cfbfba2801484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rbApplyNode</definition>
        <argsstring>(rbtree *rbt, rbnode *node, int(*func)(void *, void *), void *cookie, enum rbtraversal order)</argsstring>
        <name>rbApplyNode</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>int(*)(void *, void *)</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cookie</declname>
        </param>
        <param>
          <type>enum <ref refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5" kindref="member">rbtraversal</ref></type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="105" column="5" bodyfile="Core/Src/rb_tree.c" bodystart="116" bodyend="148" declfile="Core/Inc/rb_tree.h" declline="105" declcolumn="5"/>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5a541a7d029edbe0dc4855fa23ba23162b" compoundref="rb__tree_8h" startline="20">INORDER</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5a9ab94412bf77ddc567d8cb5cd2996d44" compoundref="rb__tree_8h" startline="21">POSTORDER</references>
        <references refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5acd9d91cf59c093fdfa2b1736a26125ce" compoundref="rb__tree_8h" startline="19">PREORDER</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a447d21f412285d3455356d2975a6ced3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rbPrint</definition>
        <argsstring>(rbtree *rbt, void(*print_func)(void *))</argsstring>
        <name>rbPrint</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type>void(*)(void *)</type>
          <declname>print_func</declname>
        </param>
        <briefdescription>
<para>Function used to print the contents of the tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbt</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the <computeroutput>rbtree</computeroutput> you wish to print.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>print_func</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a print function specific to the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para>DANGER!! RECURSION!!</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Leftovers from laptop unit tests. Sorta useless, cause like what are we gonna print to? </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="117" column="6" bodyfile="Core/Src/rb_tree.c" bodystart="607" bodyend="612" declfile="Core/Inc/rb_tree.h" declline="117" declcolumn="6"/>
        <references refid="rb__tree_8c_1a99da652ba3b85adc7824b99a076187b6" compoundref="rb__tree_8c" startline="617" endline="628">print</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
        <references refid="rb__tree_8c_1aa02803c2713094e61fa50807fa7a5116" compoundref="rb__tree_8c" startline="571" endline="577">rbCheckBlackHeight</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1aeb5491e8c286b8dbc868df0c31dba799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
        <definition>rbnode* rbInsert</definition>
        <argsstring>(rbtree *rbt, void *data)</argsstring>
        <name>rbInsert</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Function that inserts data into the tree, and creates a new node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbt</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance of a <computeroutput>rbtree</computeroutput> that we would like to insert data into</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data we wish to insert</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>This</parametername>
</parameternamelist>
<parameterdescription>
<para>function returns a pointer to the <computeroutput>rbnode</computeroutput> that was added. The function will return NULL if the system is out of memory, or is otherwise unable to insert the node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="128" column="8" bodyfile="Core/Src/rb_tree.c" bodystart="207" bodyend="286" declfile="Core/Inc/rb_tree.h" declline="128" declcolumn="8"/>
        <references refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" compoundref="rb__tree_8h" startline="13">BLACK</references>
        <references refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" compoundref="rb__tree_8h" startline="32">rbnode::color</references>
        <references refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" compoundref="rb__tree_8h" startline="40">rbtree::compare</references>
        <references refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" compoundref="rb__tree_8h" startline="53">rbtree::count</references>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="structrbtree_1aee517470215137b01402d349e2650355" compoundref="rb__tree_8h" startline="42">rbtree::destroy</references>
        <references refid="rb__tree_8c_1ab13cb365d1f3498f2061dbc67b0b64f3" compoundref="rb__tree_8c" startline="293" endline="354">insertRepair</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" compoundref="rb__tree_8h" startline="50">rbtree::min</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
        <references refid="rb__tree_8h_1a881c5582644c293e2a896670ec97be8f" compoundref="rb__tree_8h" startline="10">RB_MIN</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="rb__tree_8h_1a98eb926978664a4bb7da0a93ec4b2239" compoundref="rb__tree_8h" startline="57">RB_ROOT</references>
        <references refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" compoundref="rb__tree_8h" startline="12">RED</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a8b7898139f560f35aa433a637c2a5381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* rbDelete</definition>
        <argsstring>(rbtree *rbt, rbnode *node, int keep)</argsstring>
        <name>rbDelete</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type><ref refid="structrbnode" kindref="compound">rbnode</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>keep</declname>
        </param>
        <briefdescription>
<para>Deletes a node from the tree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbt</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance of a <computeroutput>rbtree</computeroutput> that we are removing the node from.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the node that we would like to remove</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keep</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>keep</computeroutput> is a truthy value, a pointer to the data of the node will be returned. Otherwise, the node and it&apos;s data will be destroyed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>If</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>keep</computeroutput> is &quot;true&quot;, this will return a pointer to the data held by the deleted node. Otherwise it will return NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="143" column="6" bodyfile="Core/Src/rb_tree.c" bodystart="360" bodyend="449" declfile="Core/Inc/rb_tree.h" declline="143" declcolumn="6"/>
        <references refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" compoundref="rb__tree_8h" startline="13">BLACK</references>
        <references refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" compoundref="rb__tree_8h" startline="32">rbnode::color</references>
        <references refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" compoundref="rb__tree_8h" startline="53">rbtree::count</references>
        <references refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" compoundref="rb__tree_8h" startline="31">rbnode::data</references>
        <references refid="rb__tree_8c_1a04068304a12638e388a3c80475230dcd" compoundref="rb__tree_8c" startline="454" endline="540">deleteRepair</references>
        <references refid="structrbtree_1aee517470215137b01402d349e2650355" compoundref="rb__tree_8h" startline="42">rbtree::destroy</references>
        <references refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" compoundref="rb__tree_8h" startline="28">rbnode::left</references>
        <references refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" compoundref="rb__tree_8h" startline="50">rbtree::min</references>
        <references refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" compoundref="rb__tree_8h" startline="30">rbnode::parent</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="rb__tree_8c_1a70293914fa5f96508b9b502d7f3bb5dc" compoundref="rb__tree_8c" startline="92" endline="110">rbSuccessor</references>
        <references refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" compoundref="rb__tree_8h" startline="12">RED</references>
        <references refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" compoundref="rb__tree_8h" startline="29">rbnode::right</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a0eb9842e366817eb18eac0e319fb04db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rbCheckOrder</definition>
        <argsstring>(rbtree *rbt, void *min, void *max)</argsstring>
        <name>rbCheckOrder</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Function that validates that the order of the nodes in the tree is correct. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>DANGER!! THIS FUNCTION IS RECURSIVE. This is intended to be used in a laptop debugging context. The VCU simply does not have enough memory to deal with recursion of this manner.</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Leftovers from laptop unit tests.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="153" column="5" bodyfile="Core/Src/rb_tree.c" bodystart="545" bodyend="548" declfile="Core/Inc/rb_tree.h" declline="153" declcolumn="5"/>
        <references refid="rb__tree_8c_1abce051a2c66739dc7d5cd3f8bd81868a" compoundref="rb__tree_8c" startline="553" endline="566">checkOrder</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1aa02803c2713094e61fa50807fa7a5116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rbCheckBlackHeight</definition>
        <argsstring>(rbtree *rbt)</argsstring>
        <name>rbCheckBlackHeight</name>
        <param>
          <type><ref refid="structrbtree" kindref="compound">rbtree</ref> *</type>
          <declname>rbt</declname>
        </param>
        <briefdescription>
<para>Function that Checks the height of black nodes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>DANGER!! THIS FUNCTION IS RECURSIVE. This is intended to be used in a laptop debugging context. The VCU simply does not have enough memory to deal with recursion of this manner.</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Leftovers from laptop unit tests.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Inc/rb_tree.h" line="163" column="5" bodyfile="Core/Src/rb_tree.c" bodystart="571" bodyend="577" declfile="Core/Inc/rb_tree.h" declline="163" declcolumn="5"/>
        <references refid="rb__tree_8c_1a81ab202c619b8ca1ec96a15a81cb21ef" compoundref="rb__tree_8c" startline="582" endline="602">checkBlackHeight</references>
        <references refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" compoundref="rb__tree_8h" startline="59">RB_FIRST</references>
        <references refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" compoundref="rb__tree_8h" startline="58">RB_NIL</references>
        <references refid="rb__tree_8h_1a98eb926978664a4bb7da0a93ec4b2239" compoundref="rb__tree_8h" startline="57">RB_ROOT</references>
        <references refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" compoundref="rb__tree_8h" startline="12">RED</references>
        <referencedby refid="rb__tree_8c_1a447d21f412285d3455356d2975a6ced3" compoundref="rb__tree_8c" startline="607" endline="612">rbPrint</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>xieqing.<sp/>https://github.com/xieqing</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>May<sp/>be<sp/>freely<sp/>redistributed,<sp/>but<sp/>copyright<sp/>notice<sp/>must<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_RB_HEADER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_RB_HEADER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="rb__tree_8h_1a510fe2b629135f54b432746381c46eea" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RB_DUP<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="rb__tree_8h_1a881c5582644c293e2a896670ec97be8f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RB_MIN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="rb__tree_8h_1a8d23feea868a983c8c2b661e1e16972f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RED<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="rb__tree_8h_1a7b3b25cba33b07c303f3060fe41887f6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLACK<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5" kindref="member">rbtraversal</ref><sp/>{</highlight></codeline>
<codeline lineno="19" refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5acd9d91cf59c093fdfa2b1736a26125ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5acd9d91cf59c093fdfa2b1736a26125ce" kindref="member">PREORDER</ref>,</highlight></codeline>
<codeline lineno="20" refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5a541a7d029edbe0dc4855fa23ba23162b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5a541a7d029edbe0dc4855fa23ba23162b" kindref="member">INORDER</ref>,</highlight></codeline>
<codeline lineno="21" refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5a9ab94412bf77ddc567d8cb5cd2996d44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5a9ab94412bf77ddc567d8cb5cd2996d44" kindref="member">POSTORDER</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal">};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="structrbnode" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>{</highlight></codeline>
<codeline lineno="28" refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*<ref refid="structrbnode_1a079337ce0b6a84f59162a3ca60445011" kindref="member">left</ref>;<sp/></highlight></codeline>
<codeline lineno="29" refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*<ref refid="structrbnode_1a76b1a4f6c0dcadb4f06b25c183d59a6e" kindref="member">right</ref>;<sp/></highlight></codeline>
<codeline lineno="30" refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*<ref refid="structrbnode_1ab20426153daaf021fff401c4f1f5ccd1" kindref="member">parent</ref>;<sp/></highlight></codeline>
<codeline lineno="31" refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structrbnode_1af238e0920ca118f7dae3490c22b1c805" kindref="member">data</ref>;<sp/></highlight></codeline>
<codeline lineno="32" refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structrbnode_1a5fbba1bc9c383790847090d4c6ff6af4" kindref="member">color</ref>;<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal">}<sp/><ref refid="rb__tree_8h_1ad9b704a4502a7a016ca03de9acf95897" kindref="member">rbnode</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structrbtree" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40" refid="structrbtree_1ae3cb89936027ca5ecc26318e09357dc5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*compare)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);<sp/></highlight></codeline>
<codeline lineno="41" refid="structrbtree_1ac338e8815338ba0bc2fbb9a97ad7cc27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="rb__tree_8c_1a99da652ba3b85adc7824b99a076187b6" kindref="member">print</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);<sp/></highlight></codeline>
<codeline lineno="42" refid="structrbtree_1aee517470215137b01402d349e2650355" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*destroy)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);<sp/></highlight></codeline>
<codeline lineno="44" refid="structrbtree_1ad865f18384b6a5872aceefe23ade18d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/><ref refid="structrbtree_1ad865f18384b6a5872aceefe23ade18d9" kindref="member">root</ref>;<sp/></highlight></codeline>
<codeline lineno="45" refid="structrbtree_1a1175ffa360f63b405305a04acfa2c433" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/><ref refid="structrbtree_1a1175ffa360f63b405305a04acfa2c433" kindref="member">nil</ref>;<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>RB_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*<ref refid="structrbtree_1ae02fd70761cb8965d5f74dd3e922628a" kindref="member">min</ref>;<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structrbtree_1aeb463910a21f07530d9f4c723aa1327a" kindref="member">count</ref>;<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal">}<sp/><ref refid="structrbtree" kindref="compound">rbtree</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//Internal<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="rb__tree_8h_1a98eb926978664a4bb7da0a93ec4b2239" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RB_ROOT(rbt)<sp/>(&amp;(rbt)-&gt;root)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="rb__tree_8h_1ae2ed7bcede5a254e9a5bac33d78e21f3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RB_NIL(rbt)<sp/>(&amp;(rbt)-&gt;nil)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="rb__tree_8h_1acb74c3fd2a9d1f0f5953e4a6f3a2ff1d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RB_FIRST(rbt)<sp/>((rbt)-&gt;root.left)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="rb__tree_8h_1aafcd1e43a9525fee54223b3ebf4fbdd3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RB_MINIMAL(rbt)<sp/>((rbt)-&gt;min)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="rb__tree_8h_1a5ada8ea1bfd571f2c89a9f61d87593dc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RB_ISEMPTY(rbt)<sp/>((rbt)-&gt;root.left<sp/>==<sp/>&amp;(rbt)-&gt;nil<sp/>&amp;&amp;<sp/>(rbt)-&gt;root.right<sp/>==<sp/>&amp;(rbt)-&gt;nil)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="rb__tree_8h_1a7ccff5243e00a6457fd2946aa0d0c46a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RB_APPLY(rbt,<sp/>f,<sp/>c,<sp/>o)<sp/>rbapply_node((rbt),<sp/>(rbt)-&gt;root.left,<sp/>(f),<sp/>(c),<sp/>(o))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*<ref refid="rb__tree_8h_1acfdf75dcc32d990f4818270cac09cf86" kindref="member">rbCreate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*compare_func)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*destroy_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8h_1a9a58d42acc5dd251bf885a0f58c6abfb" kindref="member">rbDestroy</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*<ref refid="rb__tree_8h_1ad7470a946dc18fdea53de8efa48ba4eb" kindref="member">rbFind</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*<ref refid="rb__tree_8h_1a70293914fa5f96508b9b502d7f3bb5dc" kindref="member">rbSuccessor</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*node);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8h_1a659f2a6354fea183df8cfbfba2801484" kindref="member">rbApplyNode</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cookie,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8h_1ae7a3c3e2ca387d6507c8c8e61e3f87b5" kindref="member">rbtraversal</ref><sp/>order);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8h_1a447d21f412285d3455356d2975a6ced3" kindref="member">rbPrint</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*print_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*<ref refid="rb__tree_8h_1aeb5491e8c286b8dbc868df0c31dba799" kindref="member">rbInsert</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="rb__tree_8h_1a8b7898139f560f35aa433a637c2a5381" kindref="member">rbDelete</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/><ref refid="structrbnode" kindref="compound">rbnode</ref><sp/>*node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keep);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8h_1a0eb9842e366817eb18eac0e319fb04db" kindref="member">rbCheckOrder</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*min,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*max);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8h_1aa02803c2713094e61fa50807fa7a5116" kindref="member">rbCheckBlackHeight</ref>(<ref refid="structrbtree" kindref="compound">rbtree</ref><sp/>*rbt);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_RB_HEADER<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="Core/Inc/rb_tree.h"/>
  </compounddef>
</doxygen>
