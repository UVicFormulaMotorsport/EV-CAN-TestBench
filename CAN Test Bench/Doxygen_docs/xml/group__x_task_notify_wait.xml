<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__x_task_notify_wait" kind="group">
    <compoundname>xTaskNotifyWait</compoundname>
    <title>xTaskNotifyWait</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>task. h <preformatted>BaseType_t <ref refid="task_8h_1a0475fcda9718f403521c270a7270ff93" kindref="member">xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )</ref>;</preformatted></para>
<para>configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this function to be available.</para>
<para>When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private &quot;notification value&quot;, which is a 32-bit unsigned integer (uint32_t).</para>
<para>Events can be sent to a task using an intermediary object. Examples of such objects are queues, semaphores, mutexes and event groups. Task notifications are a method of sending an event directly to a task without the need for such an intermediary object.</para>
<para>A notification sent to a task can optionally perform an action, such as update, overwrite or increment the task&apos;s notification value. In that way task notifications can be used to send data to a task, or be used as light weight and fast binary or counting semaphores.</para>
<para>A notification sent to a task will remain pending until it is cleared by the task calling <ref refid="task_8h_1a0475fcda9718f403521c270a7270ff93" kindref="member">xTaskNotifyWait()</ref> or <ref refid="task_8h_1a66540bef602522a01a519f776e4c07d8" kindref="member">ulTaskNotifyTake()</ref>. If the task was already in the Blocked state to wait for a notification when the notification arrives then the task will automatically be removed from the Blocked state (unblocked) and the notification cleared.</para>
<para>A task can use <ref refid="task_8h_1a0475fcda9718f403521c270a7270ff93" kindref="member">xTaskNotifyWait()</ref> to [optionally] block to wait for a notification to be pending, or <ref refid="task_8h_1a66540bef602522a01a519f776e4c07d8" kindref="member">ulTaskNotifyTake()</ref> to [optionally] block to wait for its notification value to have a non-zero value. The task does not consume any CPU time while it is in the Blocked state.</para>
<para>See <ulink url="http://www.FreeRTOS.org/RTOS-task-notifications.html">http://www.FreeRTOS.org/RTOS-task-notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ulBitsToClearOnEntry</parametername>
</parameternamelist>
<parameterdescription>
<para>Bits that are set in ulBitsToClearOnEntry value will be cleared in the calling task&apos;s notification value before the task checks to see if any notifications are pending, and optionally blocks if no notifications are pending. Setting ulBitsToClearOnEntry to ULONG_MAX (if limits.h is included) or 0xffffffffUL (if limits.h is not included) will have the effect of resetting the task&apos;s notification value to 0. Setting ulBitsToClearOnEntry to 0 will leave the task&apos;s notification value unchanged.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ulBitsToClearOnExit</parametername>
</parameternamelist>
<parameterdescription>
<para>If a notification is pending or received before the calling task exits the <ref refid="task_8h_1a0475fcda9718f403521c270a7270ff93" kindref="member">xTaskNotifyWait()</ref> function then the task&apos;s notification value (see the <ref refid="task_8h_1a0d2d54fb8a64011dfbb54983e4ed06bd" kindref="member">xTaskNotify()</ref> API function) is passed out using the pulNotificationValue parameter. Then any bits that are set in ulBitsToClearOnExit will be cleared in the task&apos;s notification value (note *pulNotificationValue is set before any bits are cleared). Setting ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL (if limits.h is not included) will have the effect of resetting the task&apos;s notification value to 0 before the function exits. Setting ulBitsToClearOnExit to 0 will leave the task&apos;s notification value unchanged when the function exits (in which case the value passed out in pulNotificationValue will match the task&apos;s notification value).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pulNotificationValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to pass the task&apos;s notification value out of the function. Note the value passed out will not be effected by the clearing of any bits caused by ulBitsToClearOnExit being non-zero.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTicksToWait</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time that the task should wait in the Blocked state for a notification to be received, should a notification not already be pending when <ref refid="task_8h_1a0475fcda9718f403521c270a7270ff93" kindref="member">xTaskNotifyWait()</ref> was called. The task will not consume any processing time while it is in the Blocked state. This is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time specified in milliseconds to a time specified in ticks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If a notification was received (including notifications that were already pending when xTaskNotifyWait was called) then pdPASS is returned. Otherwise pdFAIL is returned.</para>
</simplesect>
task. h <preformatted>void <ref refid="task_8h_1a4a4bcf98ad282a596e13f3f30582a11b" kindref="member">vTaskNotifyGiveFromISR( TaskHandle_t xTaskHandle, BaseType_t *pxHigherPriorityTaskWoken )</ref>;</preformatted></para>
<para><preformatted>configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro
to be available.</preformatted></para>
<para><preformatted>When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private
&quot;notification value&quot;, which is a 32-bit unsigned integer (uint32_t).</preformatted></para>
<para><preformatted>A version of <ref refid="task_8h_1ac60cbd05577a3e4f3c3587dd9b213930" kindref="member">xTaskNotifyGive()</ref> that can be called from an interrupt service
routine (ISR).</preformatted></para>
<para><preformatted>Events can be sent to a task using an intermediary object.  Examples of such
objects are queues, semaphores, mutexes and event groups.  Task notifications
are a method of sending an event directly to a task without the need for such
an intermediary object.</preformatted></para>
<para><preformatted>A notification sent to a task can optionally perform an action, such as
update, overwrite or increment the task&apos;s notification value.  In that way
task notifications can be used to send data to a task, or be used as light
weight and fast binary or counting semaphores.</preformatted></para>
<para><preformatted><ref refid="task_8h_1a4a4bcf98ad282a596e13f3f30582a11b" kindref="member">vTaskNotifyGiveFromISR()</ref> is intended for use when task notifications are
used as light weight and faster binary or counting semaphore equivalents.
Actual FreeRTOS semaphores are given from an ISR using the
<ref refid="semphr_8h_1a68aa43df8b2a0dbe17d05fad74670ef0" kindref="member">xSemaphoreGiveFromISR()</ref> API function, the equivalent action that instead uses
a task notification is <ref refid="task_8h_1a4a4bcf98ad282a596e13f3f30582a11b" kindref="member">vTaskNotifyGiveFromISR()</ref>.</preformatted></para>
<para><preformatted>When task notifications are being used as a binary or counting semaphore
equivalent then the task being notified should wait for the notification
using the ulTaskNotificationTake() API function rather than the
<ref refid="task_8h_1a0475fcda9718f403521c270a7270ff93" kindref="member">xTaskNotifyWait()</ref> API function.</preformatted></para>
<para><preformatted>See <ulink url="http://www.FreeRTOS.org/RTOS-task-notifications.html">http://www.FreeRTOS.org/RTOS-task-notifications.html</ulink> for more details.</preformatted></para>
<para><preformatted><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTaskToNotify</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the task being notified.  The handle to a
task can be returned from the xTaskCreate() API function used to create the
task, and the handle of the currently running task can be obtained by calling
<ref refid="task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc" kindref="member">xTaskGetCurrentTaskHandle()</ref>.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxHigherPriorityTaskWoken</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="task_8h_1a4a4bcf98ad282a596e13f3f30582a11b" kindref="member">vTaskNotifyGiveFromISR()</ref> will set
*pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the
task to which the notification was sent to leave the Blocked state, and the
unblocked task has a priority higher than the currently running task.  If
<ref refid="task_8h_1a4a4bcf98ad282a596e13f3f30582a11b" kindref="member">vTaskNotifyGiveFromISR()</ref> sets this value to pdTRUE then a context switch
should be requested before the interrupt is exited.  How a context switch is
requested from an ISR is dependent on the port - see the documentation page
for the port in use.
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</preformatted></para>
    </detaileddescription>
  </compounddef>
</doxygen>
