<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group__x_queue_receive" kind="group">
    <compoundname>xQueueReceive</compoundname>
    <title>xQueueReceive</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>queue. h <preformatted>
BaseType_t xQueueReceive(
                             QueueHandle_t xQueue,
                             void *pvBuffer,
                             TickType_t xTicksToWait
                        );</preformatted></para>
<para>Receive an item from a queue. The item is received by copy so a buffer of adequate size must be provided. The number of bytes copied into the buffer was defined when the queue was created.</para>
<para>Successfully received items are removed from the queue.</para>
<para>This function must not be used in an interrupt service routine. See xQueueReceiveFromISR for an alternative that can.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xQueue</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the queue from which the item is to be received.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer into which the received item will be copied.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTicksToWait</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time the task should block waiting for an item to receive should the queue be empty at the time of the call. <ref refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" kindref="member">xQueueReceive()</ref> will return immediately if xTicksToWait is zero and the queue is empty. The time is defined in tick periods so the constant portTICK_PERIOD_MS should be used to convert to real time if this is required.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdTRUE if an item was successfully received from the queue, otherwise pdFALSE.</para>
</simplesect>
Example usage: <preformatted>
struct AMessage
{
   char ucMessageID;
   char ucData[ 20 ];
} xMessage;</preformatted></para>
<para><preformatted>QueueHandle_t xQueue;</preformatted></para>
<para><preformatted>// Task to create a queue and post a value.
void vATask( void *pvParameters )
{
struct AMessage *pxMessage;</preformatted></para>
<para><preformatted>   // Create a queue capable of containing 10 pointers to AMessage structures.
   // These should be passed by pointer as they contain a lot of data.
   xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );
   if( xQueue == 0 )
   {
    // Failed to create the queue.
   }</preformatted></para>
<para><preformatted>   // ...</preformatted></para>
<para><preformatted>   // Send a pointer to a struct AMessage object.  Don&apos;t block if the
   // queue is already full.
   pxMessage = &amp; xMessage;
   xQueueSend( xQueue, ( void * ) &amp;pxMessage, ( TickType_t ) 0 );</preformatted></para>
<para><preformatted>   // ... Rest of task code.
}</preformatted></para>
<para><preformatted>// Task to receive from the queue.
void vADifferentTask( void *pvParameters )
{
struct AMessage *pxRxedMessage;</preformatted></para>
<para><preformatted>   if( xQueue != 0 )
   {
    // Receive a message on the created queue.  Block for 10 ticks if a
    // message is not immediately available.
    if( xQueueReceive( xQueue, &amp;( pxRxedMessage ), ( TickType_t ) 10 ) )
    {
        // pcRxedMessage now points to the struct AMessage variable posted
        // by vATask.
    }
   }</preformatted></para>
<para><preformatted>   // ... Rest of task code.
}
</preformatted> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
