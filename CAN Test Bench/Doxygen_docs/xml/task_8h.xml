<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="task_8h" kind="file" language="C++">
    <compoundname>task.h</compoundname>
    <includes refid="list_8h" local="yes">list.h</includes>
    <includedby refid="uvfr__utils_8h" local="yes">Core/Inc/uvfr_utils.h</includedby>
    <includedby refid="driving__loop_8c" local="yes">Core/Src/driving_loop.c</includedby>
    <includedby refid="freertos_8c" local="yes">Core/Src/freertos.c</includedby>
    <includedby refid="timers_8h" local="yes">Middlewares/Third_Party/FreeRTOS/Source/include/timers.h</includedby>
    <includedby refid="queue_8h" local="yes">Middlewares/Third_Party/FreeRTOS/Source/include/queue.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>Middlewares/Third_Party/FreeRTOS/Source/include/task.h</label>
        <link refid="task_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>list.h</label>
        <link refid="list_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="46">
        <label>Middlewares/Third_Party/FreeRTOS/Source/include/timers.h</label>
        <link refid="timers_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Core/Inc/tim.h</label>
        <link refid="tim_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>Middlewares/Third_Party/FreeRTOS/Source/include/queue.h</label>
        <link refid="queue_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Core/Inc/imd.h</label>
        <link refid="imd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>Core/Src/daq.c</label>
        <link refid="daq_8c"/>
      </node>
      <node id="28">
        <label>Core/Inc/dash.h</label>
        <link refid="dash_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>Core/Inc/driving_loop.h</label>
        <link refid="driving__loop_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>Core/Inc/temp_monitoring.h</label>
        <link refid="temp__monitoring_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>Core/Src/pdu.c</label>
        <link refid="pdu_8c"/>
      </node>
      <node id="10">
        <label>Core/Src/dash.c</label>
        <link refid="dash_8c"/>
      </node>
      <node id="18">
        <label>Core/Src/tim.c</label>
        <link refid="tim_8c"/>
      </node>
      <node id="44">
        <label>Core/Src/uvfr_state_engine.c</label>
        <link refid="uvfr__state__engine_8c"/>
      </node>
      <node id="40">
        <label>Core/Inc/oled.h</label>
        <link refid="oled_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Core/Inc/adc.h</label>
        <link refid="adc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Core/Src/stm32f4xx_hal_msp.c</label>
        <link refid="stm32f4xx__hal__msp_8c"/>
      </node>
      <node id="1">
        <label>Middlewares/Third_Party/FreeRTOS/Source/include/task.h</label>
        <link refid="task_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Core/Inc/uvfr_utils.h</label>
        <link refid="uvfr__utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Core/Src/odometer.c</label>
        <link refid="odometer_8c"/>
      </node>
      <node id="32">
        <label>Core/Src/freertos.c</label>
        <link refid="freertos_8c"/>
      </node>
      <node id="8">
        <label>Core/Src/bms.c</label>
        <link refid="bms_8c"/>
      </node>
      <node id="27">
        <label>Core/Inc/bms.h</label>
        <link refid="bms_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Core/Src/motor_controller.c</label>
        <link refid="motor__controller_8c"/>
      </node>
      <node id="36">
        <label>Core/Src/uvfr_settings.c</label>
        <link refid="uvfr__settings_8c"/>
      </node>
      <node id="11">
        <label>Core/Src/driving_loop.c</label>
        <link refid="driving__loop_8c"/>
      </node>
      <node id="22">
        <label>Core/Inc/spi.h</label>
        <link refid="spi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Core/Inc/pdu.h</label>
        <link refid="pdu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>Core/Src/gpio.c</label>
        <link refid="gpio_8c"/>
      </node>
      <node id="24">
        <label>Core/Inc/motor_controller.h</label>
        <link refid="motor__controller_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h</label>
        <link refid="semphr_8h"/>
      </node>
      <node id="25">
        <label>Core/Inc/uvfr_settings.h</label>
        <link refid="uvfr__settings_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Core/Src/dma.c</label>
        <link refid="dma_8c"/>
      </node>
      <node id="21">
        <label>Core/Src/temp_monitoring.c</label>
        <link refid="temp__monitoring_8c"/>
      </node>
      <node id="37">
        <label>Core/Inc/daq.h</label>
        <link refid="daq_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>Core/Inc/gpio.h</label>
        <link refid="gpio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Core/Src/uvfr_utils.c</label>
        <link refid="uvfr__utils_8c"/>
      </node>
      <node id="23">
        <label>Core/Src/spi.c</label>
        <link refid="spi_8c"/>
      </node>
      <node id="31">
        <label>Core/Src/constants.c</label>
        <link refid="constants_8c"/>
      </node>
      <node id="12">
        <label>Core/Src/imd.c</label>
        <link refid="imd_8c"/>
      </node>
      <node id="7">
        <label>Core/Inc/can.h</label>
        <link refid="can_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h</label>
        <link refid="event__groups_8h"/>
      </node>
      <node id="35">
        <label>Core/Src/stm32f4xx_it.c</label>
        <link refid="stm32f4xx__it_8c"/>
      </node>
      <node id="39">
        <label>Core/Inc/uvfr_state_engine.h</label>
        <link refid="uvfr__state__engine_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Core/Src/can.c</label>
        <link refid="can_8c"/>
      </node>
      <node id="42">
        <label>Core/Inc/uvfr_vehicle_commands.h</label>
        <link refid="uvfr__vehicle__commands_8h"/>
      </node>
      <node id="33">
        <label>Core/Src/oled.c</label>
        <link refid="oled_8c"/>
      </node>
      <node id="5">
        <label>Core/Src/adc.c</label>
        <link refid="adc_8c"/>
      </node>
      <node id="6">
        <label>Core/Src/main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="15">
        <label>Core/Inc/dma.h</label>
        <link refid="dma_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Core/Inc/main.h</label>
        <link refid="main_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structx_t_i_m_e___o_u_t" prot="public">xTIME_OUT</innerclass>
    <innerclass refid="structx_m_e_m_o_r_y___r_e_g_i_o_n" prot="public">xMEMORY_REGION</innerclass>
    <innerclass refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s" prot="public">xTASK_PARAMETERS</innerclass>
    <innerclass refid="structx_t_a_s_k___s_t_a_t_u_s" prot="public">xTASK_STATUS</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="task_8h_1a3de6ae5641d96a68aa027673b6588016" prot="public" static="no">
        <name>tskKERNEL_VERSION_NUMBER</name>
        <initializer>&quot;V10.3.1&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="46" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1a790e0e16f79e71d4791435a31d5b0fc7" prot="public" static="no">
        <name>tskKERNEL_VERSION_MAJOR</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="47" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1ab0b5ab04d8419227d0a5ac94af6b3639" prot="public" static="no">
        <name>tskKERNEL_VERSION_MINOR</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="48" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1a4cb001d5c86f4a8a5272f27227eb3247" prot="public" static="no">
        <name>tskKERNEL_VERSION_BUILD</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="49" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1a96fbec2d0baf0d3e958af5fc709de9d6" prot="public" static="no">
        <name>tskMPU_REGION_READ_ONLY</name>
        <initializer>( 1UL &lt;&lt; 0UL )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="53" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1aa13782bf13a683798cda192165d8c5d6" prot="public" static="no">
        <name>tskMPU_REGION_READ_WRITE</name>
        <initializer>( 1UL &lt;&lt; 1UL )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="54" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1ab011150da041e1e65bc271152eabba3c" prot="public" static="no">
        <name>tskMPU_REGION_EXECUTE_NEVER</name>
        <initializer>( 1UL &lt;&lt; 2UL )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="55" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1ad300fc0b16549387b185dffa7a2dc323" prot="public" static="no">
        <name>tskMPU_REGION_NORMAL_MEMORY</name>
        <initializer>( 1UL &lt;&lt; 3UL )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="56" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1a4ce090b0f3d783e72e230647c0261f96" prot="public" static="no">
        <name>tskMPU_REGION_DEVICE_MEMORY</name>
        <initializer>( 1UL &lt;&lt; 4UL )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="57" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67" prot="public" static="no">
        <name>tskIDLE_PRIORITY</name>
        <initializer>( ( UBaseType_t ) 0U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the priority used by the idle task. This must not be modified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="163" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1a767e474430db1e60056e9678763f9202" prot="public" static="no">
        <name>taskYIELD</name>
        <param></param>
        <initializer>portYIELD()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="173" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1ab7bf0ae866292ba8296091a9d5209689" prot="public" static="no">
        <name>taskENTER_CRITICAL</name>
        <param></param>
        <initializer>portENTER_CRITICAL()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="187" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1acb27098fc27d117f720d96bfdcd2b4c8" prot="public" static="no">
        <name>taskENTER_CRITICAL_FROM_ISR</name>
        <param></param>
        <initializer><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="188" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" prot="public" static="no">
        <name>taskEXIT_CRITICAL</name>
        <param></param>
        <initializer>portEXIT_CRITICAL()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="202" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1afa2f5acc3c925b6542ecca1acf67a234" prot="public" static="no">
        <name>taskEXIT_CRITICAL_FROM_ISR</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>( x )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="203" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1aa455a648c2224964ee57758b8794198e" prot="public" static="no">
        <name>taskDISABLE_INTERRUPTS</name>
        <param></param>
        <initializer>portDISABLE_INTERRUPTS()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="212" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1a04361ba499e91eb35324e4cba6feea17" prot="public" static="no">
        <name>taskENABLE_INTERRUPTS</name>
        <param></param>
        <initializer>portENABLE_INTERRUPTS()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="222" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" prot="public" static="no">
        <name>taskSCHEDULER_SUSPENDED</name>
        <initializer>( ( BaseType_t ) 0 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="227" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1a0923fdaae1bfe42ac5cccd9e9ddca9ed" prot="public" static="no">
        <name>taskSCHEDULER_NOT_STARTED</name>
        <initializer>( ( BaseType_t ) 1 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="228" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1acbb675035741787d29da475b5a887545" prot="public" static="no">
        <name>taskSCHEDULER_RUNNING</name>
        <initializer>( ( BaseType_t ) 2 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="229" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1a0d2d54fb8a64011dfbb54983e4ed06bd" prot="public" static="no">
        <name>xTaskNotify</name>
        <param><defname>xTaskToNotify</defname></param>
        <param><defname>ulValue</defname></param>
        <param><defname>eAction</defname></param>
        <initializer><ref refid="task_8h_1aa7bd3a4f3847b83900fd6a9f1bacfe9e" kindref="member">xTaskGenericNotify</ref>( ( xTaskToNotify ), ( ulValue ), ( eAction ), NULL )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1854" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="1854" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1aaa80adec29a2eebbfe0a551684a0acca" prot="public" static="no">
        <name>xTaskNotifyAndQuery</name>
        <param><defname>xTaskToNotify</defname></param>
        <param><defname>ulValue</defname></param>
        <param><defname>eAction</defname></param>
        <param><defname>pulPreviousNotifyValue</defname></param>
        <initializer><ref refid="task_8h_1aa7bd3a4f3847b83900fd6a9f1bacfe9e" kindref="member">xTaskGenericNotify</ref>( ( xTaskToNotify ), ( ulValue ), ( eAction ), ( pulPreviousNotifyValue ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1855" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="1855" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1a1ed9129068b96a909356bd0369c5ecb0" prot="public" static="no">
        <name>xTaskNotifyFromISR</name>
        <param><defname>xTaskToNotify</defname></param>
        <param><defname>ulValue</defname></param>
        <param><defname>eAction</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer><ref refid="task_8h_1a959c55f7950abffbc4107ce61ca52e97" kindref="member">xTaskGenericNotifyFromISR</ref>( ( xTaskToNotify ), ( ulValue ), ( eAction ), NULL, ( pxHigherPriorityTaskWoken ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1945" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="1945" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1a5c491b42e243a91c7473887d1fb96dd5" prot="public" static="no">
        <name>xTaskNotifyAndQueryFromISR</name>
        <param><defname>xTaskToNotify</defname></param>
        <param><defname>ulValue</defname></param>
        <param><defname>eAction</defname></param>
        <param><defname>pulPreviousNotificationValue</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer><ref refid="task_8h_1a959c55f7950abffbc4107ce61ca52e97" kindref="member">xTaskGenericNotifyFromISR</ref>( ( xTaskToNotify ), ( ulValue ), ( eAction ), ( pulPreviousNotificationValue ), ( pxHigherPriorityTaskWoken ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1946" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="1946" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="task_8h_1ac60cbd05577a3e4f3c3587dd9b213930" prot="public" static="no">
        <name>xTaskNotifyGive</name>
        <param><defname>xTaskToNotify</defname></param>
        <initializer><ref refid="task_8h_1aa7bd3a4f3847b83900fd6a9f1bacfe9e" kindref="member">xTaskGenericNotify</ref>( ( xTaskToNotify ), ( 0 ), <ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233a04fb0e98d2400e4cd28f1593bc868822" kindref="member">eIncrement</ref>, NULL )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2067" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="2067" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="task_8h_1a1749369458e2282a22e862a619a3892c" prot="public" static="no" strong="no">
        <type></type>
        <name>eTaskState</name>
        <enumvalue id="task_8h_1a1749369458e2282a22e862a619a3892ca83318c0d58e6b2bafaefa1be597fb8b6" prot="public">
          <name>eRunning</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8h_1a1749369458e2282a22e862a619a3892ca8570b65f331057b2cf92c504f0a2bc83" prot="public">
          <name>eReady</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af" prot="public">
          <name>eBlocked</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8h_1a1749369458e2282a22e862a619a3892caf35a900d49fdfc2502eefc68fdb70f72" prot="public">
          <name>eSuspended</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8h_1a1749369458e2282a22e862a619a3892cacef5c6e771d3a07f656e07a13a20ba35" prot="public">
          <name>eDeleted</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8h_1a1749369458e2282a22e862a619a3892cab32c771bb60dc8b502f65b81eef3bd86" prot="public">
          <name>eInvalid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="80" column="1" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="79" bodyend="87"/>
      </memberdef>
      <memberdef kind="enum" id="task_8h_1ae8abc4f7da5b6880467daafbf19cd233" prot="public" static="no" strong="no">
        <type></type>
        <name>eNotifyAction</name>
        <enumvalue id="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" prot="public">
          <name>eNoAction</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab7b1af2eeee53ae78eeff37c1cb6f79b" prot="public">
          <name>eSetBits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8h_1ae8abc4f7da5b6880467daafbf19cd233a04fb0e98d2400e4cd28f1593bc868822" prot="public">
          <name>eIncrement</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab61fc296ef909186b5824c823b33e130" prot="public">
          <name>eSetValueWithOverwrite</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8h_1ae8abc4f7da5b6880467daafbf19cd233acc4dd3fe71b62c751187a2c4c515abac" prot="public">
          <name>eSetValueWithoutOverwrite</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="91" column="1" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="enum" id="task_8h_1afd168a210ae0f2fb0fca242860a8178e" prot="public" static="no" strong="no">
        <type></type>
        <name>eSleepModeStatus</name>
        <enumvalue id="task_8h_1afd168a210ae0f2fb0fca242860a8178eaba7b1a394c63faa14a85dbb191f1c6f9" prot="public">
          <name>eAbortSleep</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8h_1afd168a210ae0f2fb0fca242860a8178ea2c539add8104402c6336bc33a660d1d1" prot="public">
          <name>eStandardSleep</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="task_8h_1afd168a210ae0f2fb0fca242860a8178ea004c4d9f1a2619193750d0e2f18f6046" prot="public">
          <name>eNoTasksWaitingTimeout</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="152" column="1" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="151" bodyend="156"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" prot="public" static="no">
        <type>struct tskTaskControlBlock *</type>
        <definition>typedef struct tskTaskControlBlock* TaskHandle_t</definition>
        <argsstring></argsstring>
        <name>TaskHandle_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="70" column="35" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8h_1af984026250bf8fece2e0068874d4661d" prot="public" static="no">
        <type>BaseType_t(*</type>
        <definition>typedef BaseType_t(* TaskHookFunction_t) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>TaskHookFunction_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="76" column="9" bodyfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8h_1a5e1a80e591c8c42e2d21a29d70256ea2" prot="public" static="no">
        <type>struct <ref refid="structx_t_i_m_e___o_u_t" kindref="compound">xTIME_OUT</ref></type>
        <definition>typedef struct xTIME_OUT  TimeOut_t</definition>
        <argsstring></argsstring>
        <name>TimeOut_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="106" column="11"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8h_1af609504de4d78ff6f71477ae47c66e51" prot="public" static="no">
        <type>struct <ref refid="structx_m_e_m_o_r_y___r_e_g_i_o_n" kindref="compound">xMEMORY_REGION</ref></type>
        <definition>typedef struct xMEMORY_REGION  MemoryRegion_t</definition>
        <argsstring></argsstring>
        <name>MemoryRegion_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="116" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8h_1aab31598a83ebd71dfce65f58add35676" prot="public" static="no">
        <type>struct <ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s" kindref="compound">xTASK_PARAMETERS</ref></type>
        <definition>typedef struct xTASK_PARAMETERS  TaskParameters_t</definition>
        <argsstring></argsstring>
        <name>TaskParameters_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="133" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="task_8h_1a34f88ef69814fb27d554e666e9868a9c" prot="public" static="no">
        <type>struct <ref refid="structx_t_a_s_k___s_t_a_t_u_s" kindref="compound">xTASK_STATUS</ref></type>
        <definition>typedef struct xTASK_STATUS  TaskStatus_t</definition>
        <argsstring></argsstring>
        <name>TaskStatus_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="148" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="task_8h_1ad889595baff9faf9efe02f3696825409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskAllocateMPURegions</definition>
        <argsstring>(TaskHandle_t xTask, const MemoryRegion_t *const pxRegions) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskAllocateMPURegions</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <param>
          <type>const <ref refid="task_8h_1af609504de4d78ff6f71477ae47c66e51" kindref="member">MemoryRegion_t</ref> *const</type>
          <declname>pxRegions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="665" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="665" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a27ff4ebce26565bef136bda84201ff80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskDelete</definition>
        <argsstring>(TaskHandle_t xTaskToDelete) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskDelete</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTaskToDelete</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="706" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="706" declcolumn="6"/>
        <referencedby refid="uvfr__state__engine_8c_1a5f35b34432afed7f18f91fb8607f096f" compoundref="uvfr__state__engine_8c" startline="576" endline="609">killSelf</referencedby>
        <referencedby refid="uvfr__state__engine_8c_1a02ceb2f70d4474d4734de6494aca8978" compoundref="uvfr__state__engine_8c" startline="1086" endline="1106">uvDeleteSVCTask</referencedby>
        <referencedby refid="uvfr__state__engine_8c_1a6291142ec714ce1450099943b1b8d00a" compoundref="uvfr__state__engine_8c" startline="341" endline="395">uvDeleteTask</referencedby>
        <referencedby refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" compoundref="uvfr__utils_8c" startline="37" endline="267">uvInit</referencedby>
        <referencedby refid="uvfr__state__engine_8c_1aff684308203d45e9e16ad3d115c54279" compoundref="uvfr__state__engine_8c" startline="1140" endline="1191">uvSVCTaskManager</referencedby>
      </memberdef>
      <memberdef kind="function" id="task_8h_1aa154068cecd7f31446a7a84af44ab1a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskDelay</definition>
        <argsstring>(const TickType_t xTicksToDelay) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskDelay</name>
        <param>
          <type>const TickType_t</type>
          <declname>xTicksToDelay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="758" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="758" declcolumn="6"/>
        <referencedby refid="uvfr__state__engine_8c_1a8519c96858b096f2fccb96d3334df93a" compoundref="uvfr__state__engine_8c" startline="729" endline="886">_stateChangeDaemon</referencedby>
        <referencedby refid="daq_8c_1a433bb586ceab47aed8d633fa2ff8ce56" compoundref="daq_8c" startline="44" endline="83">daqMasterTask</referencedby>
        <referencedby refid="imd_8c_1a19b4fd879f065cfe6e1b7bb3400cd0c3" compoundref="imd_8c" startline="554" endline="566">initIMD</referencedby>
        <referencedby refid="pdu_8c_1afaa6671d51bcd0687c87ac635ff70d95" compoundref="pdu_8c" startline="183" endline="195">initPDU</referencedby>
        <referencedby refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" compoundref="uvfr__utils_8c" startline="37" endline="267">uvInit</referencedby>
        <referencedby refid="uvfr__state__engine_8c_1aff684308203d45e9e16ad3d115c54279" compoundref="uvfr__state__engine_8c" startline="1140" endline="1191">uvSVCTaskManager</referencedby>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a067da3e949e248096ec6c01f9cb75a47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskDelayUntil</definition>
        <argsstring>(TickType_t *const pxPreviousWakeTime, const TickType_t xTimeIncrement) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskDelayUntil</name>
        <param>
          <type>TickType_t *const</type>
          <declname>pxPreviousWakeTime</declname>
        </param>
        <param>
          <type>const TickType_t</type>
          <declname>xTimeIncrement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="817" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="817" declcolumn="6"/>
        <referencedby refid="odometer_8c_1a56d2ca9f89394f6519acb2ba11320d55" compoundref="odometer_8c" startline="46" endline="69">odometerTask</referencedby>
        <referencedby refid="driving__loop_8c_1a80cc48f06202edc29bcad26a956bcc98" compoundref="driving__loop_8c" startline="69" endline="208">StartDrivingLoop</referencedby>
        <referencedby refid="temp__monitoring_8c_1a2a1d7fee4cea6ce07e4d4acc1b2ca752" compoundref="temp__monitoring_8c" startline="48" endline="108">tempMonitorTask</referencedby>
        <referencedby refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" compoundref="uvfr__utils_8c" startline="37" endline="267">uvInit</referencedby>
      </memberdef>
      <memberdef kind="function" id="task_8h_1afefe333df0492c8411c0094badd25185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskAbortDelay</definition>
        <argsstring>(TaskHandle_t xTask) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskAbortDelay</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="847" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="847" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a18d1148c845f5c4bff3b9e5b2077e058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UBaseType_t</type>
        <definition>UBaseType_t uxTaskPriorityGet</definition>
        <argsstring>(const TaskHandle_t xTask) PRIVILEGED_FUNCTION</argsstring>
        <name>uxTaskPriorityGet</name>
        <param>
          <type>const <ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="894" column="13" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="894" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a772bdcb1ae3cb58b0f12a172357f4a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UBaseType_t</type>
        <definition>UBaseType_t uxTaskPriorityGetFromISR</definition>
        <argsstring>(const TaskHandle_t xTask) PRIVILEGED_FUNCTION</argsstring>
        <name>uxTaskPriorityGetFromISR</name>
        <param>
          <type>const <ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>task. h <preformatted>UBaseType_t <ref refid="task_8h_1a772bdcb1ae3cb58b0f12a172357f4a06" kindref="member">uxTaskPriorityGetFromISR( const TaskHandle_t xTask )</ref>;</preformatted></para>
<para>A version of <ref refid="task_8h_1a18d1148c845f5c4bff3b9e5b2077e058" kindref="member">uxTaskPriorityGet()</ref> that can be used from an ISR. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="902" column="13" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="902" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a954df77397d616484edb7c58c7760b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="task_8h_1a1749369458e2282a22e862a619a3892c" kindref="member">eTaskState</ref></type>
        <definition>eTaskState eTaskGetState</definition>
        <argsstring>(TaskHandle_t xTask) PRIVILEGED_FUNCTION</argsstring>
        <name>eTaskGetState</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>task. h <preformatted>eTaskState <ref refid="task_8h_1a954df77397d616484edb7c58c7760b10" kindref="member">eTaskGetState( TaskHandle_t xTask )</ref>;</preformatted></para>
<para>INCLUDE_eTaskGetState must be defined as 1 for this function to be available. See the configuration section for more information.</para>
<para>Obtain the state of any task. States are encoded by the eTaskState enumerated type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTask</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the task to be queried.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The state of xTask at the time the function was called. Note the state of the task might change between the function being called, and the functions return value being tested by the calling task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="920" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="920" declcolumn="12"/>
        <referencedby refid="uvfr__state__engine_8c_1a2e8a31626909ac17be499f2941d359d0" compoundref="uvfr__state__engine_8c" startline="660" endline="715">proccessSCDMsg</referencedby>
        <referencedby refid="uvfr__state__engine_8c_1a6291142ec714ce1450099943b1b8d00a" compoundref="uvfr__state__engine_8c" startline="341" endline="395">uvDeleteTask</referencedby>
        <referencedby refid="uvfr__state__engine_8c_1afd67eecbab2e6e6915bc6bc71806b715" compoundref="uvfr__state__engine_8c" startline="410" endline="450">uvSuspendTask</referencedby>
      </memberdef>
      <memberdef kind="function" id="task_8h_1ac08c26d037d0dc685740eec9b2028715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskGetInfo</definition>
        <argsstring>(TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskGetInfo</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <param>
          <type><ref refid="task_8h_1a34f88ef69814fb27d554e666e9868a9c" kindref="member">TaskStatus_t</ref> *</type>
          <declname>pxTaskStatus</declname>
        </param>
        <param>
          <type>BaseType_t</type>
          <declname>xGetFreeStackSpace</declname>
        </param>
        <param>
          <type><ref refid="task_8h_1a1749369458e2282a22e862a619a3892c" kindref="member">eTaskState</ref></type>
          <declname>eState</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="976" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="976" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a1ee31be76e326e0644dbd6ac40a787b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskPrioritySet</definition>
        <argsstring>(TaskHandle_t xTask, UBaseType_t uxNewPriority) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskPrioritySet</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <param>
          <type>UBaseType_t</type>
          <declname>uxNewPriority</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1018" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1018" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a84d4e660b04630be2939d91b3c2412f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskSuspend</definition>
        <argsstring>(TaskHandle_t xTaskToSuspend) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskSuspend</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTaskToSuspend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1069" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1069" declcolumn="6"/>
        <referencedby refid="bms_8c_1aa9af83736568f74c94d41f3f16adf513" compoundref="bms_8c" startline="11" endline="27">BMS_Init</referencedby>
        <referencedby refid="imd_8c_1a19b4fd879f065cfe6e1b7bb3400cd0c3" compoundref="imd_8c" startline="554" endline="566">initIMD</referencedby>
        <referencedby refid="pdu_8c_1afaa6671d51bcd0687c87ac635ff70d95" compoundref="pdu_8c" startline="183" endline="195">initPDU</referencedby>
        <referencedby refid="motor__controller_8c_1aed1407e1e0fd59dc7c5e5d6db671f0ab" compoundref="motor__controller_8c" startline="260" endline="292">MC_Startup</referencedby>
        <referencedby refid="uvfr__state__engine_8c_1ad6117850b55ad52be51d93915bcc313c" compoundref="uvfr__state__engine_8c" startline="617" endline="648">suspendSelf</referencedby>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a84a1584f29fb7736a1aa72ad5b3e9b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskResume</definition>
        <argsstring>(TaskHandle_t xTaskToResume) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskResume</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTaskToResume</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1118" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1118" declcolumn="6"/>
        <referencedby refid="uvfr__state__engine_8c_1a91b9f84bc63d5808a3f70623ed8a0700" compoundref="uvfr__state__engine_8c" startline="1037" endline="1066">uvStartSVCTask</referencedby>
        <referencedby refid="uvfr__state__engine_8c_1a15cdf09b5625c2ba29a6c6d5c96214dc" compoundref="uvfr__state__engine_8c" startline="135" endline="201">uvStartTask</referencedby>
      </memberdef>
      <memberdef kind="function" id="task_8h_1aefbfd37c0661c3062fafd7334bff9aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskResumeFromISR</definition>
        <argsstring>(TaskHandle_t xTaskToResume) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskResumeFromISR</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTaskToResume</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1147" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1147" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1aaf9dca1065c60abdeb309d56ab7293cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskStartScheduler</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskStartScheduler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1180" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1180" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a1651e13c7ccd6273f53a62425ec79a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskEndScheduler</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskEndScheduler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1236" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1236" declcolumn="6"/>
        <referencedby refid="uvfr__utils_8c_1a92b5ac44171d49acd084c274385a043a" compoundref="uvfr__utils_8c" startline="300" endline="314">__uvInitPanic</referencedby>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskSuspendAll</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskSuspendAll</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1287" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1287" declcolumn="6"/>
        <referencedby refid="uvfr__utils_8c_1ad372aabf81974eb44819f326172a563b" compoundref="uvfr__utils_8c" startline="357" endline="374">__uvFreeCritSection</referencedby>
        <referencedby refid="uvfr__utils_8c_1abc00b3cb1c3b54fe4490c08ef85a293a" compoundref="uvfr__utils_8c" startline="321" endline="350">__uvMallocCritSection</referencedby>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskResumeAll</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskResumeAll</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1341" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1341" declcolumn="12"/>
        <referencedby refid="uvfr__utils_8c_1ad372aabf81974eb44819f326172a563b" compoundref="uvfr__utils_8c" startline="357" endline="374">__uvFreeCritSection</referencedby>
        <referencedby refid="uvfr__utils_8c_1abc00b3cb1c3b54fe4490c08ef85a293a" compoundref="uvfr__utils_8c" startline="321" endline="350">__uvMallocCritSection</referencedby>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a753ecfe23e7386066ecccad5d16422f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TickType_t</type>
        <definition>TickType_t xTaskGetTickCount</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskGetTickCount</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1356" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1356" declcolumn="12"/>
        <referencedby refid="odometer_8c_1a56d2ca9f89394f6519acb2ba11320d55" compoundref="odometer_8c" startline="46" endline="69">odometerTask</referencedby>
        <referencedby refid="driving__loop_8c_1a80cc48f06202edc29bcad26a956bcc98" compoundref="driving__loop_8c" startline="69" endline="208">StartDrivingLoop</referencedby>
        <referencedby refid="temp__monitoring_8c_1a2a1d7fee4cea6ce07e4d4acc1b2ca752" compoundref="temp__monitoring_8c" startline="48" endline="108">tempMonitorTask</referencedby>
        <referencedby refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" compoundref="uvfr__utils_8c" startline="37" endline="267">uvInit</referencedby>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a092be3fd5752625303c307620be523ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TickType_t</type>
        <definition>TickType_t xTaskGetTickCountFromISR</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskGetTickCountFromISR</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1372" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1372" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UBaseType_t</type>
        <definition>UBaseType_t uxTaskGetNumberOfTasks</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>uxTaskGetNumberOfTasks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1386" column="13" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1386" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1ae2ffb6a591fef808cf10353059b1c2bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* pcTaskGetName</definition>
        <argsstring>(TaskHandle_t xTaskToQuery) PRIVILEGED_FUNCTION</argsstring>
        <name>pcTaskGetName</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTaskToQuery</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1399" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1399" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a45b3b1cd0227269609499beeeb8c5c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
        <definition>TaskHandle_t xTaskGetHandle</definition>
        <argsstring>(const char *pcNameToQuery) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskGetHandle</name>
        <param>
          <type>const char *</type>
          <declname>pcNameToQuery</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1415" column="14" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1415" declcolumn="14"/>
        <referencedby refid="can_8c_1acc24d5acdcc2015b59e63769a397353b" compoundref="can_8c" startline="320" endline="349">uvSendCanMSG</referencedby>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a799967af01d328132cde814e47733437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UBaseType_t</type>
        <definition>UBaseType_t uxTaskGetStackHighWaterMark</definition>
        <argsstring>(TaskHandle_t xTask) PRIVILEGED_FUNCTION</argsstring>
        <name>uxTaskGetStackHighWaterMark</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="task_8h" kindref="compound">task.h</ref> <preformatted>UBaseType_t <ref refid="task_8h_1a799967af01d328132cde814e47733437" kindref="member">uxTaskGetStackHighWaterMark( TaskHandle_t xTask )</ref>;</preformatted></para>
<para>INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in <ref refid="_free_r_t_o_s_config_8h" kindref="compound">FreeRTOSConfig.h</ref> for this function to be available.</para>
<para>Returns the high water mark of the stack associated with xTask. That is, the minimum free stack space there has been (in words, so on a 32 bit machine a value of 1 means 4 bytes) since the task started. The smaller the returned number the closer the task has come to overflowing its stack.</para>
<para><ref refid="task_8h_1a799967af01d328132cde814e47733437" kindref="member">uxTaskGetStackHighWaterMark()</ref> and <ref refid="task_8h_1a7fd88fa038a89eb539bd41ce64a93744" kindref="member">uxTaskGetStackHighWaterMark2()</ref> are the same except for their return type. Using configSTACK_DEPTH_TYPE allows the user to determine the return type. It gets around the problem of the value overflowing on 8-bit types without breaking backward compatibility for applications that expect an 8-bit return type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTask</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the task associated with the stack to be checked. Set xTask to NULL to check the stack of the calling task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The smallest amount of free stack space there has been (in words, so actual spaces on the stack rather than bytes) since the task referenced by xTask was created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1442" column="13" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1442" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a7fd88fa038a89eb539bd41ce64a93744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a" kindref="member">configSTACK_DEPTH_TYPE</ref></type>
        <definition>configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2</definition>
        <argsstring>(TaskHandle_t xTask) PRIVILEGED_FUNCTION</argsstring>
        <name>uxTaskGetStackHighWaterMark2</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="task_8h" kindref="compound">task.h</ref> <preformatted>configSTACK_DEPTH_TYPE <ref refid="task_8h_1a7fd88fa038a89eb539bd41ce64a93744" kindref="member">uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )</ref>;</preformatted></para>
<para>INCLUDE_uxTaskGetStackHighWaterMark2 must be set to 1 in <ref refid="_free_r_t_o_s_config_8h" kindref="compound">FreeRTOSConfig.h</ref> for this function to be available.</para>
<para>Returns the high water mark of the stack associated with xTask. That is, the minimum free stack space there has been (in words, so on a 32 bit machine a value of 1 means 4 bytes) since the task started. The smaller the returned number the closer the task has come to overflowing its stack.</para>
<para><ref refid="task_8h_1a799967af01d328132cde814e47733437" kindref="member">uxTaskGetStackHighWaterMark()</ref> and <ref refid="task_8h_1a7fd88fa038a89eb539bd41ce64a93744" kindref="member">uxTaskGetStackHighWaterMark2()</ref> are the same except for their return type. Using configSTACK_DEPTH_TYPE allows the user to determine the return type. It gets around the problem of the value overflowing on 8-bit types without breaking backward compatibility for applications that expect an 8-bit return type.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xTask</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the task associated with the stack to be checked. Set xTask to NULL to check the stack of the calling task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The smallest amount of free stack space there has been (in words, so actual spaces on the stack rather than bytes) since the task referenced by xTask was created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1469" column="24" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1469" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1ab6607e5d8a9664e3aa9fe16efa694e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskCallApplicationTaskHook</definition>
        <argsstring>(TaskHandle_t xTask, void *pvParameter) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskCallApplicationTaskHook</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pvParameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="task_8h" kindref="compound">task.h</ref> <preformatted>BaseType_t <ref refid="task_8h_1ab6607e5d8a9664e3aa9fe16efa694e83" kindref="member">xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )</ref>;</preformatted></para>
<para>Calls the hook function associated with xTask. Passing xTask as NULL has the effect of calling the Running tasks (the calling task) hook function.</para>
<para>pvParameter is passed to the hook function for the task to interpret as it wants. The return value is the value returned by the task hook function registered by the user. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1533" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1533" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a3d5446a4403457e855cb84b3bba5570a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
        <definition>TaskHandle_t xTaskGetIdleTaskHandle</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskGetIdleTaskHandle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="task_8h_1a3d5446a4403457e855cb84b3bba5570a" kindref="member">xTaskGetIdleTaskHandle()</ref> is only available if INCLUDE_xTaskGetIdleTaskHandle is set to 1 in <ref refid="_free_r_t_o_s_config_8h" kindref="compound">FreeRTOSConfig.h</ref>.</para>
<para>Simply returns the handle of the idle task. It is not valid to call <ref refid="task_8h_1a3d5446a4403457e855cb84b3bba5570a" kindref="member">xTaskGetIdleTaskHandle()</ref> before the scheduler has been started. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1542" column="14" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1542" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1aa4603f3de3d809e9beb18d10fbac005d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UBaseType_t</type>
        <definition>UBaseType_t uxTaskGetSystemState</definition>
        <argsstring>(TaskStatus_t *const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t *const pulTotalRunTime) PRIVILEGED_FUNCTION</argsstring>
        <name>uxTaskGetSystemState</name>
        <param>
          <type><ref refid="task_8h_1a34f88ef69814fb27d554e666e9868a9c" kindref="member">TaskStatus_t</ref> *const</type>
          <declname>pxTaskStatusArray</declname>
        </param>
        <param>
          <type>const UBaseType_t</type>
          <declname>uxArraySize</declname>
        </param>
        <param>
          <type>uint32_t *const</type>
          <declname>pulTotalRunTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>configUSE_TRACE_FACILITY must be defined as 1 in <ref refid="_free_r_t_o_s_config_8h" kindref="compound">FreeRTOSConfig.h</ref> for <ref refid="task_8h_1aa4603f3de3d809e9beb18d10fbac005d" kindref="member">uxTaskGetSystemState()</ref> to be available.</para>
<para><ref refid="task_8h_1aa4603f3de3d809e9beb18d10fbac005d" kindref="member">uxTaskGetSystemState()</ref> populates an TaskStatus_t structure for each task in the system. TaskStatus_t structures contain, among other things, members for the task handle, task name, task priority, task state, and total amount of run time consumed by the task. See the TaskStatus_t structure definition in this file for the full member list.</para>
<para>NOTE: This function is intended for debugging use only as its use results in the scheduler remaining suspended for an extended period.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pxTaskStatusArray</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an array of TaskStatus_t structures. The array must contain at least one TaskStatus_t structure for each task that is under the control of the RTOS. The number of tasks under the control of the RTOS can be determined using the <ref refid="task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a" kindref="member">uxTaskGetNumberOfTasks()</ref> API function.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uxArraySize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the array pointed to by the pxTaskStatusArray parameter. The size is specified as the number of indexes in the array, or the number of TaskStatus_t structures contained in the array, not by the number of bytes in the array.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pulTotalRunTime</parametername>
</parameternamelist>
<parameterdescription>
<para>If configGENERATE_RUN_TIME_STATS is set to 1 in <ref refid="_free_r_t_o_s_config_8h" kindref="compound">FreeRTOSConfig.h</ref> then *pulTotalRunTime is set by <ref refid="task_8h_1aa4603f3de3d809e9beb18d10fbac005d" kindref="member">uxTaskGetSystemState()</ref> to the total run time (as defined by the run time stats clock, see <ulink url="http://www.freertos.org/rtos-run-time-stats.html">http://www.freertos.org/rtos-run-time-stats.html</ulink>) since the target booted. pulTotalRunTime can be set to NULL to omit the total run time information.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of TaskStatus_t structures that were populated by <ref refid="task_8h_1aa4603f3de3d809e9beb18d10fbac005d" kindref="member">uxTaskGetSystemState()</ref>. This should equal the number returned by the <ref refid="task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a" kindref="member">uxTaskGetNumberOfTasks()</ref> API function, but will be zero if the value passed in the uxArraySize parameter was too small.</para>
</simplesect>
Example usage: <preformatted>
 // This example demonstrates how a human readable table of run time stats
 // information is generated from raw data provided by <ref refid="task_8h_1aa4603f3de3d809e9beb18d10fbac005d" kindref="member">uxTaskGetSystemState()</ref>.
 // The human readable table is written to pcWriteBuffer
 void <ref refid="task_8h_1a52da9b427041a48dc9f6802e10f151d4" kindref="member">vTaskGetRunTimeStats( char *pcWriteBuffer )</ref>
 {
 TaskStatus_t *pxTaskStatusArray;
 volatile UBaseType_t uxArraySize, x;
 uint32_t ulTotalRunTime, ulStatsAsPercentage;</preformatted></para>
<para><preformatted>    // Make sure the write buffer does not contain a string.
    *pcWriteBuffer = 0x00;</preformatted></para>
<para><preformatted>    // Take a snapshot of the number of tasks in case it changes while this
    // function is executing.
    uxArraySize = <ref refid="task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a" kindref="member">uxTaskGetNumberOfTasks()</ref>;</preformatted></para>
<para><preformatted>    // Allocate a TaskStatus_t structure for each task.  An array could be
    // allocated statically at compile time.
    pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );</preformatted></para>
<para><preformatted>    if( pxTaskStatusArray != NULL )
    {
        // Generate raw status information about each task.
        uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &amp;ulTotalRunTime );</preformatted></para>
<para><preformatted>        // For percentage calculations.
        ulTotalRunTime /= 100UL;</preformatted></para>
<para><preformatted>        // Avoid divide by zero errors.
        if( ulTotalRunTime &gt; 0 )
        {
            // For each populated position in the pxTaskStatusArray array,
            // format the raw data as human readable ASCII data
            for( x = 0; x &lt; uxArraySize; x++ )
            {
                // What percentage of the total run time has the task used?
                // This will always be rounded down to the nearest integer.
                // ulTotalRunTimeDiv100 has already been divided by 100.
                ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;</preformatted></para>
<para><preformatted>                if( ulStatsAsPercentage &gt; 0UL )
                {
                    sprintf( pcWriteBuffer, &quot;%s\t\t%lu\t\t%lu%%\r\n&quot;, pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );
                }
                else
                {
                    // If the percentage is zero here then the task has
                    // consumed less than 1% of the total run time.
                    sprintf( pcWriteBuffer, &quot;%s\t\t%lu\t\t&lt;1%%\r\n&quot;, pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );
                }</preformatted></para>
<para><preformatted>                pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
            }
        }</preformatted></para>
<para><preformatted>        // The array is no longer needed, free the memory it consumes.
        vPortFree( pxTaskStatusArray );
    }
 }
 </preformatted> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1641" column="13" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1641" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1ab87abc717f34ddced76802d12588a93d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskList</definition>
        <argsstring>(char *pcWriteBuffer) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskList</name>
        <param>
          <type>char *</type>
          <declname>pcWriteBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1688" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1688" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a52da9b427041a48dc9f6802e10f151d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskGetRunTimeStats</definition>
        <argsstring>(char *pcWriteBuffer) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskGetRunTimeStats</name>
        <param>
          <type>char *</type>
          <declname>pcWriteBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1742" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1742" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1aa3d1466d43c0263448661e91681e4a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ulTaskGetIdleRunTimeCounter</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>ulTaskGetIdleRunTimeCounter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1772" column="10" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1772" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1aa7bd3a4f3847b83900fd6a9f1bacfe9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskGenericNotify</definition>
        <argsstring>(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskGenericNotify</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTaskToNotify</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ulValue</declname>
        </param>
        <param>
          <type><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233" kindref="member">eNotifyAction</ref></type>
          <declname>eAction</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pulPreviousNotificationValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1853" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1853" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a959c55f7950abffbc4107ce61ca52e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskGenericNotifyFromISR</definition>
        <argsstring>(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskGenericNotifyFromISR</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTaskToNotify</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ulValue</declname>
        </param>
        <param>
          <type><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233" kindref="member">eNotifyAction</ref></type>
          <declname>eAction</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pulPreviousNotificationValue</declname>
        </param>
        <param>
          <type>BaseType_t *</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="1944" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="1944" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a0475fcda9718f403521c270a7270ff93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskNotifyWait</definition>
        <argsstring>(uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskNotifyWait</name>
        <param>
          <type>uint32_t</type>
          <declname>ulBitsToClearOnEntry</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ulBitsToClearOnExit</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>pulNotificationValue</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2021" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2021" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a4a4bcf98ad282a596e13f3f30582a11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskNotifyGiveFromISR</definition>
        <argsstring>(TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskNotifyGiveFromISR</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTaskToNotify</declname>
        </param>
        <param>
          <type>BaseType_t *</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2122" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2122" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a66540bef602522a01a519f776e4c07d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ulTaskNotifyTake</definition>
        <argsstring>(BaseType_t xClearCountOnExit, TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>ulTaskNotifyTake</name>
        <param>
          <type>BaseType_t</type>
          <declname>xClearCountOnExit</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2191" column="10" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2191" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a4cb6c908a9d2d733e9d519d7dc27bb34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskNotifyStateClear</definition>
        <argsstring>(TaskHandle_t xTask)</argsstring>
        <name>xTaskNotifyStateClear</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2207" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2207" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1ae9254491975ce0adbbc879d56dd1b222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ulTaskNotifyValueClear</definition>
        <argsstring>(TaskHandle_t xTask, uint32_t ulBitsToClear) PRIVILEGED_FUNCTION</argsstring>
        <name>ulTaskNotifyValueClear</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ulBitsToClear</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2225" column="10" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2225" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a67155ad4ea2482b5f4597a69f2152be0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskSetTimeOutState</definition>
        <argsstring>(TimeOut_t *const pxTimeOut) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskSetTimeOutState</name>
        <param>
          <type><ref refid="task_8h_1a5e1a80e591c8c42e2d21a29d70256ea2" kindref="member">TimeOut_t</ref> *const</type>
          <declname>pxTimeOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2239" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2239" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a3b018a85d339e536a6c05748dd666a3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskCheckForTimeOut</definition>
        <argsstring>(TimeOut_t *const pxTimeOut, TickType_t *const pxTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskCheckForTimeOut</name>
        <param>
          <type><ref refid="task_8h_1a5e1a80e591c8c42e2d21a29d70256ea2" kindref="member">TimeOut_t</ref> *const</type>
          <declname>pxTimeOut</declname>
        </param>
        <param>
          <type>TickType_t *const</type>
          <declname>pxTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2322" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2322" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a978e25460ac35706f9ad30b46d9403d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskIncrementTick</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskIncrementTick</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2343" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2343" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a56ae23bc0dece4522d666959902221ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskPlaceOnEventList</definition>
        <argsstring>(List_t *const pxEventList, const TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskPlaceOnEventList</name>
        <param>
          <type><ref refid="list_8h_1afd590ef6400071b4d63d65ef90bea7f4" kindref="member">List_t</ref> *const</type>
          <declname>pxEventList</declname>
        </param>
        <param>
          <type>const TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2376" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2376" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskPlaceOnUnorderedEventList</definition>
        <argsstring>(List_t *pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskPlaceOnUnorderedEventList</name>
        <param>
          <type><ref refid="list_8h_1afd590ef6400071b4d63d65ef90bea7f4" kindref="member">List_t</ref> *</type>
          <declname>pxEventList</declname>
        </param>
        <param>
          <type>const TickType_t</type>
          <declname>xItemValue</declname>
        </param>
        <param>
          <type>const TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2377" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2377" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1ada3eb00e16241f5b648184a406a6a6fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskPlaceOnEventListRestricted</definition>
        <argsstring>(List_t *const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskPlaceOnEventListRestricted</name>
        <param>
          <type><ref refid="list_8h_1afd590ef6400071b4d63d65ef90bea7f4" kindref="member">List_t</ref> *const</type>
          <declname>pxEventList</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToWait</declname>
        </param>
        <param>
          <type>const BaseType_t</type>
          <declname>xWaitIndefinitely</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2390" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2390" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskRemoveFromEventList</definition>
        <argsstring>(const List_t *const pxEventList) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskRemoveFromEventList</name>
        <param>
          <type>const <ref refid="list_8h_1afd590ef6400071b4d63d65ef90bea7f4" kindref="member">List_t</ref> *const</type>
          <declname>pxEventList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2416" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2416" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskRemoveFromUnorderedEventList</definition>
        <argsstring>(ListItem_t *pxEventListItem, const TickType_t xItemValue) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskRemoveFromUnorderedEventList</name>
        <param>
          <type><ref refid="list_8h_1a1a62d469392f9bfe2443e7efab9c8398" kindref="member">ListItem_t</ref> *</type>
          <declname>pxEventListItem</declname>
        </param>
        <param>
          <type>const TickType_t</type>
          <declname>xItemValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2417" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2417" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a7a82c12c2407390ecbb70c123aa11e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_free_r_t_o_s_8h_1a6720aeadd2ae4379a1280e2d6ff42c0c" kindref="member">portDONT_DISCARD</ref> void</type>
        <definition>portDONT_DISCARD void vTaskSwitchContext</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskSwitchContext</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2427" column="23" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2427" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a7793b4bbe45c10d4c5104c126b89e87c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TickType_t</type>
        <definition>TickType_t uxTaskResetEventItemValue</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>uxTaskResetEventItemValue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2433" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2433" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
        <definition>TaskHandle_t xTaskGetCurrentTaskHandle</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskGetCurrentTaskHandle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2438" column="14" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2438" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a998c69e37431a3a32c637b31ff60089a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskMissedYield</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskMissedYield</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2444" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2444" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a0241000e08a261372186d34825a35979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskGetSchedulerState</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskGetSchedulerState</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2450" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2450" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1aa715a488a6014df5a9393ca38c5938c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskPriorityInherit</definition>
        <argsstring>(TaskHandle_t const pxMutexHolder) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskPriorityInherit</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref> const</type>
          <declname>pxMutexHolder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2456" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2456" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a02fe2e1419fd6c35f75a1357c5e5ce22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskPriorityDisinherit</definition>
        <argsstring>(TaskHandle_t const pxMutexHolder) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskPriorityDisinherit</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref> const</type>
          <declname>pxMutexHolder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2462" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2462" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1aa11e6a58d2534fe91ed8ee3a02c9b5e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskPriorityDisinheritAfterTimeout</definition>
        <argsstring>(TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskPriorityDisinheritAfterTimeout</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref> const</type>
          <declname>pxMutexHolder</declname>
        </param>
        <param>
          <type>UBaseType_t</type>
          <declname>uxHighestPriorityWaitingTask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2472" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2472" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1ad8bb91e2267905f0069918802fa7f8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UBaseType_t</type>
        <definition>UBaseType_t uxTaskGetTaskNumber</definition>
        <argsstring>(TaskHandle_t xTask) PRIVILEGED_FUNCTION</argsstring>
        <name>uxTaskGetTaskNumber</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2477" column="13" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2477" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1ae48f006277815cb1c534284e29ca8f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskSetTaskNumber</definition>
        <argsstring>(TaskHandle_t xTask, const UBaseType_t uxHandle) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskSetTaskNumber</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTask</declname>
        </param>
        <param>
          <type>const UBaseType_t</type>
          <declname>uxHandle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2483" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2483" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a8dda6cb26bb158dd9636873135e63912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskStepTick</definition>
        <argsstring>(const TickType_t xTicksToJump) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskStepTick</name>
        <param>
          <type>const TickType_t</type>
          <declname>xTicksToJump</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2493" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2493" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a399bcc59c77ed9f1cb2bf3eac55bdf02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BaseType_t</type>
        <definition>BaseType_t xTaskCatchUpTicks</definition>
        <argsstring>(TickType_t xTicksToCatchUp) PRIVILEGED_FUNCTION</argsstring>
        <name>xTaskCatchUpTicks</name>
        <param>
          <type>TickType_t</type>
          <declname>xTicksToCatchUp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2506" column="12" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2506" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1ad185d5a451380c4040888620d9a92ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="task_8h_1afd168a210ae0f2fb0fca242860a8178e" kindref="member">eSleepModeStatus</ref></type>
        <definition>eSleepModeStatus eTaskConfirmSleepModeStatus</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>eTaskConfirmSleepModeStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2522" column="18" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2522" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a54430b124666d513049dcbf888e6935f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
        <definition>TaskHandle_t pvTaskIncrementMutexHeldCount</definition>
        <argsstring>(void) PRIVILEGED_FUNCTION</argsstring>
        <name>pvTaskIncrementMutexHeldCount</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2528" column="14" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2528" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="task_8h_1a9bff8681d5ed262e71b92805ca0da909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskInternalSetTimeOutState</definition>
        <argsstring>(TimeOut_t *const pxTimeOut) PRIVILEGED_FUNCTION</argsstring>
        <name>vTaskInternalSetTimeOutState</name>
        <param>
          <type><ref refid="task_8h_1a5e1a80e591c8c42e2d21a29d70256ea2" kindref="member">TimeOut_t</ref> *const</type>
          <declname>pxTimeOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" line="2534" column="6" declfile="Middlewares/Third_Party/FreeRTOS/Source/include/task.h" declline="2534" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>FreeRTOS<sp/>Kernel<sp/>V10.3.1</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020<sp/>Amazon.com,<sp/>Inc.<sp/>or<sp/>its<sp/>affiliates.<sp/><sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>http://www.FreeRTOS.org</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>http://aws.amazon.com/freertos</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>1<sp/>tab<sp/>==<sp/>4<sp/>spaces!</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INC_TASK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INC_TASK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INC_FREERTOS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>&quot;include<sp/>FreeRTOS.h<sp/>must<sp/>appear<sp/>in<sp/>source<sp/>files<sp/>before<sp/>include<sp/>task.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="list_8h" kindref="compound">list.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>MACROS<sp/>AND<sp/>DEFINITIONS</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="task_8h_1a3de6ae5641d96a68aa027673b6588016" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskKERNEL_VERSION_NUMBER<sp/>&quot;V10.3.1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="task_8h_1a790e0e16f79e71d4791435a31d5b0fc7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskKERNEL_VERSION_MAJOR<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="task_8h_1ab0b5ab04d8419227d0a5ac94af6b3639" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskKERNEL_VERSION_MINOR<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="task_8h_1a4cb001d5c86f4a8a5272f27227eb3247" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskKERNEL_VERSION_BUILD<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MPU<sp/>region<sp/>parameters<sp/>passed<sp/>in<sp/>ulParameters</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>of<sp/>MemoryRegion_t<sp/>struct.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="task_8h_1a96fbec2d0baf0d3e958af5fc709de9d6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskMPU_REGION_READ_ONLY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>1UL<sp/>&lt;&lt;<sp/>0UL<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="task_8h_1aa13782bf13a683798cda192165d8c5d6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskMPU_REGION_READ_WRITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>1UL<sp/>&lt;&lt;<sp/>1UL<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="task_8h_1ab011150da041e1e65bc271152eabba3c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskMPU_REGION_EXECUTE_NEVER<sp/><sp/><sp/><sp/><sp/>(<sp/>1UL<sp/>&lt;&lt;<sp/>2UL<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="task_8h_1ad300fc0b16549387b185dffa7a2dc323" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskMPU_REGION_NORMAL_MEMORY<sp/><sp/><sp/><sp/><sp/>(<sp/>1UL<sp/>&lt;&lt;<sp/>3UL<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="task_8h_1a4ce090b0f3d783e72e230647c0261f96" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskMPU_REGION_DEVICE_MEMORY<sp/><sp/><sp/><sp/><sp/>(<sp/>1UL<sp/>&lt;&lt;<sp/>4UL<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tskTaskControlBlock;<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>old<sp/>naming<sp/>convention<sp/>is<sp/>used<sp/>to<sp/>prevent<sp/>breaking<sp/>kernel<sp/>aware<sp/>debuggers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tskTaskControlBlock*<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>Defines<sp/>the<sp/>prototype<sp/>to<sp/>which<sp/>the<sp/>application<sp/>task<sp/>hook<sp/>function<sp/>must</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>conform.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="task_8h_1af984026250bf8fece2e0068874d4661d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>BaseType_t<sp/>(*<ref refid="task_8h_1af984026250bf8fece2e0068874d4661d" kindref="member">TaskHookFunction_t</ref>)(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Task<sp/>states<sp/>returned<sp/>by<sp/>eTaskGetState.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="task_8h_1a1749369458e2282a22e862a619a3892c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81" refid="task_8h_1a1749369458e2282a22e862a619a3892ca83318c0d58e6b2bafaefa1be597fb8b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892ca83318c0d58e6b2bafaefa1be597fb8b6" kindref="member">eRunning</ref><sp/>=<sp/>0,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>task<sp/>is<sp/>querying<sp/>the<sp/>state<sp/>of<sp/>itself,<sp/>so<sp/>must<sp/>be<sp/>running.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="task_8h_1a1749369458e2282a22e862a619a3892ca8570b65f331057b2cf92c504f0a2bc83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892ca8570b65f331057b2cf92c504f0a2bc83" kindref="member">eReady</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>being<sp/>queried<sp/>is<sp/>in<sp/>a<sp/>read<sp/>or<sp/>pending<sp/>ready<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af" kindref="member">eBlocked</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>being<sp/>queried<sp/>is<sp/>in<sp/>the<sp/>Blocked<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="task_8h_1a1749369458e2282a22e862a619a3892caf35a900d49fdfc2502eefc68fdb70f72" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892caf35a900d49fdfc2502eefc68fdb70f72" kindref="member">eSuspended</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>being<sp/>queried<sp/>is<sp/>in<sp/>the<sp/>Suspended<sp/>state,<sp/>or<sp/>is<sp/>in<sp/>the<sp/>Blocked<sp/>state<sp/>with<sp/>an<sp/>infinite<sp/>time<sp/>out.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="task_8h_1a1749369458e2282a22e862a619a3892cacef5c6e771d3a07f656e07a13a20ba35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cacef5c6e771d3a07f656e07a13a20ba35" kindref="member">eDeleted</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>being<sp/>queried<sp/>has<sp/>been<sp/>deleted,<sp/>but<sp/>its<sp/>TCB<sp/>has<sp/>not<sp/>yet<sp/>been<sp/>freed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="task_8h_1a1749369458e2282a22e862a619a3892cab32c771bb60dc8b502f65b81eef3bd86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cab32c771bb60dc8b502f65b81eef3bd86" kindref="member">eInvalid</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Used<sp/>as<sp/>an<sp/>&apos;invalid<sp/>state&apos;<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892c" kindref="member">eTaskState</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Actions<sp/>that<sp/>can<sp/>be<sp/>performed<sp/>when<sp/>vTaskNotify()<sp/>is<sp/>called.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92" refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" kindref="member">eNoAction</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Notify<sp/>the<sp/>task<sp/>without<sp/>updating<sp/>its<sp/>notify<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab7b1af2eeee53ae78eeff37c1cb6f79b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab7b1af2eeee53ae78eeff37c1cb6f79b" kindref="member">eSetBits</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>bits<sp/>in<sp/>the<sp/>task&apos;s<sp/>notification<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233a04fb0e98d2400e4cd28f1593bc868822" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233a04fb0e98d2400e4cd28f1593bc868822" kindref="member">eIncrement</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>the<sp/>task&apos;s<sp/>notification<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab61fc296ef909186b5824c823b33e130" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab61fc296ef909186b5824c823b33e130" kindref="member">eSetValueWithOverwrite</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>task&apos;s<sp/>notification<sp/>value<sp/>to<sp/>a<sp/>specific<sp/>value<sp/>even<sp/>if<sp/>the<sp/>previous<sp/>value<sp/>has<sp/>not<sp/>yet<sp/>been<sp/>read<sp/>by<sp/>the<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233acc4dd3fe71b62c751187a2c4c515abac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233acc4dd3fe71b62c751187a2c4c515abac" kindref="member">eSetValueWithoutOverwrite</ref><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>task&apos;s<sp/>notification<sp/>value<sp/>if<sp/>the<sp/>previous<sp/>value<sp/>has<sp/>been<sp/>read<sp/>by<sp/>the<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}<sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233" kindref="member">eNotifyAction</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>Used<sp/>internally<sp/>only.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="structx_t_i_m_e___o_u_t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structx_t_i_m_e___o_u_t" kindref="compound">xTIME_OUT</ref></highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104" refid="structx_t_i_m_e___o_u_t_1a9289c6f97096a9b3e3fc705d0bc5a160" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseType_t<sp/><ref refid="structx_t_i_m_e___o_u_t_1a9289c6f97096a9b3e3fc705d0bc5a160" kindref="member">xOverflowCount</ref>;</highlight></codeline>
<codeline lineno="105" refid="structx_t_i_m_e___o_u_t_1a3464939ca050f7bcc6ffe0d8d3766337" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>TickType_t<sp/><ref refid="structx_t_i_m_e___o_u_t_1a3464939ca050f7bcc6ffe0d8d3766337" kindref="member">xTimeOnEntering</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}<sp/><ref refid="task_8h_1a5e1a80e591c8c42e2d21a29d70256ea2" kindref="member">TimeOut_t</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>Defines<sp/>the<sp/>memory<sp/>ranges<sp/>allocated<sp/>to<sp/>the<sp/>task<sp/>when<sp/>an<sp/>MPU<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="structx_m_e_m_o_r_y___r_e_g_i_o_n" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structx_m_e_m_o_r_y___r_e_g_i_o_n" kindref="compound">xMEMORY_REGION</ref></highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113" refid="structx_m_e_m_o_r_y___r_e_g_i_o_n_1a228036bbfdbc38f170e45deadb166172" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structx_m_e_m_o_r_y___r_e_g_i_o_n_1a228036bbfdbc38f170e45deadb166172" kindref="member">pvBaseAddress</ref>;</highlight></codeline>
<codeline lineno="114" refid="structx_m_e_m_o_r_y___r_e_g_i_o_n_1a97e59578d3c4c46270d33e7206258a65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structx_m_e_m_o_r_y___r_e_g_i_o_n_1a97e59578d3c4c46270d33e7206258a65" kindref="member">ulLengthInBytes</ref>;</highlight></codeline>
<codeline lineno="115" refid="structx_m_e_m_o_r_y___r_e_g_i_o_n_1a6ba180553e9a318f23acc5f4664934e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structx_m_e_m_o_r_y___r_e_g_i_o_n_1a6ba180553e9a318f23acc5f4664934e3" kindref="member">ulParameters</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}<sp/><ref refid="task_8h_1af609504de4d78ff6f71477ae47c66e51" kindref="member">MemoryRegion_t</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>Parameters<sp/>required<sp/>to<sp/>create<sp/>an<sp/>MPU<sp/>protected<sp/>task.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s" kindref="compound">xTASK_PARAMETERS</ref></highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123" refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a7527993402054565cda38251c8922880" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="projdefs_8h_1a9b32502ff92c255c686dacde53c1cba0" kindref="member">TaskFunction_t</ref><sp/><ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a7527993402054565cda38251c8922880" kindref="member">pvTaskCode</ref>;</highlight></codeline>
<codeline lineno="124" refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a7b3e5583acf9de8bacac572a42246459" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a7b3e5583acf9de8bacac572a42246459" kindref="member">pcName</ref>;<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1ac2edb442cd1a9dc5435c7735ed99c83e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a" kindref="member">configSTACK_DEPTH_TYPE</ref><sp/><ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1ac2edb442cd1a9dc5435c7735ed99c83e" kindref="member">usStackDepth</ref>;</highlight></codeline>
<codeline lineno="126" refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1accbb9f4de75b5b5be750198b52390c7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1accbb9f4de75b5b5be750198b52390c7f" kindref="member">pvParameters</ref>;</highlight></codeline>
<codeline lineno="127" refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1aa1aff14035db645e2bdcc85b3cdc9bab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>UBaseType_t<sp/><ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1aa1aff14035db645e2bdcc85b3cdc9bab" kindref="member">uxPriority</ref>;</highlight></codeline>
<codeline lineno="128" refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a946c525d3765369780538f9bc3f3586d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>StackType_t<sp/>*<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a946c525d3765369780538f9bc3f3586d" kindref="member">puxStackBuffer</ref>;</highlight></codeline>
<codeline lineno="129" refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1ae8b97c6b7a344bf09b066b0844844d66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structx_m_e_m_o_r_y___r_e_g_i_o_n" kindref="compound">MemoryRegion_t</ref><sp/><ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1ae8b97c6b7a344bf09b066b0844844d66" kindref="member">xRegions</ref>[<sp/><ref refid="portable_8h_1aca7e1a8a568a38b74cc9db10c8efebda" kindref="member">portNUM_CONFIGURABLE_REGIONS</ref><sp/>];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>(<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structx_s_t_a_t_i_c___t_c_b" kindref="compound">StaticTask_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTaskBuffer;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">}<sp/><ref refid="task_8h_1aab31598a83ebd71dfce65f58add35676" kindref="member">TaskParameters_t</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Used<sp/>with<sp/>the<sp/>uxTaskGetSystemState()<sp/>function<sp/>to<sp/>return<sp/>the<sp/>state<sp/>of<sp/>each<sp/>task</highlight></codeline>
<codeline lineno="136"><highlight class="comment">in<sp/>the<sp/>system.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="structx_t_a_s_k___s_t_a_t_u_s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structx_t_a_s_k___s_t_a_t_u_s" kindref="compound">xTASK_STATUS</ref></highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139" refid="structx_t_a_s_k___s_t_a_t_u_s_1ac57f825f365c3c64bba827285fe3c2a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s_1ac57f825f365c3c64bba827285fe3c2a0" kindref="member">xHandle</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>handle<sp/>of<sp/>the<sp/>task<sp/>to<sp/>which<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>information<sp/>in<sp/>the<sp/>structure<sp/>relates.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="structx_t_a_s_k___s_t_a_t_u_s_1ad272663e2560bd9ea088384a39ba6192" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1ad272663e2560bd9ea088384a39ba6192" kindref="member">pcTaskName</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>pointer<sp/>to<sp/>the<sp/>task&apos;s<sp/>name.<sp/><sp/>This<sp/>value<sp/>will<sp/>be<sp/>invalid<sp/>if<sp/>the<sp/>task<sp/>was<sp/>deleted<sp/>since<sp/>the<sp/>structure<sp/>was<sp/>populated!<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="structx_t_a_s_k___s_t_a_t_u_s_1acd44468ba37270b04f83d0833c098057" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>UBaseType_t<sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s_1acd44468ba37270b04f83d0833c098057" kindref="member">xTaskNumber</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>number<sp/>unique<sp/>to<sp/>the<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="structx_t_a_s_k___s_t_a_t_u_s_1a727e904e3afe49472b0fc6a4e96439cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892c" kindref="member">eTaskState</ref><sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a727e904e3afe49472b0fc6a4e96439cb" kindref="member">eCurrentState</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>state<sp/>in<sp/>which<sp/>the<sp/>task<sp/>existed<sp/>when<sp/>the<sp/>structure<sp/>was<sp/>populated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="structx_t_a_s_k___s_t_a_t_u_s_1a39df647234fc0d6de5852042a2741a94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>UBaseType_t<sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a39df647234fc0d6de5852042a2741a94" kindref="member">uxCurrentPriority</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>priority<sp/>at<sp/>which<sp/>the<sp/>task<sp/>was<sp/>running<sp/>(may<sp/>be<sp/>inherited)<sp/>when<sp/>the<sp/>structure<sp/>was<sp/>populated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="structx_t_a_s_k___s_t_a_t_u_s_1a692f4c8957b7270f1579cdee63ff287e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>UBaseType_t<sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a692f4c8957b7270f1579cdee63ff287e" kindref="member">uxBasePriority</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>priority<sp/>to<sp/>which<sp/>the<sp/>task<sp/>will<sp/>return<sp/>if<sp/>the<sp/>task&apos;s<sp/>current<sp/>priority<sp/>has<sp/>been<sp/>inherited<sp/>to<sp/>avoid<sp/>unbounded<sp/>priority<sp/>inversion<sp/>when<sp/>obtaining<sp/>a<sp/>mutex.<sp/><sp/>Only<sp/>valid<sp/>if<sp/>configUSE_MUTEXES<sp/>is<sp/>defined<sp/>as<sp/>1<sp/>in<sp/>FreeRTOSConfig.h.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="structx_t_a_s_k___s_t_a_t_u_s_1a92ab83f4f376c255dedf8e06a78261f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a92ab83f4f376c255dedf8e06a78261f7" kindref="member">ulRunTimeCounter</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>total<sp/>run<sp/>time<sp/>allocated<sp/>to<sp/>the<sp/>task<sp/>so<sp/>far,<sp/>as<sp/>defined<sp/>by<sp/>the<sp/>run<sp/>time<sp/>stats<sp/>clock.<sp/><sp/>See<sp/>http://www.freertos.org/rtos-run-time-stats.html.<sp/><sp/>Only<sp/>valid<sp/>when<sp/>configGENERATE_RUN_TIME_STATS<sp/>is<sp/>defined<sp/>as<sp/>1<sp/>in<sp/>FreeRTOSConfig.h.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="structx_t_a_s_k___s_t_a_t_u_s_1a0ee59674d2cc57d3a5a29c777d5452ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>StackType_t<sp/>*<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a0ee59674d2cc57d3a5a29c777d5452ed" kindref="member">pxStackBase</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Points<sp/>to<sp/>the<sp/>lowest<sp/>address<sp/>of<sp/>the<sp/>task&apos;s<sp/>stack<sp/>area.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="structx_t_a_s_k___s_t_a_t_u_s_1aaad57afd4a629d2404e1cff97891c571" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a" kindref="member">configSTACK_DEPTH_TYPE</ref><sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s_1aaad57afd4a629d2404e1cff97891c571" kindref="member">usStackHighWaterMark</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>minimum<sp/>amount<sp/>of<sp/>stack<sp/>space<sp/>that<sp/>has<sp/>remained<sp/>for<sp/>the<sp/>task<sp/>since<sp/>the<sp/>task<sp/>was<sp/>created.<sp/><sp/>The<sp/>closer<sp/>this<sp/>value<sp/>is<sp/>to<sp/>zero<sp/>the<sp/>closer<sp/>the<sp/>task<sp/>has<sp/>come<sp/>to<sp/>overflowing<sp/>its<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">}<sp/><ref refid="task_8h_1a34f88ef69814fb27d554e666e9868a9c" kindref="member">TaskStatus_t</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Possible<sp/>return<sp/>values<sp/>for<sp/>eTaskConfirmSleepModeStatus().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="task_8h_1afd168a210ae0f2fb0fca242860a8178e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153" refid="task_8h_1afd168a210ae0f2fb0fca242860a8178eaba7b1a394c63faa14a85dbb191f1c6f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1afd168a210ae0f2fb0fca242860a8178eaba7b1a394c63faa14a85dbb191f1c6f9" kindref="member">eAbortSleep</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>task<sp/>has<sp/>been<sp/>made<sp/>ready<sp/>or<sp/>a<sp/>context<sp/>switch<sp/>pended<sp/>since<sp/>portSUPPORESS_TICKS_AND_SLEEP()<sp/>was<sp/>called<sp/>-<sp/>abort<sp/>entering<sp/>a<sp/>sleep<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="task_8h_1afd168a210ae0f2fb0fca242860a8178ea2c539add8104402c6336bc33a660d1d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1afd168a210ae0f2fb0fca242860a8178ea2c539add8104402c6336bc33a660d1d1" kindref="member">eStandardSleep</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enter<sp/>a<sp/>sleep<sp/>mode<sp/>that<sp/>will<sp/>not<sp/>last<sp/>any<sp/>longer<sp/>than<sp/>the<sp/>expected<sp/>idle<sp/>time.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="task_8h_1afd168a210ae0f2fb0fca242860a8178ea004c4d9f1a2619193750d0e2f18f6046" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1afd168a210ae0f2fb0fca242860a8178ea004c4d9f1a2619193750d0e2f18f6046" kindref="member">eNoTasksWaitingTimeout</ref><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>tasks<sp/>are<sp/>waiting<sp/>for<sp/>a<sp/>timeout<sp/>so<sp/>it<sp/>is<sp/>safe<sp/>to<sp/>enter<sp/>a<sp/>sleep<sp/>mode<sp/>that<sp/>can<sp/>only<sp/>be<sp/>exited<sp/>by<sp/>an<sp/>external<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">}<sp/><ref refid="task_8h_1afd168a210ae0f2fb0fca242860a8178e" kindref="member">eSleepModeStatus</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67" refkind="member"><highlight class="preprocessor">#define<sp/>tskIDLE_PRIORITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>UBaseType_t<sp/>)<sp/>0U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="task_8h_1a767e474430db1e60056e9678763f9202" refkind="member"><highlight class="preprocessor">#define<sp/>taskYIELD()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portYIELD()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" refkind="member"><highlight class="preprocessor">#define<sp/>taskENTER_CRITICAL()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portENTER_CRITICAL()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="task_8h_1acb27098fc27d117f720d96bfdcd2b4c8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>taskENTER_CRITICAL_FROM_ISR()<sp/>portSET_INTERRUPT_MASK_FROM_ISR()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" refkind="member"><highlight class="preprocessor">#define<sp/>taskEXIT_CRITICAL()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portEXIT_CRITICAL()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="task_8h_1afa2f5acc3c925b6542ecca1acf67a234" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>taskEXIT_CRITICAL_FROM_ISR(<sp/>x<sp/>)<sp/>portCLEAR_INTERRUPT_MASK_FROM_ISR(<sp/>x<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="task_8h_1aa455a648c2224964ee57758b8794198e" refkind="member"><highlight class="preprocessor">#define<sp/>taskDISABLE_INTERRUPTS()<sp/><sp/><sp/><sp/>portDISABLE_INTERRUPTS()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="task_8h_1a04361ba499e91eb35324e4cba6feea17" refkind="member"><highlight class="preprocessor">#define<sp/>taskENABLE_INTERRUPTS()<sp/><sp/><sp/><sp/><sp/>portENABLE_INTERRUPTS()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Definitions<sp/>returned<sp/>by<sp/>xTaskGetSchedulerState().<sp/><sp/>taskSCHEDULER_SUSPENDED<sp/>is</highlight></codeline>
<codeline lineno="225"><highlight class="comment">0<sp/>to<sp/>generate<sp/>more<sp/>optimal<sp/>code<sp/>when<sp/>configASSERT()<sp/>is<sp/>defined<sp/>as<sp/>the<sp/>constant</highlight></codeline>
<codeline lineno="226"><highlight class="comment">is<sp/>used<sp/>in<sp/>assert()<sp/>statements.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>taskSCHEDULER_SUSPENDED<sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="task_8h_1a0923fdaae1bfe42ac5cccd9e9ddca9ed" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>taskSCHEDULER_NOT_STARTED<sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="task_8h_1acbb675035741787d29da475b5a887545" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>taskSCHEDULER_RUNNING<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>BaseType_t<sp/>)<sp/>2<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>TASK<sp/>CREATION<sp/>API</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="preprocessor">#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseType_t<sp/>xTaskCreate(<sp/><ref refid="projdefs_8h_1a9b32502ff92c255c686dacde53c1cba0" kindref="member">TaskFunction_t</ref><sp/>pxTaskCode,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pcName,<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a" kindref="member">configSTACK_DEPTH_TYPE</ref><sp/>usStackDepth,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvParameters,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UBaseType_t<sp/>uxPriority,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxCreatedTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="preprocessor">#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTaskCreateStatic(<sp/><ref refid="projdefs_8h_1a9b32502ff92c255c686dacde53c1cba0" kindref="member">TaskFunction_t</ref><sp/>pxTaskCode,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pcName,<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulStackDepth,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvParameters,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UBaseType_t<sp/>uxPriority,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StackType_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>puxStackBuffer,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structx_s_t_a_t_i_c___t_c_b" kindref="compound">StaticTask_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTaskBuffer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="preprocessor">#if(<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseType_t<sp/>xTaskCreateRestricted(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s" kindref="compound">TaskParameters_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTaskDefinition,<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>*pxCreatedTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="preprocessor">#if(<sp/>(<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseType_t<sp/>xTaskCreateRestrictedStatic(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s" kindref="compound">TaskParameters_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTaskDefinition,<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>*pxCreatedTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ad889595baff9faf9efe02f3696825409" kindref="member">vTaskAllocateMPURegions</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_m_e_m_o_r_y___r_e_g_i_o_n" kindref="compound">MemoryRegion_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxRegions<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a27ff4ebce26565bef136bda84201ff80" kindref="member">vTaskDelete</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTaskToDelete<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*<sp/>TASK<sp/>CONTROL<sp/>API</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/>*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1aa154068cecd7f31446a7a84af44ab1a3" kindref="member">vTaskDelay</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>xTicksToDelay<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a067da3e949e248096ec6c01f9cb75a47" kindref="member">vTaskDelayUntil</ref>(<sp/>TickType_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxPreviousWakeTime,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>xTimeIncrement<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1afefe333df0492c8411c0094badd25185" kindref="member">xTaskAbortDelay</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal">UBaseType_t<sp/><ref refid="task_8h_1a18d1148c845f5c4bff3b9e5b2077e058" kindref="member">uxTaskPriorityGet</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal">UBaseType_t<sp/><ref refid="task_8h_1a772bdcb1ae3cb58b0f12a172357f4a06" kindref="member">uxTaskPriorityGetFromISR</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><ref refid="task_8h_1a1749369458e2282a22e862a619a3892c" kindref="member">eTaskState</ref><sp/><ref refid="task_8h_1a954df77397d616484edb7c58c7760b10" kindref="member">eTaskGetState</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ac08c26d037d0dc685740eec9b2028715" kindref="member">vTaskGetInfo</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask,<sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s" kindref="compound">TaskStatus_t</ref><sp/>*pxTaskStatus,<sp/>BaseType_t<sp/>xGetFreeStackSpace,<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892c" kindref="member">eTaskState</ref><sp/>eState<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a1ee31be76e326e0644dbd6ac40a787b6" kindref="member">vTaskPrioritySet</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask,<sp/>UBaseType_t<sp/>uxNewPriority<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a84d4e660b04630be2939d91b3c2412f8" kindref="member">vTaskSuspend</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTaskToSuspend<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a84a1584f29fb7736a1aa72ad5b3e9b44" kindref="member">vTaskResume</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTaskToResume<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1aefbfd37c0661c3062fafd7334bff9aed" kindref="member">xTaskResumeFromISR</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTaskToResume<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------</highlight></codeline>
<codeline lineno="1150"><highlight class="comment"><sp/>*<sp/>SCHEDULER<sp/>CONTROL</highlight></codeline>
<codeline lineno="1151"><highlight class="comment"><sp/>*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1aaf9dca1065c60abdeb309d56ab7293cb" kindref="member">vTaskStartScheduler</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a1651e13c7ccd6273f53a62425ec79a15" kindref="member">vTaskEndScheduler</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------</highlight></codeline>
<codeline lineno="1344"><highlight class="comment"><sp/>*<sp/>TASK<sp/>UTILITIES</highlight></codeline>
<codeline lineno="1345"><highlight class="comment"><sp/>*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal">TickType_t<sp/><ref refid="task_8h_1a753ecfe23e7386066ecccad5d16422f7" kindref="member">xTaskGetTickCount</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal">TickType_t<sp/><ref refid="task_8h_1a092be3fd5752625303c307620be523ff" kindref="member">xTaskGetTickCountFromISR</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal">UBaseType_t<sp/><ref refid="task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a" kindref="member">uxTaskGetNumberOfTasks</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="task_8h_1ae2ffb6a591fef808cf10353059b1c2bd" kindref="member">pcTaskGetName</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTaskToQuery<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/><ref refid="task_8h_1a45b3b1cd0227269609499beeeb8c5c26" kindref="member">xTaskGetHandle</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcNameToQuery<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal">UBaseType_t<sp/><ref refid="task_8h_1a799967af01d328132cde814e47733437" kindref="member">uxTaskGetStackHighWaterMark</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><ref refid="_free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a" kindref="member">configSTACK_DEPTH_TYPE</ref><sp/><ref refid="task_8h_1a7fd88fa038a89eb539bd41ce64a93744" kindref="member">uxTaskGetStackHighWaterMark2</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>When<sp/>using<sp/>trace<sp/>macros<sp/>it<sp/>is<sp/>sometimes<sp/>necessary<sp/>to<sp/>include<sp/>task.h<sp/>before</highlight></codeline>
<codeline lineno="1472"><highlight class="comment">FreeRTOS.h.<sp/><sp/>When<sp/>this<sp/>is<sp/>done<sp/>TaskHookFunction_t<sp/>will<sp/>not<sp/>yet<sp/>have<sp/>been<sp/>defined,</highlight></codeline>
<codeline lineno="1473"><highlight class="comment">so<sp/>the<sp/>following<sp/>two<sp/>prototypes<sp/>will<sp/>cause<sp/>a<sp/>compilation<sp/>error.<sp/><sp/>This<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="1474"><highlight class="comment">fixed<sp/>by<sp/>simply<sp/>guarding<sp/>against<sp/>the<sp/>inclusion<sp/>of<sp/>these<sp/>two<sp/>prototypes<sp/>unless</highlight></codeline>
<codeline lineno="1475"><highlight class="comment">they<sp/>are<sp/>explicitly<sp/>required<sp/>by<sp/>the<sp/>configUSE_APPLICATION_TASK_TAG<sp/>configuration</highlight></codeline>
<codeline lineno="1476"><highlight class="comment">constant.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>configUSE_APPLICATION_TASK_TAG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>configUSE_APPLICATION_TASK_TAG<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vTaskSetApplicationTaskTag(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask,<sp/><ref refid="task_8h_1af984026250bf8fece2e0068874d4661d" kindref="member">TaskHookFunction_t</ref><sp/>pxHookFunction<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1af984026250bf8fece2e0068874d4661d" kindref="member">TaskHookFunction_t</ref><sp/>xTaskGetApplicationTaskTag(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1af984026250bf8fece2e0068874d4661d" kindref="member">TaskHookFunction_t</ref><sp/>xTaskGetApplicationTaskTagFromISR(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_APPLICATION_TASK_TAG<sp/>==1<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ifdef<sp/>configUSE_APPLICATION_TASK_TAG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configNUM_THREAD_LOCAL_STORAGE_POINTERS<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Each<sp/>task<sp/>contains<sp/>an<sp/>array<sp/>of<sp/>pointers<sp/>that<sp/>is<sp/>dimensioned<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="1513"><highlight class="comment"><sp/><sp/><sp/><sp/>configNUM_THREAD_LOCAL_STORAGE_POINTERS<sp/>setting<sp/>in<sp/>FreeRTOSConfig.h.<sp/><sp/>The</highlight></codeline>
<codeline lineno="1514"><highlight class="comment"><sp/><sp/><sp/><sp/>kernel<sp/>does<sp/>not<sp/>use<sp/>the<sp/>pointers<sp/>itself,<sp/>so<sp/>the<sp/>application<sp/>writer<sp/>can<sp/>use</highlight></codeline>
<codeline lineno="1515"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>pointers<sp/>for<sp/>any<sp/>purpose<sp/>they<sp/>wish.<sp/><sp/>The<sp/>following<sp/>two<sp/>functions<sp/>are</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/><sp/><sp/><sp/>used<sp/>to<sp/>set<sp/>and<sp/>query<sp/>a<sp/>pointer<sp/>respectively.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vTaskSetThreadLocalStoragePointer(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTaskToSet,<sp/>BaseType_t<sp/>xIndex,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvValue<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvTaskGetThreadLocalStoragePointer(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTaskToQuery,<sp/>BaseType_t<sp/>xIndex<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1ab6607e5d8a9664e3aa9fe16efa694e83" kindref="member">xTaskCallApplicationTaskHook</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvParameter<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/><ref refid="task_8h_1a3d5446a4403457e855cb84b3bba5570a" kindref="member">xTaskGetIdleTaskHandle</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal">UBaseType_t<sp/><ref refid="task_8h_1aa4603f3de3d809e9beb18d10fbac005d" kindref="member">uxTaskGetSystemState</ref>(<sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s" kindref="compound">TaskStatus_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTaskStatusArray,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxArraySize,<sp/>uint32_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pulTotalRunTime<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ab87abc717f34ddced76802d12588a93d" kindref="member">vTaskList</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>pcWriteBuffer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a52da9b427041a48dc9f6802e10f151d4" kindref="member">vTaskGetRunTimeStats</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcWriteBuffer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal">uint32_t<sp/><ref refid="task_8h_1aa3d1466d43c0263448661e91681e4a9a" kindref="member">ulTaskGetIdleRunTimeCounter</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1aa7bd3a4f3847b83900fd6a9f1bacfe9e" kindref="member">xTaskGenericNotify</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTaskToNotify,<sp/>uint32_t<sp/>ulValue,<sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233" kindref="member">eNotifyAction</ref><sp/>eAction,<sp/>uint32_t<sp/>*pulPreviousNotificationValue<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1854" refid="task_8h_1a0d2d54fb8a64011dfbb54983e4ed06bd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xTaskNotify(<sp/>xTaskToNotify,<sp/>ulValue,<sp/>eAction<sp/>)<sp/>xTaskGenericNotify(<sp/>(<sp/>xTaskToNotify<sp/>),<sp/>(<sp/>ulValue<sp/>),<sp/>(<sp/>eAction<sp/>),<sp/>NULL<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855" refid="task_8h_1aaa80adec29a2eebbfe0a551684a0acca" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xTaskNotifyAndQuery(<sp/>xTaskToNotify,<sp/>ulValue,<sp/>eAction,<sp/>pulPreviousNotifyValue<sp/>)<sp/>xTaskGenericNotify(<sp/>(<sp/>xTaskToNotify<sp/>),<sp/>(<sp/>ulValue<sp/>),<sp/>(<sp/>eAction<sp/>),<sp/>(<sp/>pulPreviousNotifyValue<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1a959c55f7950abffbc4107ce61ca52e97" kindref="member">xTaskGenericNotifyFromISR</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTaskToNotify,<sp/>uint32_t<sp/>ulValue,<sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233" kindref="member">eNotifyAction</ref><sp/>eAction,<sp/>uint32_t<sp/>*pulPreviousNotificationValue,<sp/>BaseType_t<sp/>*pxHigherPriorityTaskWoken<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="1945" refid="task_8h_1a1ed9129068b96a909356bd0369c5ecb0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xTaskNotifyFromISR(<sp/>xTaskToNotify,<sp/>ulValue,<sp/>eAction,<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>xTaskGenericNotifyFromISR(<sp/>(<sp/>xTaskToNotify<sp/>),<sp/>(<sp/>ulValue<sp/>),<sp/>(<sp/>eAction<sp/>),<sp/>NULL,<sp/>(<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946" refid="task_8h_1a5c491b42e243a91c7473887d1fb96dd5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xTaskNotifyAndQueryFromISR(<sp/>xTaskToNotify,<sp/>ulValue,<sp/>eAction,<sp/>pulPreviousNotificationValue,<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>xTaskGenericNotifyFromISR(<sp/>(<sp/>xTaskToNotify<sp/>),<sp/>(<sp/>ulValue<sp/>),<sp/>(<sp/>eAction<sp/>),<sp/>(<sp/>pulPreviousNotificationValue<sp/>),<sp/>(<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1a0475fcda9718f403521c270a7270ff93" kindref="member">xTaskNotifyWait</ref>(<sp/>uint32_t<sp/>ulBitsToClearOnEntry,<sp/>uint32_t<sp/>ulBitsToClearOnExit,<sp/>uint32_t<sp/>*pulNotificationValue,<sp/>TickType_t<sp/>xTicksToWait<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067" refid="task_8h_1ac60cbd05577a3e4f3c3587dd9b213930" refkind="member"><highlight class="preprocessor">#define<sp/>xTaskNotifyGive(<sp/>xTaskToNotify<sp/>)<sp/>xTaskGenericNotify(<sp/>(<sp/>xTaskToNotify<sp/>),<sp/>(<sp/>0<sp/>),<sp/>eIncrement,<sp/>NULL<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a4a4bcf98ad282a596e13f3f30582a11b" kindref="member">vTaskNotifyGiveFromISR</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTaskToNotify,<sp/>BaseType_t<sp/>*pxHigherPriorityTaskWoken<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal">uint32_t<sp/><ref refid="task_8h_1a66540bef602522a01a519f776e4c07d8" kindref="member">ulTaskNotifyTake</ref>(<sp/>BaseType_t<sp/>xClearCountOnExit,<sp/>TickType_t<sp/>xTicksToWait<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1a4cb6c908a9d2d733e9d519d7dc27bb34" kindref="member">xTaskNotifyStateClear</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask<sp/>);</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal">uint32_t<sp/><ref refid="task_8h_1ae9254491975ce0adbbc879d56dd1b222" kindref="member">ulTaskNotifyValueClear</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask,<sp/>uint32_t<sp/>ulBitsToClear<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a67155ad4ea2482b5f4597a69f2152be0" kindref="member">vTaskSetTimeOutState</ref>(<sp/><ref refid="structx_t_i_m_e___o_u_t" kindref="compound">TimeOut_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTimeOut<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" kindref="member">xTaskCheckForTimeOut</ref>(<sp/><ref refid="structx_t_i_m_e___o_u_t" kindref="compound">TimeOut_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTimeOut,<sp/>TickType_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTicksToWait<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------</highlight></codeline>
<codeline lineno="2325"><highlight class="comment"><sp/>*<sp/>SCHEDULER<sp/>INTERNALS<sp/>AVAILABLE<sp/>FOR<sp/>PORTING<sp/>PURPOSES</highlight></codeline>
<codeline lineno="2326"><highlight class="comment"><sp/>*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2329"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>NOT<sp/>BE<sp/>USED<sp/>FROM<sp/>APPLICATION<sp/>CODE.<sp/><sp/>IT<sp/>IS<sp/>ONLY</highlight></codeline>
<codeline lineno="2330"><highlight class="comment"><sp/>*<sp/>INTENDED<sp/>FOR<sp/>USE<sp/>WHEN<sp/>IMPLEMENTING<sp/>A<sp/>PORT<sp/>OF<sp/>THE<sp/>SCHEDULER<sp/>AND<sp/>IS</highlight></codeline>
<codeline lineno="2331"><highlight class="comment"><sp/>*<sp/>AN<sp/>INTERFACE<sp/>WHICH<sp/>IS<sp/>FOR<sp/>THE<sp/>EXCLUSIVE<sp/>USE<sp/>OF<sp/>THE<sp/>SCHEDULER.</highlight></codeline>
<codeline lineno="2332"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2333"><highlight class="comment"><sp/>*<sp/>Called<sp/>from<sp/>the<sp/>real<sp/>time<sp/>kernel<sp/>tick<sp/>(either<sp/>preemptive<sp/>or<sp/>cooperative),</highlight></codeline>
<codeline lineno="2334"><highlight class="comment"><sp/>*<sp/>this<sp/>increments<sp/>the<sp/>tick<sp/>count<sp/>and<sp/>checks<sp/>if<sp/>any<sp/>tasks<sp/>that<sp/>are<sp/>blocked</highlight></codeline>
<codeline lineno="2335"><highlight class="comment"><sp/>*<sp/>for<sp/>a<sp/>finite<sp/>period<sp/>required<sp/>removing<sp/>from<sp/>a<sp/>blocked<sp/>list<sp/>and<sp/>placing<sp/>on</highlight></codeline>
<codeline lineno="2336"><highlight class="comment"><sp/>*<sp/>a<sp/>ready<sp/>list.<sp/><sp/>If<sp/>a<sp/>non-zero<sp/>value<sp/>is<sp/>returned<sp/>then<sp/>a<sp/>context<sp/>switch<sp/>is</highlight></codeline>
<codeline lineno="2337"><highlight class="comment"><sp/>*<sp/>required<sp/>because<sp/>either:</highlight></codeline>
<codeline lineno="2338"><highlight class="comment"><sp/>*<sp/><sp/><sp/>+<sp/>A<sp/>task<sp/>was<sp/>removed<sp/>from<sp/>a<sp/>blocked<sp/>list<sp/>because<sp/>its<sp/>timeout<sp/>had<sp/>expired,</highlight></codeline>
<codeline lineno="2339"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>or</highlight></codeline>
<codeline lineno="2340"><highlight class="comment"><sp/>*<sp/><sp/><sp/>+<sp/>Time<sp/>slicing<sp/>is<sp/>in<sp/>use<sp/>and<sp/>there<sp/>is<sp/>a<sp/>task<sp/>of<sp/>equal<sp/>priority<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="2341"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>currently<sp/>running<sp/>task.</highlight></codeline>
<codeline lineno="2342"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" kindref="member">xTaskIncrementTick</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2346"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>NOT<sp/>BE<sp/>USED<sp/>FROM<sp/>APPLICATION<sp/>CODE.<sp/><sp/>IT<sp/>IS<sp/>AN</highlight></codeline>
<codeline lineno="2347"><highlight class="comment"><sp/>*<sp/>INTERFACE<sp/>WHICH<sp/>IS<sp/>FOR<sp/>THE<sp/>EXCLUSIVE<sp/>USE<sp/>OF<sp/>THE<sp/>SCHEDULER.</highlight></codeline>
<codeline lineno="2348"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2349"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>BE<sp/>CALLED<sp/>WITH<sp/>INTERRUPTS<sp/>DISABLED.</highlight></codeline>
<codeline lineno="2350"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2351"><highlight class="comment"><sp/>*<sp/>Removes<sp/>the<sp/>calling<sp/>task<sp/>from<sp/>the<sp/>ready<sp/>list<sp/>and<sp/>places<sp/>it<sp/>both</highlight></codeline>
<codeline lineno="2352"><highlight class="comment"><sp/>*<sp/>on<sp/>the<sp/>list<sp/>of<sp/>tasks<sp/>waiting<sp/>for<sp/>a<sp/>particular<sp/>event,<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="2353"><highlight class="comment"><sp/>*<sp/>list<sp/>of<sp/>delayed<sp/>tasks.<sp/><sp/>The<sp/>task<sp/>will<sp/>be<sp/>removed<sp/>from<sp/>both<sp/>lists</highlight></codeline>
<codeline lineno="2354"><highlight class="comment"><sp/>*<sp/>and<sp/>replaced<sp/>on<sp/>the<sp/>ready<sp/>list<sp/>should<sp/>either<sp/>the<sp/>event<sp/>occur<sp/>(and</highlight></codeline>
<codeline lineno="2355"><highlight class="comment"><sp/>*<sp/>there<sp/>be<sp/>no<sp/>higher<sp/>priority<sp/>tasks<sp/>waiting<sp/>on<sp/>the<sp/>same<sp/>event)<sp/>or</highlight></codeline>
<codeline lineno="2356"><highlight class="comment"><sp/>*<sp/>the<sp/>delay<sp/>period<sp/>expires.</highlight></codeline>
<codeline lineno="2357"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2358"><highlight class="comment"><sp/>*<sp/>The<sp/>&apos;unordered&apos;<sp/>version<sp/>replaces<sp/>the<sp/>event<sp/>list<sp/>item<sp/>value<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="2359"><highlight class="comment"><sp/>*<sp/>xItemValue<sp/>value,<sp/>and<sp/>inserts<sp/>the<sp/>list<sp/>item<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="2360"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2361"><highlight class="comment"><sp/>*<sp/>The<sp/>&apos;ordered&apos;<sp/>version<sp/>uses<sp/>the<sp/>existing<sp/>event<sp/>list<sp/>item<sp/>value<sp/>(which<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="2362"><highlight class="comment"><sp/>*<sp/>owning<sp/>tasks<sp/>priority)<sp/>to<sp/>insert<sp/>the<sp/>list<sp/>item<sp/>into<sp/>the<sp/>event<sp/>list<sp/>is<sp/>task</highlight></codeline>
<codeline lineno="2363"><highlight class="comment"><sp/>*<sp/>priority<sp/>order.</highlight></codeline>
<codeline lineno="2364"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2365"><highlight class="comment"><sp/>*<sp/>@param<sp/>pxEventList<sp/>The<sp/>list<sp/>containing<sp/>tasks<sp/>that<sp/>are<sp/>blocked<sp/>waiting</highlight></codeline>
<codeline lineno="2366"><highlight class="comment"><sp/>*<sp/>for<sp/>the<sp/>event<sp/>to<sp/>occur.</highlight></codeline>
<codeline lineno="2367"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2368"><highlight class="comment"><sp/>*<sp/>@param<sp/>xItemValue<sp/>The<sp/>item<sp/>value<sp/>to<sp/>use<sp/>for<sp/>the<sp/>event<sp/>list<sp/>item<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="2369"><highlight class="comment"><sp/>*<sp/>event<sp/>list<sp/>is<sp/>not<sp/>ordered<sp/>by<sp/>task<sp/>priority.</highlight></codeline>
<codeline lineno="2370"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2371"><highlight class="comment"><sp/>*<sp/>@param<sp/>xTicksToWait<sp/>The<sp/>maximum<sp/>amount<sp/>of<sp/>time<sp/>that<sp/>the<sp/>task<sp/>should<sp/>wait</highlight></codeline>
<codeline lineno="2372"><highlight class="comment"><sp/>*<sp/>for<sp/>the<sp/>event<sp/>to<sp/>occur.<sp/><sp/>This<sp/>is<sp/>specified<sp/>in<sp/>kernel<sp/>ticks,the<sp/>constant</highlight></codeline>
<codeline lineno="2373"><highlight class="comment"><sp/>*<sp/>portTICK_PERIOD_MS<sp/>can<sp/>be<sp/>used<sp/>to<sp/>convert<sp/>kernel<sp/>ticks<sp/>into<sp/>a<sp/>real<sp/>time</highlight></codeline>
<codeline lineno="2374"><highlight class="comment"><sp/>*<sp/>period.</highlight></codeline>
<codeline lineno="2375"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a56ae23bc0dece4522d666959902221ca" kindref="member">vTaskPlaceOnEventList</ref>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxEventList,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>xTicksToWait<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" kindref="member">vTaskPlaceOnUnorderedEventList</ref>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/>pxEventList,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>xItemValue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>xTicksToWait<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2380"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>NOT<sp/>BE<sp/>USED<sp/>FROM<sp/>APPLICATION<sp/>CODE.<sp/><sp/>IT<sp/>IS<sp/>AN</highlight></codeline>
<codeline lineno="2381"><highlight class="comment"><sp/>*<sp/>INTERFACE<sp/>WHICH<sp/>IS<sp/>FOR<sp/>THE<sp/>EXCLUSIVE<sp/>USE<sp/>OF<sp/>THE<sp/>SCHEDULER.</highlight></codeline>
<codeline lineno="2382"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2383"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>BE<sp/>CALLED<sp/>WITH<sp/>INTERRUPTS<sp/>DISABLED.</highlight></codeline>
<codeline lineno="2384"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2385"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>performs<sp/>nearly<sp/>the<sp/>same<sp/>function<sp/>as<sp/>vTaskPlaceOnEventList().</highlight></codeline>
<codeline lineno="2386"><highlight class="comment"><sp/>*<sp/>The<sp/>difference<sp/>being<sp/>that<sp/>this<sp/>function<sp/>does<sp/>not<sp/>permit<sp/>tasks<sp/>to<sp/>block</highlight></codeline>
<codeline lineno="2387"><highlight class="comment"><sp/>*<sp/>indefinitely,<sp/>whereas<sp/>vTaskPlaceOnEventList()<sp/>does.</highlight></codeline>
<codeline lineno="2388"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2389"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ada3eb00e16241f5b648184a406a6a6fd" kindref="member">vTaskPlaceOnEventListRestricted</ref>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxEventList,<sp/>TickType_t<sp/>xTicksToWait,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseType_t<sp/>xWaitIndefinitely<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2393"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>NOT<sp/>BE<sp/>USED<sp/>FROM<sp/>APPLICATION<sp/>CODE.<sp/><sp/>IT<sp/>IS<sp/>AN</highlight></codeline>
<codeline lineno="2394"><highlight class="comment"><sp/>*<sp/>INTERFACE<sp/>WHICH<sp/>IS<sp/>FOR<sp/>THE<sp/>EXCLUSIVE<sp/>USE<sp/>OF<sp/>THE<sp/>SCHEDULER.</highlight></codeline>
<codeline lineno="2395"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2396"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>BE<sp/>CALLED<sp/>WITH<sp/>INTERRUPTS<sp/>DISABLED.</highlight></codeline>
<codeline lineno="2397"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2398"><highlight class="comment"><sp/>*<sp/>Removes<sp/>a<sp/>task<sp/>from<sp/>both<sp/>the<sp/>specified<sp/>event<sp/>list<sp/>and<sp/>the<sp/>list<sp/>of<sp/>blocked</highlight></codeline>
<codeline lineno="2399"><highlight class="comment"><sp/>*<sp/>tasks,<sp/>and<sp/>places<sp/>it<sp/>on<sp/>a<sp/>ready<sp/>queue.</highlight></codeline>
<codeline lineno="2400"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2401"><highlight class="comment"><sp/>*<sp/>xTaskRemoveFromEventList()/vTaskRemoveFromUnorderedEventList()<sp/>will<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="2402"><highlight class="comment"><sp/>*<sp/>if<sp/>either<sp/>an<sp/>event<sp/>occurs<sp/>to<sp/>unblock<sp/>a<sp/>task,<sp/>or<sp/>the<sp/>block<sp/>timeout<sp/>period</highlight></codeline>
<codeline lineno="2403"><highlight class="comment"><sp/>*<sp/>expires.</highlight></codeline>
<codeline lineno="2404"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2405"><highlight class="comment"><sp/>*<sp/>xTaskRemoveFromEventList()<sp/>is<sp/>used<sp/>when<sp/>the<sp/>event<sp/>list<sp/>is<sp/>in<sp/>task<sp/>priority</highlight></codeline>
<codeline lineno="2406"><highlight class="comment"><sp/>*<sp/>order.<sp/><sp/>It<sp/>removes<sp/>the<sp/>list<sp/>item<sp/>from<sp/>the<sp/>head<sp/>of<sp/>the<sp/>event<sp/>list<sp/>as<sp/>that<sp/>will</highlight></codeline>
<codeline lineno="2407"><highlight class="comment"><sp/>*<sp/>have<sp/>the<sp/>highest<sp/>priority<sp/>owning<sp/>task<sp/>of<sp/>all<sp/>the<sp/>tasks<sp/>on<sp/>the<sp/>event<sp/>list.</highlight></codeline>
<codeline lineno="2408"><highlight class="comment"><sp/>*<sp/>vTaskRemoveFromUnorderedEventList()<sp/>is<sp/>used<sp/>when<sp/>the<sp/>event<sp/>list<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="2409"><highlight class="comment"><sp/>*<sp/>ordered<sp/>and<sp/>the<sp/>event<sp/>list<sp/>items<sp/>hold<sp/>something<sp/>other<sp/>than<sp/>the<sp/>owning<sp/>tasks</highlight></codeline>
<codeline lineno="2410"><highlight class="comment"><sp/>*<sp/>priority.<sp/><sp/>In<sp/>this<sp/>case<sp/>the<sp/>event<sp/>list<sp/>item<sp/>value<sp/>is<sp/>updated<sp/>to<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="2411"><highlight class="comment"><sp/>*<sp/>passed<sp/>in<sp/>the<sp/>xItemValue<sp/>parameter.</highlight></codeline>
<codeline lineno="2412"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2413"><highlight class="comment"><sp/>*<sp/>@return<sp/>pdTRUE<sp/>if<sp/>the<sp/>task<sp/>being<sp/>removed<sp/>has<sp/>a<sp/>higher<sp/>priority<sp/>than<sp/>the<sp/>task</highlight></codeline>
<codeline lineno="2414"><highlight class="comment"><sp/>*<sp/>making<sp/>the<sp/>call,<sp/>otherwise<sp/>pdFALSE.</highlight></codeline>
<codeline lineno="2415"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxEventList<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" kindref="member">vTaskRemoveFromUnorderedEventList</ref>(<sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*<sp/>pxEventListItem,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>xItemValue<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2420"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>NOT<sp/>BE<sp/>USED<sp/>FROM<sp/>APPLICATION<sp/>CODE.<sp/><sp/>IT<sp/>IS<sp/>ONLY</highlight></codeline>
<codeline lineno="2421"><highlight class="comment"><sp/>*<sp/>INTENDED<sp/>FOR<sp/>USE<sp/>WHEN<sp/>IMPLEMENTING<sp/>A<sp/>PORT<sp/>OF<sp/>THE<sp/>SCHEDULER<sp/>AND<sp/>IS</highlight></codeline>
<codeline lineno="2422"><highlight class="comment"><sp/>*<sp/>AN<sp/>INTERFACE<sp/>WHICH<sp/>IS<sp/>FOR<sp/>THE<sp/>EXCLUSIVE<sp/>USE<sp/>OF<sp/>THE<sp/>SCHEDULER.</highlight></codeline>
<codeline lineno="2423"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2424"><highlight class="comment"><sp/>*<sp/>Sets<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>current<sp/>TCB<sp/>to<sp/>the<sp/>TCB<sp/>of<sp/>the<sp/>highest<sp/>priority<sp/>task</highlight></codeline>
<codeline lineno="2425"><highlight class="comment"><sp/>*<sp/>that<sp/>is<sp/>ready<sp/>to<sp/>run.</highlight></codeline>
<codeline lineno="2426"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><ref refid="_free_r_t_o_s_8h_1a6720aeadd2ae4379a1280e2d6ff42c0c" kindref="member">portDONT_DISCARD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a7a82c12c2407390ecbb70c123aa11e58" kindref="member">vTaskSwitchContext</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2430"><highlight class="comment"><sp/>*<sp/>THESE<sp/>FUNCTIONS<sp/>MUST<sp/>NOT<sp/>BE<sp/>USED<sp/>FROM<sp/>APPLICATION<sp/>CODE.<sp/><sp/>THEY<sp/>ARE<sp/>USED<sp/>BY</highlight></codeline>
<codeline lineno="2431"><highlight class="comment"><sp/>*<sp/>THE<sp/>EVENT<sp/>BITS<sp/>MODULE.</highlight></codeline>
<codeline lineno="2432"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal">TickType_t<sp/><ref refid="task_8h_1a7793b4bbe45c10d4c5104c126b89e87c" kindref="member">uxTaskResetEventItemValue</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2436"><highlight class="comment"><sp/>*<sp/>Return<sp/>the<sp/>handle<sp/>of<sp/>the<sp/>calling<sp/>task.</highlight></codeline>
<codeline lineno="2437"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/><ref refid="task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc" kindref="member">xTaskGetCurrentTaskHandle</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2441"><highlight class="comment"><sp/>*<sp/>Shortcut<sp/>used<sp/>by<sp/>the<sp/>queue<sp/>implementation<sp/>to<sp/>prevent<sp/>unnecessary<sp/>call<sp/>to</highlight></codeline>
<codeline lineno="2442"><highlight class="comment"><sp/>*<sp/>taskYIELD();</highlight></codeline>
<codeline lineno="2443"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a998c69e37431a3a32c637b31ff60089a" kindref="member">vTaskMissedYield</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2447"><highlight class="comment"><sp/>*<sp/>Returns<sp/>the<sp/>scheduler<sp/>state<sp/>as<sp/>taskSCHEDULER_RUNNING,</highlight></codeline>
<codeline lineno="2448"><highlight class="comment"><sp/>*<sp/>taskSCHEDULER_NOT_STARTED<sp/>or<sp/>taskSCHEDULER_SUSPENDED.</highlight></codeline>
<codeline lineno="2449"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1a0241000e08a261372186d34825a35979" kindref="member">xTaskGetSchedulerState</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2453"><highlight class="comment"><sp/>*<sp/>Raises<sp/>the<sp/>priority<sp/>of<sp/>the<sp/>mutex<sp/>holder<sp/>to<sp/>that<sp/>of<sp/>the<sp/>calling<sp/>task<sp/>should</highlight></codeline>
<codeline lineno="2454"><highlight class="comment"><sp/>*<sp/>the<sp/>mutex<sp/>holder<sp/>have<sp/>a<sp/>priority<sp/>less<sp/>than<sp/>the<sp/>calling<sp/>task.</highlight></codeline>
<codeline lineno="2455"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1aa715a488a6014df5a9393ca38c5938c0" kindref="member">xTaskPriorityInherit</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxMutexHolder<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2459"><highlight class="comment"><sp/>*<sp/>Set<sp/>the<sp/>priority<sp/>of<sp/>a<sp/>task<sp/>back<sp/>to<sp/>its<sp/>proper<sp/>priority<sp/>in<sp/>the<sp/>case<sp/>that<sp/>it</highlight></codeline>
<codeline lineno="2460"><highlight class="comment"><sp/>*<sp/>inherited<sp/>a<sp/>higher<sp/>priority<sp/>while<sp/>it<sp/>was<sp/>holding<sp/>a<sp/>semaphore.</highlight></codeline>
<codeline lineno="2461"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1a02fe2e1419fd6c35f75a1357c5e5ce22" kindref="member">xTaskPriorityDisinherit</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxMutexHolder<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2465"><highlight class="comment"><sp/>*<sp/>If<sp/>a<sp/>higher<sp/>priority<sp/>task<sp/>attempting<sp/>to<sp/>obtain<sp/>a<sp/>mutex<sp/>caused<sp/>a<sp/>lower</highlight></codeline>
<codeline lineno="2466"><highlight class="comment"><sp/>*<sp/>priority<sp/>task<sp/>to<sp/>inherit<sp/>the<sp/>higher<sp/>priority<sp/>task&apos;s<sp/>priority<sp/>-<sp/>but<sp/>the<sp/>higher</highlight></codeline>
<codeline lineno="2467"><highlight class="comment"><sp/>*<sp/>priority<sp/>task<sp/>then<sp/>timed<sp/>out<sp/>without<sp/>obtaining<sp/>the<sp/>mutex,<sp/>then<sp/>the<sp/>lower</highlight></codeline>
<codeline lineno="2468"><highlight class="comment"><sp/>*<sp/>priority<sp/>task<sp/>will<sp/>disinherit<sp/>the<sp/>priority<sp/>again<sp/>-<sp/>but<sp/>only<sp/>down<sp/>as<sp/>far<sp/>as</highlight></codeline>
<codeline lineno="2469"><highlight class="comment"><sp/>*<sp/>the<sp/>highest<sp/>priority<sp/>task<sp/>that<sp/>is<sp/>still<sp/>waiting<sp/>for<sp/>the<sp/>mutex<sp/>(if<sp/>there<sp/>were</highlight></codeline>
<codeline lineno="2470"><highlight class="comment"><sp/>*<sp/>more<sp/>than<sp/>one<sp/>task<sp/>waiting<sp/>for<sp/>the<sp/>mutex).</highlight></codeline>
<codeline lineno="2471"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1aa11e6a58d2534fe91ed8ee3a02c9b5e0" kindref="member">vTaskPriorityDisinheritAfterTimeout</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxMutexHolder,<sp/>UBaseType_t<sp/>uxHighestPriorityWaitingTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2475"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>uxTCBNumber<sp/>assigned<sp/>to<sp/>the<sp/>task<sp/>referenced<sp/>by<sp/>the<sp/>xTask<sp/>parameter.</highlight></codeline>
<codeline lineno="2476"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal">UBaseType_t<sp/><ref refid="task_8h_1ad8bb91e2267905f0069918802fa7f8b8" kindref="member">uxTaskGetTaskNumber</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2480"><highlight class="comment"><sp/>*<sp/>Set<sp/>the<sp/>uxTaskNumber<sp/>of<sp/>the<sp/>task<sp/>referenced<sp/>by<sp/>the<sp/>xTask<sp/>parameter<sp/>to</highlight></codeline>
<codeline lineno="2481"><highlight class="comment"><sp/>*<sp/>uxHandle.</highlight></codeline>
<codeline lineno="2482"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ae48f006277815cb1c534284e29ca8f82" kindref="member">vTaskSetTaskNumber</ref>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>xTask,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UBaseType_t<sp/>uxHandle<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2486"><highlight class="comment"><sp/>*<sp/>Only<sp/>available<sp/>when<sp/>configUSE_TICKLESS_IDLE<sp/>is<sp/>set<sp/>to<sp/>1.</highlight></codeline>
<codeline lineno="2487"><highlight class="comment"><sp/>*<sp/>If<sp/>tickless<sp/>mode<sp/>is<sp/>being<sp/>used,<sp/>or<sp/>a<sp/>low<sp/>power<sp/>mode<sp/>is<sp/>implemented,<sp/>then</highlight></codeline>
<codeline lineno="2488"><highlight class="comment"><sp/>*<sp/>the<sp/>tick<sp/>interrupt<sp/>will<sp/>not<sp/>execute<sp/>during<sp/>idle<sp/>periods.<sp/><sp/>When<sp/>this<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="2489"><highlight class="comment"><sp/>*<sp/>case,<sp/>the<sp/>tick<sp/>count<sp/>value<sp/>maintained<sp/>by<sp/>the<sp/>scheduler<sp/>needs<sp/>to<sp/>be<sp/>kept<sp/>up</highlight></codeline>
<codeline lineno="2490"><highlight class="comment"><sp/>*<sp/>to<sp/>date<sp/>with<sp/>the<sp/>actual<sp/>execution<sp/>time<sp/>by<sp/>being<sp/>skipped<sp/>forward<sp/>by<sp/>a<sp/>time</highlight></codeline>
<codeline lineno="2491"><highlight class="comment"><sp/>*<sp/>equal<sp/>to<sp/>the<sp/>idle<sp/>period.</highlight></codeline>
<codeline lineno="2492"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a8dda6cb26bb158dd9636873135e63912" kindref="member">vTaskStepTick</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>xTicksToJump<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Correct<sp/>the<sp/>tick<sp/>count<sp/>value<sp/>after<sp/>the<sp/>application<sp/>code<sp/>has<sp/>held</highlight></codeline>
<codeline lineno="2496"><highlight class="comment">interrupts<sp/>disabled<sp/>for<sp/>an<sp/>extended<sp/>period.<sp/><sp/>xTicksToCatchUp<sp/>is<sp/>the<sp/>number</highlight></codeline>
<codeline lineno="2497"><highlight class="comment">of<sp/>tick<sp/>interrupts<sp/>that<sp/>have<sp/>been<sp/>missed<sp/>due<sp/>to<sp/>interrupts<sp/>being<sp/>disabled.</highlight></codeline>
<codeline lineno="2498"><highlight class="comment">Its<sp/>value<sp/>is<sp/>not<sp/>computed<sp/>automatically,<sp/>so<sp/>must<sp/>be<sp/>computed<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="2499"><highlight class="comment">application<sp/>writer.</highlight></codeline>
<codeline lineno="2500"><highlight class="comment"></highlight></codeline>
<codeline lineno="2501"><highlight class="comment">This<sp/>function<sp/>is<sp/>similar<sp/>to<sp/>vTaskStepTick(),<sp/>however,<sp/>unlike</highlight></codeline>
<codeline lineno="2502"><highlight class="comment">vTaskStepTick(),<sp/>xTaskCatchUpTicks()<sp/>may<sp/>move<sp/>the<sp/>tick<sp/>count<sp/>forward<sp/>past<sp/>a</highlight></codeline>
<codeline lineno="2503"><highlight class="comment">time<sp/>at<sp/>which<sp/>a<sp/>task<sp/>should<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>blocked<sp/>state.<sp/><sp/>That<sp/>means</highlight></codeline>
<codeline lineno="2504"><highlight class="comment">tasks<sp/>may<sp/>have<sp/>to<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>blocked<sp/>state<sp/>as<sp/>the<sp/>tick<sp/>count<sp/>is</highlight></codeline>
<codeline lineno="2505"><highlight class="comment">moved.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal">BaseType_t<sp/><ref refid="task_8h_1a399bcc59c77ed9f1cb2bf3eac55bdf02" kindref="member">xTaskCatchUpTicks</ref>(<sp/>TickType_t<sp/>xTicksToCatchUp<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2509"><highlight class="comment"><sp/>*<sp/>Only<sp/>available<sp/>when<sp/>configUSE_TICKLESS_IDLE<sp/>is<sp/>set<sp/>to<sp/>1.</highlight></codeline>
<codeline lineno="2510"><highlight class="comment"><sp/>*<sp/>Provided<sp/>for<sp/>use<sp/>within<sp/>portSUPPRESS_TICKS_AND_SLEEP()<sp/>to<sp/>allow<sp/>the<sp/>port</highlight></codeline>
<codeline lineno="2511"><highlight class="comment"><sp/>*<sp/>specific<sp/>sleep<sp/>function<sp/>to<sp/>determine<sp/>if<sp/>it<sp/>is<sp/>ok<sp/>to<sp/>proceed<sp/>with<sp/>the<sp/>sleep,</highlight></codeline>
<codeline lineno="2512"><highlight class="comment"><sp/>*<sp/>and<sp/>if<sp/>it<sp/>is<sp/>ok<sp/>to<sp/>proceed,<sp/>if<sp/>it<sp/>is<sp/>ok<sp/>to<sp/>sleep<sp/>indefinitely.</highlight></codeline>
<codeline lineno="2513"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2514"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>is<sp/>necessary<sp/>because<sp/>portSUPPRESS_TICKS_AND_SLEEP()<sp/>is<sp/>only</highlight></codeline>
<codeline lineno="2515"><highlight class="comment"><sp/>*<sp/>called<sp/>with<sp/>the<sp/>scheduler<sp/>suspended,<sp/>not<sp/>from<sp/>within<sp/>a<sp/>critical<sp/>section.<sp/><sp/>It</highlight></codeline>
<codeline lineno="2516"><highlight class="comment"><sp/>*<sp/>is<sp/>therefore<sp/>possible<sp/>for<sp/>an<sp/>interrupt<sp/>to<sp/>request<sp/>a<sp/>context<sp/>switch<sp/>between</highlight></codeline>
<codeline lineno="2517"><highlight class="comment"><sp/>*<sp/>portSUPPRESS_TICKS_AND_SLEEP()<sp/>and<sp/>the<sp/>low<sp/>power<sp/>mode<sp/>actually<sp/>being</highlight></codeline>
<codeline lineno="2518"><highlight class="comment"><sp/>*<sp/>entered.<sp/><sp/>eTaskConfirmSleepModeStatus()<sp/>should<sp/>be<sp/>called<sp/>from<sp/>a<sp/>short</highlight></codeline>
<codeline lineno="2519"><highlight class="comment"><sp/>*<sp/>critical<sp/>section<sp/>between<sp/>the<sp/>timer<sp/>being<sp/>stopped<sp/>and<sp/>the<sp/>sleep<sp/>mode<sp/>being</highlight></codeline>
<codeline lineno="2520"><highlight class="comment"><sp/>*<sp/>entered<sp/>to<sp/>ensure<sp/>it<sp/>is<sp/>ok<sp/>to<sp/>proceed<sp/>into<sp/>the<sp/>sleep<sp/>mode.</highlight></codeline>
<codeline lineno="2521"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><ref refid="task_8h_1afd168a210ae0f2fb0fca242860a8178e" kindref="member">eSleepModeStatus</ref><sp/><ref refid="task_8h_1ad185d5a451380c4040888620d9a92ec6" kindref="member">eTaskConfirmSleepModeStatus</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2525"><highlight class="comment"><sp/>*<sp/>For<sp/>internal<sp/>use<sp/>only.<sp/><sp/>Increment<sp/>the<sp/>mutex<sp/>held<sp/>count<sp/>when<sp/>a<sp/>mutex<sp/>is</highlight></codeline>
<codeline lineno="2526"><highlight class="comment"><sp/>*<sp/>taken<sp/>and<sp/>return<sp/>the<sp/>handle<sp/>of<sp/>the<sp/>task<sp/>that<sp/>has<sp/>taken<sp/>the<sp/>mutex.</highlight></codeline>
<codeline lineno="2527"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/><ref refid="task_8h_1a54430b124666d513049dcbf888e6935f" kindref="member">pvTaskIncrementMutexHeldCount</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2531"><highlight class="comment"><sp/>*<sp/>For<sp/>internal<sp/>use<sp/>only.<sp/><sp/>Same<sp/>as<sp/>vTaskSetTimeOutState(),<sp/>but<sp/>without<sp/>a<sp/>critial</highlight></codeline>
<codeline lineno="2532"><highlight class="comment"><sp/>*<sp/>section.</highlight></codeline>
<codeline lineno="2533"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a9bff8681d5ed262e71b92805ca0da909" kindref="member">vTaskInternalSetTimeOutState</ref>(<sp/><ref refid="structx_t_i_m_e___o_u_t" kindref="compound">TimeOut_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTimeOut<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INC_TASK_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Middlewares/Third_Party/FreeRTOS/Source/include/task.h"/>
  </compounddef>
</doxygen>
