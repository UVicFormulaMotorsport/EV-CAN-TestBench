<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="uvfr__utils_8c" kind="file" language="C++">
    <compoundname>uvfr_utils.c</compoundname>
    <includes refid="uvfr__utils_8h" local="yes">uvfr_utils.h</includes>
    <incdepgraph>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="12">
        <label>tim.h</label>
        <link refid="tim_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>imd.h</label>
        <link refid="imd_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>dash.h</label>
        <link refid="dash_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>driving_loop.h</label>
        <link refid="driving__loop_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>temp_monitoring.h</label>
        <link refid="temp__monitoring_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>stdint.h</label>
      </node>
      <node id="33">
        <label>stdlib.h</label>
      </node>
      <node id="28">
        <label>oled.h</label>
        <link refid="oled_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>adc.h</label>
        <link refid="adc_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cmsis_os.h</label>
      </node>
      <node id="2">
        <label>uvfr_utils.h</label>
        <link refid="uvfr__utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>message_buffer.h</label>
      </node>
      <node id="23">
        <label>bms.h</label>
        <link refid="bms_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>spi.h</label>
        <link refid="spi_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>pdu.h</label>
        <link refid="pdu_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>motor_controller.h</label>
        <link refid="motor__controller_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>uvfr_settings.h</label>
        <link refid="uvfr__settings_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>daq.h</label>
        <link refid="daq_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>gpio.h</label>
        <link refid="gpio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Core/Src/uvfr_utils.c</label>
        <link refid="uvfr__utils_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>rb_tree.h</label>
        <link refid="rb__tree_8h"/>
      </node>
      <node id="10">
        <label>constants.h</label>
        <link refid="constants_8h"/>
      </node>
      <node id="9">
        <label>can.h</label>
        <link refid="can_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>uvfr_global_config.h</label>
        <link refid="uvfr__global__config_8h"/>
      </node>
      <node id="31">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
      </node>
      <node id="24">
        <label>uvfr_state_engine.h</label>
        <link refid="uvfr__state__engine_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>odometer.h</label>
        <link refid="odometer_8h"/>
      </node>
      <node id="5">
        <label>stm32f4xx_hal.h</label>
      </node>
      <node id="15">
        <label>FreeRTOS.h</label>
      </node>
      <node id="11">
        <label>dma.h</label>
        <link refid="dma_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>task.h</label>
      </node>
      <node id="4">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="uvfr__utils_8c_1af0c3770bb8c05b338afd53946909189c" prot="public" static="no">
        <name>UV_UTILS_SRC_IMPLIMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="9" column="9" bodyfile="Core/Src/uvfr_utils.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="uvfr__utils_8c_1a142da7a698285a444ffffb0d1d791023" prot="public" static="no" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t init_task_handle</definition>
        <argsstring></argsstring>
        <name>init_task_handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="12" column="21" bodyfile="Core/Src/freertos.c" bodystart="51" bodyend="-1" declfile="Core/Src/uvfr_utils.c" declline="12" declcolumn="21"/>
        <referencedby refid="main_8c_1abade755e13d07c10889ae83143656158" compoundref="freertos_8c" startline="160" endline="201">MX_FREERTOS_Init</referencedby>
        <referencedby refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" compoundref="uvfr__utils_8c" startline="39" endline="231">uvInit</referencedby>
      </memberdef>
      <memberdef kind="variable" id="uvfr__utils_8c_1af553c31425b32bd9c020380c942ed3bd" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t TxData[8]</definition>
        <argsstring>[8]</argsstring>
        <name>TxData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="13" column="30" bodyfile="Core/Src/constants.c" bodystart="7" bodyend="-1" declfile="Core/Src/uvfr_utils.c" declline="13" declcolumn="30"/>
      </memberdef>
      <memberdef kind="variable" id="uvfr__utils_8c_1a4e2f70766df64229ab99dfe80c0c012a" prot="public" static="no" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t reset_handle</definition>
        <argsstring></argsstring>
        <name>reset_handle</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="15" column="14" bodyfile="Core/Src/uvfr_utils.c" bodystart="15" bodyend="-1"/>
        <referencedby refid="uvfr__utils_8c_1a02781145b4802ebdc7001800bbe6d994" compoundref="uvfr__utils_8c" startline="250" endline="253">uvUtilsReset</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uvInit</definition>
        <argsstring>(void *arguments)</argsstring>
        <name>uvInit</name>
        <param>
          <type>void *</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
<para>: Function that initializes all of the car&apos;s stuff. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an RTOS task, and it serves to setup all of the car&apos;s different functions. at this point in our execution, we have already initialized all of our favorite hardware peripherals using HAL. Now we get to configure our convoluted system of OS-level settings and state machines.</para>
<para>It executes the following functions, in order:<itemizedlist>
<listitem><para>Load Vehicle Settings</para>
</listitem><listitem><para>Initialize and Start State Machine</para>
</listitem><listitem><para>Start Service Tasks, such as CAN, ADC, etc...</para>
</listitem><listitem><para>Initialize External Devices such as BMS, IMD, Motor Controller</para>
</listitem><listitem><para>Validate that these devices have actually booted up</para>
</listitem><listitem><para>Set vehicle state to <computeroutput>UV_READY</computeroutput> </para>
<para>Pretty important shit if you ask me. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>First on the block is our settings. The uv_settings are a bit strange, in the following way. We will check if we have saved custom settings, or if these settings are the default or not. It will then perform a checksum on the settings, and validate them to ensure they are safe If it fails to validate the settings, it will attempt to return to factory default.</para>
<para>If it is unable to return even to factory default settings, then we are in HUGE trouble, and some catastrophic bug has occurred. If it fails to even start this, it will not be safe to drive We must therefore panic.</para>
<para>Next up we will attempt to initialize the state engine. If this fails, then we are in another case where we are genuinely unsafe to drive. This will create the prototypes for a bajillion tasks that will be started and stopped. Which tasks are currently running, depends on the whims of the state engine. Since the state engine is critical to our ability to handle errors and implausibilitys, we cannot proceed without a fully operational state engine.</para>
<para>Once the state machine is initialized we get to actually start the thing.</para>
<para>Once we have initialized the state engine, what we want to do is create the prototypes of all the tasks that will be running.</para>
<para>Now we are going to create a bunch of tasks that will initialize our car&apos;s external devices. The reason that these are RTOS tasks, is that it takes a buncha time to verify the existance of some devices. As a direct result, we can sorta just wait around and check that each task sends a message confirming that it has successfully executed. :) However, first we need to actually create a Queue for these tasks to use <programlisting><codeline><highlight class="normal"><sp/><sp/>/</highlight></codeline>
<codeline><highlight class="normal">QueueHandle_t<sp/>init_validation_queue<sp/>=<sp/>xQueueCreate(8,sizeof(uv_init_task_response));</highlight></codeline>
<codeline><highlight class="normal">if(init_validation_queue<sp/>==<sp/>NULL){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>__uvInitPanic();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**<sp/></highlight></codeline>
</programlisting> The next big thing on our plate is checking the status of all external devices we need, and initializing them with appropriate parameters. These are split into tasks because it takes a bit of time, especially for devices that need to be configured via CANBus such as the motor controller. That is why it is split the way it is, to allow these to run somewhat concurrently <programlisting><codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">BaseType_t<sp/>retval;</highlight></codeline>
<codeline><highlight class="normal">//osThreadDef_t<sp/>MC_init_thread<sp/>=<sp/>{&quot;MC_init&quot;,MC_Startup,osPriorityNormal,128,0};</highlight></codeline>
<codeline><highlight class="normal">uv_init_task_args*<sp/>MC_init_args<sp/>=<sp/>uvMalloc(sizeof(uv_init_task_args));</highlight></codeline>
<codeline><highlight class="normal">MC_init_args-&gt;init_info_queue<sp/>=<sp/>init_validation_queue;</highlight></codeline>
<codeline><highlight class="normal">MC_init_args-&gt;specific_args<sp/>=<sp/>&amp;(current_vehicle_settings-&gt;mc_settings);</highlight></codeline>
<codeline><highlight class="normal">//MC_init_args-&gt;meta_task_handle<sp/>=<sp/>osThreadCreate(&amp;MC_init_thread,MC_init_args);</highlight></codeline>
<codeline><highlight class="normal">//vTaskResume(<sp/>MC_init_args-&gt;meta_task_handle<sp/>);</highlight></codeline>
<codeline><highlight class="normal">retval<sp/>=<sp/>xTaskCreate(MC_Startup,&quot;MC_init&quot;,128,MC_init_args,osPriorityAboveNormal,&amp;(MC_init_args-&gt;meta_task_handle));</highlight></codeline>
<codeline><highlight class="normal">if(retval<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//FUCK</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>error_msg<sp/>=<sp/>&quot;bruh&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">/**<sp/></highlight></codeline>
</programlisting> This thread is for initializing the BMS <programlisting><codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//osThreadDef_t<sp/>BMS_init_thread<sp/>=<sp/>{&quot;BMS_init&quot;,BMS_Init,osPriorityNormal,128,0};</highlight></codeline>
<codeline><highlight class="normal">uv_init_task_args*<sp/>BMS_init_args<sp/>=<sp/>uvMalloc(sizeof(uv_init_task_args));</highlight></codeline>
<codeline><highlight class="normal">BMS_init_args-&gt;init_info_queue<sp/>=<sp/>init_validation_queue;</highlight></codeline>
<codeline><highlight class="normal">BMS_init_args-&gt;specific_args<sp/>=<sp/>&amp;(current_vehicle_settings-&gt;bms_settings);</highlight></codeline>
<codeline><highlight class="normal">//BMS_init_args-&gt;meta_task_handle<sp/>=<sp/>osThreadCreate(&amp;BMS_init_thread,BMS_init_args);</highlight></codeline>
<codeline><highlight class="normal">retval<sp/>=<sp/>xTaskCreate(BMS_Init,&quot;BMS_init&quot;,128,BMS_init_args,osPriorityAboveNormal,&amp;(BMS_init_args-&gt;meta_task_handle));</highlight></codeline>
<codeline><highlight class="normal">if(retval<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//FUCK</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>error_msg<sp/>=<sp/>&quot;bruh&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">/**<sp/></highlight></codeline>
</programlisting> This variable is a tracker that tracks which devices have successfully initialized <programlisting><codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uv_init_task_args*<sp/>IMD_init_args<sp/>=<sp/>uvMalloc(sizeof(uv_init_task_args));</highlight></codeline>
<codeline><highlight class="normal">IMD_init_args-&gt;init_info_queue<sp/>=<sp/>init_validation_queue;</highlight></codeline>
<codeline><highlight class="normal">IMD_init_args-&gt;specific_args<sp/>=<sp/>&amp;(current_vehicle_settings-&gt;imd_settings);</highlight></codeline>
<codeline><highlight class="normal">retval<sp/>=<sp/>xTaskCreate(initIMD,&quot;BMS_init&quot;,128,IMD_init_args,osPriorityAboveNormal,&amp;(IMD_init_args-&gt;meta_task_handle));</highlight></codeline>
<codeline><highlight class="normal">if(retval<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//FUCK</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>error_msg<sp/>=<sp/>&quot;bruh&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uv_init_task_args*<sp/>PDU_init_args<sp/>=<sp/>uvMalloc(sizeof(uv_init_task_args));</highlight></codeline>
<codeline><highlight class="normal">PDU_init_args-&gt;init_info_queue<sp/>=<sp/>init_validation_queue;</highlight></codeline>
<codeline><highlight class="normal">PDU_init_args-&gt;specific_args<sp/>=<sp/>&amp;(current_vehicle_settings-&gt;imd_settings);</highlight></codeline>
<codeline><highlight class="normal">retval<sp/>=<sp/>xTaskCreate(initPDU,&quot;PDU_init&quot;,128,PDU_init_args,osPriorityAboveNormal,&amp;(PDU_init_args-&gt;meta_task_handle));<sp/>//pass<sp/>in<sp/>the<sp/>right<sp/>settings,<sp/>dumdum</highlight></codeline>
<codeline><highlight class="normal">if(retval<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//FUCK</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>error_msg<sp/>=<sp/>&quot;bruh&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint16_t<sp/>ext_devices_status<sp/>=<sp/>0x000F;<sp/>//Tracks<sp/>which<sp/>devices<sp/>are<sp/>currently<sp/>setup</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**<sp/></highlight></codeline>
</programlisting></para>
<para>Wait for all the spawned in tasks to do their thing. This should not take that long, but we wanna be sure that everything is chill If we are say, missing a BMS, then it will not allow you to proceed past the initialisation step This is handled by a message buffer, that takes inputs from all of the tasks</para>
<para>We allocate space for a response from the initialization.</para>
<para>Clean up, clean up, everybody clean up, clean up, clean up, everybody do your share! The following code cleans up all the threads that were running, and free up used memory</para>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="39" column="6" bodyfile="Core/Src/uvfr_utils.c" bodystart="39" bodyend="231"/>
        <references refid="uvfr__utils_8c_1a92b5ac44171d49acd084c274385a043a" compoundref="uvfr__utils_8c" startline="271" endline="285">__uvInitPanic</references>
        <references refid="bms_8h_1aa9af83736568f74c94d41f3f16adf513" compoundref="bms_8c" startline="11" endline="27">BMS_Init</references>
        <references refid="structuv__vehicle__settings_1a6cdca5b5474080f1dff4d19ef96435e1" compoundref="uvfr__settings_8h" startline="40">uv_vehicle_settings::bms_settings</references>
        <references refid="group__state__engine__api_1gaa3ad3e8df75177c00265881c16563212" compoundref="uvfr__state__engine_8c" startline="99" endline="156">changeVehicleState</references>
        <references refid="uvfr__settings_8h_1a03566822d1b8893362970a459bd67daf" compoundref="uvfr__settings_8c" startline="15">current_vehicle_settings</references>
        <references refid="structuv__init__task__response_1adfcb943d08344e528ad3d49c5c428918" compoundref="uvfr__utils_8h" startline="357">uv_init_task_response::device</references>
        <references refid="structuv__init__task__response_1af29fdddeaddc456d2028cc1ad471bae1" compoundref="uvfr__utils_8h" startline="359">uv_init_task_response::errmsg</references>
        <references refid="structuv__vehicle__settings_1a5b56318f394bef60ff7da0b4995183e0" compoundref="uvfr__settings_8h" startline="39">uv_vehicle_settings::imd_settings</references>
        <references refid="uvfr__utils_8h_1a4808a3bb38a3243b37a3690b9a02eba7" compoundref="uvfr__utils_8h" startline="146">INIT_CHECK_PERIOD</references>
        <references refid="structuv__init__task__args_1adec47e7a54822cacfb8fcfc35a22157f" compoundref="uvfr__utils_8h" startline="331">uv_init_task_args::init_info_queue</references>
        <references refid="uvfr__utils_8c_1a142da7a698285a444ffffb0d1d791023" compoundref="freertos_8c" startline="51">init_task_handle</references>
        <references refid="imd_8h_1a19b4fd879f065cfe6e1b7bb3400cd0c3" compoundref="imd_8c" startline="554" endline="566">initIMD</references>
        <references refid="pdu_8h_1afaa6671d51bcd0687c87ac635ff70d95" compoundref="pdu_8c" startline="183" endline="195">initPDU</references>
        <references refid="uvfr__utils_8h_1a40d625666ff5a3c5918ec7591f0628ed" compoundref="uvfr__utils_8h" startline="145">MAX_INIT_TIME</references>
        <references refid="structuv__vehicle__settings_1ad0b0375d2c1674abc6f972eec47e9cb7" compoundref="uvfr__settings_8h" startline="35">uv_vehicle_settings::mc_settings</references>
        <references refid="motor__controller_8h_1aed1407e1e0fd59dc7c5e5d6db671f0ab" compoundref="motor__controller_8c" startline="739" endline="803">MC_Startup</references>
        <references refid="structuv__init__task__args_1a3b81430245e7f832dc1112e53b0ef7ad" compoundref="uvfr__utils_8h" startline="332">uv_init_task_args::meta_task_handle</references>
        <references refid="structuv__init__task__response_1ab0bb4394cc62070f8d366ab3a55ff227" compoundref="uvfr__utils_8h" startline="358">uv_init_task_response::nchar</references>
        <references refid="structuv__init__task__args_1a61a9b579a1e65a3875a4edf3201a39f3" compoundref="uvfr__utils_8h" startline="330">uv_init_task_args::specific_args</references>
        <references refid="structuv__init__task__response_1a56b3df74c10cdc59e8e1b9d4c1f36af7" compoundref="uvfr__utils_8h" startline="356">uv_init_task_response::status</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a9ec1eef180c6208b25b08f0526dc5eb8" compoundref="uvfr__state__engine_8h" startline="83">UV_READY</references>
        <references refid="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" compoundref="uvfr__state__engine_8c" startline="164" endline="185">uvInitStateEngine</references>
        <references refid="uvfr__settings_8h_1a80856a38d7040ca10b8106ff0fa4acf4" compoundref="uvfr__settings_8c" startline="64" endline="86">uvSettingsInit</references>
        <references refid="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" compoundref="uvfr__state__engine_8c" startline="192" endline="246">uvStartStateMachine</references>
        <referencedby refid="main_8c_1abade755e13d07c10889ae83143656158" compoundref="freertos_8c" startline="160" endline="201">MX_FREERTOS_Init</referencedby>
      </memberdef>
      <memberdef kind="function" id="uvfr__utils_8c_1a11806db468fdae50664b98e619575425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uvSysResetDaemon</definition>
        <argsstring>(void *args)</argsstring>
        <name>uvSysResetDaemon</name>
        <param>
          <type>void *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="233" column="6" bodyfile="Core/Src/uvfr_utils.c" bodystart="233" bodyend="236"/>
        <referencedby refid="uvfr__utils_8c_1a02781145b4802ebdc7001800bbe6d994" compoundref="uvfr__utils_8c" startline="250" endline="253">uvUtilsReset</referencedby>
      </memberdef>
      <memberdef kind="function" id="uvfr__utils_8c_1a02781145b4802ebdc7001800bbe6d994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9e" kindref="member">uv_status_t</ref></type>
        <definition>enum uv_status_t uvUtilsReset</definition>
        <argsstring>()</argsstring>
        <name>uvUtilsReset</name>
        <briefdescription>
<para>This function is a soft-reboot of the uv_utils_backend and OS abstraction. </para>
        </briefdescription>
        <detaileddescription>
<para>The idea here is to basically start from a blank slate and boot up everything. So therefore we must:<itemizedlist>
<listitem><para>Halt state machine.</para>
</listitem><listitem><para>Nuke vehicle operation related tasks.</para>
</listitem><listitem><para>Nuke the state machine</para>
</listitem><listitem><para>Nuke old settings</para>
</listitem></itemizedlist>
</para>
<para>reinitialize uv_utils </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="233" column="6" bodyfile="Core/Src/uvfr_utils.c" bodystart="250" bodyend="253"/>
        <references refid="uvfr__utils_8c_1a4e2f70766df64229ab99dfe80c0c012a" compoundref="uvfr__utils_8c" startline="15">reset_handle</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="uvfr__utils_8c_1a11806db468fdae50664b98e619575425" compoundref="uvfr__utils_8c" startline="233" endline="236">uvSysResetDaemon</references>
      </memberdef>
      <memberdef kind="function" id="uvfr__utils_8c_1ab80c00a024c34da7f7926212ce10ef01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setup_extern_devices</definition>
        <argsstring>(void *argument)</argsstring>
        <name>setup_extern_devices</name>
        <param>
          <type>void *</type>
          <declname>argument</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>I really dunno why this still exists, but this gets called somewhere so Im leaving it. I think we just pass it NULL.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="259" column="6" bodyfile="Core/Src/uvfr_utils.c" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="uvfr__utils_8c_1a92b5ac44171d49acd084c274385a043a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __uvInitPanic</definition>
        <argsstring>()</argsstring>
        <name>__uvInitPanic</name>
        <briefdescription>
<para>Low Level Panic, that does not require the full UVFR utils functionality to be operational. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Calling _uvInitPanic() is irreversable and will cause the vehicle to hang itself. This is only to be used as a last resort to stop the vehicle from entering an invalid state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="271" column="6" bodyfile="Core/Src/uvfr_utils.c" bodystart="271" bodyend="285"/>
        <referencedby refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" compoundref="uvfr__utils_8c" startline="39" endline="231">uvInit</referencedby>
        <referencedby refid="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" compoundref="uvfr__state__engine_8c" startline="164" endline="185">uvInitStateEngine</referencedby>
        <referencedby refid="group__state__engine_1gaff684308203d45e9e16ad3d115c54279" compoundref="uvfr__state__engine_8c" startline="1341" endline="1398">uvSVCTaskManager</referencedby>
      </memberdef>
      <memberdef kind="function" id="uvfr__utils_8c_1abc00b3cb1c3b54fe4490c08ef85a293a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* __uvMallocCritSection</definition>
        <argsstring>(size_t memrequest)</argsstring>
        <name>__uvMallocCritSection</name>
        <param>
          <type>size_t</type>
          <declname>memrequest</declname>
        </param>
        <briefdescription>
<para>Wrapper function for <computeroutput>malloc()</computeroutput> that makes it thread safe. </para>
        </briefdescription>
        <detaileddescription>
<para>This typically appears in a macro expansion from <computeroutput>uvMalloc(x)</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="292" column="7" bodyfile="Core/Src/uvfr_utils.c" bodystart="292" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="uvfr__utils_8c_1ad372aabf81974eb44819f326172a563b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status __uvFreeCritSection</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>__uvFreeCritSection</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Thread-safe wrapper for <computeroutput>free</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is typically called from the macro expansion of <computeroutput>uvFree(x)</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="328" column="11" bodyfile="Core/Src/uvfr_utils.c" bodystart="328" bodyend="345"/>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="uvfr__utils_8c_1a0186c036688c7852cf0ceaee96b343a3" compoundref="uvfr__utils_8c" startline="401" endline="458">uvIsPTRValid</references>
      </memberdef>
      <memberdef kind="function" id="uvfr__utils_8c_1a498966c0f95bfa592d26b625a93fa1a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* __uvMallocOS</definition>
        <argsstring>(size_t memrequest)</argsstring>
        <name>__uvMallocOS</name>
        <param>
          <type>size_t</type>
          <declname>memrequest</declname>
        </param>
        <briefdescription>
<para><computeroutput>malloc()</computeroutput> wrapper that calls pvPortMalloc() rather than malloc() </para>
        </briefdescription>
        <detaileddescription>
<para>The reason we might wanto to be using pvPortMalloc() rather than regular stdlib malloc() is to consolodate the heap between RTOS and non-RTOS functions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="353" column="6" bodyfile="Core/Src/uvfr_utils.c" bodystart="353" bodyend="374"/>
        <references refid="uvfr__global__config_8h_1a93d6d1e888beb1e52dcb61b2f1be2591" compoundref="uvfr__global__config_8h" startline="22">UV_MALLOC_LIMIT</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="uvfr__utils_8c_1a0186c036688c7852cf0ceaee96b343a3" compoundref="uvfr__utils_8c" startline="401" endline="458">uvIsPTRValid</references>
      </memberdef>
      <memberdef kind="function" id="uvfr__utils_8c_1a67fb0753300c33287657882ccff64e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status __uvFreeOS</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>__uvFreeOS</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>OS-based free wrapper that calls pvPortFree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="379" column="11" bodyfile="Core/Src/uvfr_utils.c" bodystart="379" bodyend="391"/>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="uvfr__utils_8c_1a0186c036688c7852cf0ceaee96b343a3" compoundref="uvfr__utils_8c" startline="401" endline="458">uvIsPTRValid</references>
      </memberdef>
      <memberdef kind="function" id="uvfr__utils_8c_1a0186c036688c7852cf0ceaee96b343a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref></type>
        <definition>uv_status uvIsPTRValid</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>uvIsPTRValid</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>function that checks to make sure a pointer points to a place it is allowed to point to </para>
        </briefdescription>
        <detaileddescription>
<para>The primary motivation for this is to avoid trying to dereference a pointer that doesnt exist, and triggering the <computeroutput>HardFaultHandler()</computeroutput>. That is never a fun time. This allows us to exit gracefully instead of getting stuck in an IRQ handler</para>
<para>Exiting gracefully can be pretty neat sometimes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Core/Src/uvfr_utils.c" line="401" column="11" bodyfile="Core/Src/uvfr_utils.c" bodystart="401" bodyend="458"/>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" compoundref="uvfr__utils_8h" startline="169">UV_ERROR</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" compoundref="uvfr__utils_8h" startline="167">UV_OK</references>
        <references refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea87c01f9029276637a8c9568fd67efcac" compoundref="uvfr__utils_8h" startline="168">UV_WARNING</references>
        <referencedby refid="uvfr__utils_8c_1ad372aabf81974eb44819f326172a563b" compoundref="uvfr__utils_8c" startline="328" endline="345">__uvFreeCritSection</referencedby>
        <referencedby refid="uvfr__utils_8c_1a67fb0753300c33287657882ccff64e42" compoundref="uvfr__utils_8c" startline="379" endline="391">__uvFreeOS</referencedby>
        <referencedby refid="uvfr__utils_8c_1a498966c0f95bfa592d26b625a93fa1a3" compoundref="uvfr__utils_8c" startline="353" endline="374">__uvMallocOS</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>uvfr_utils.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Oct<sp/>7,<sp/>2024</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>byo10</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="uvfr__utils_8c_1af0c3770bb8c05b338afd53946909189c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UV_UTILS_SRC_IMPLIMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="uvfr__utils_8h" kindref="compound">uvfr_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/><ref refid="uvfr__utils_8c_1a142da7a698285a444ffffb0d1d791023" kindref="member">init_task_handle</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uvfr__utils_8c_1af553c31425b32bd9c020380c942ed3bd" kindref="member">TxData</ref>[8];</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="uvfr__utils_8c_1a4e2f70766df64229ab99dfe80c0c012a" refkind="member"><highlight class="normal">TaskHandle_t<sp/><ref refid="uvfr__utils_8c_1a4e2f70766df64229ab99dfe80c0c012a" kindref="member">reset_handle</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>CAN_TRANSMIT_TEST_IN_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8c_1a6d40598f9d8daa89ca159a2e87f4fd01" kindref="member">uvInit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>arguments){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);<sp/></highlight><highlight class="comment">//For<sp/>debugging<sp/>purposes,<sp/>I<sp/>wanna<sp/>see<sp/>if<sp/>we<sp/>actually<sp/>end<sp/>up<sp/>here<sp/>at<sp/>some<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>error_msg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>msg_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="uvfr__settings_8h_1a80856a38d7040ca10b8106ff0fa4acf4" kindref="member">uvSettingsInit</ref>()<sp/>!=<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uvfr__utils_8c_1a92b5ac44171d49acd084c274385a043a" kindref="member">__uvInitPanic</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine__api_1ga5c608f3832c45eac6e2da198d4ef1ba0" kindref="member">uvInitStateEngine</ref>()<sp/>!=<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uvfr__utils_8c_1a92b5ac44171d49acd084c274385a043a" kindref="member">__uvInitPanic</ref>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine__api_1ga2ad1d74b5783a51355c047be6642fab8" kindref="member">uvStartStateMachine</ref>()<sp/>!=<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uvfr__utils_8c_1a92b5ac44171d49acd084c274385a043a" kindref="member">__uvInitPanic</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>QueueHandle_t<sp/>init_validation_queue<sp/>=<sp/>xQueueCreate(8,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structuv__init__task__response" kindref="compound">uv_init_task_response</ref>));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(init_validation_queue<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uvfr__utils_8c_1a92b5ac44171d49acd084c274385a043a" kindref="member">__uvInitPanic</ref>();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseType_t<sp/>retval;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//osThreadDef_t<sp/>MC_init_thread<sp/>=<sp/>{&quot;MC_init&quot;,MC_Startup,osPriorityNormal,128,0};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__init__task__args" kindref="compound">uv_init_task_args</ref>*<sp/>MC_init_args<sp/>=<sp/>uvMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structuv__init__task__args" kindref="compound">uv_init_task_args</ref>));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>MC_init_args-&gt;<ref refid="structuv__init__task__args_1adec47e7a54822cacfb8fcfc35a22157f" kindref="member">init_info_queue</ref><sp/>=<sp/>init_validation_queue;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>MC_init_args-&gt;<ref refid="structuv__init__task__args_1a61a9b579a1e65a3875a4edf3201a39f3" kindref="member">specific_args</ref><sp/>=<sp/>&amp;(<ref refid="uvfr__settings_8h_1a03566822d1b8893362970a459bd67daf" kindref="member">current_vehicle_settings</ref>-&gt;<ref refid="structuv__vehicle__settings_1ad0b0375d2c1674abc6f972eec47e9cb7" kindref="member">mc_settings</ref>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//MC_init_args-&gt;meta_task_handle<sp/>=<sp/>osThreadCreate(&amp;MC_init_thread,MC_init_args);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vTaskResume(<sp/>MC_init_args-&gt;meta_task_handle<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>xTaskCreate(<ref refid="motor__controller_8h_1aed1407e1e0fd59dc7c5e5d6db671f0ab" kindref="member">MC_Startup</ref>,</highlight><highlight class="stringliteral">&quot;MC_init&quot;</highlight><highlight class="normal">,128,MC_init_args,osPriorityAboveNormal,&amp;(MC_init_args-&gt;<ref refid="structuv__init__task__args_1a3b81430245e7f832dc1112e53b0ef7ad" kindref="member">meta_task_handle</ref>));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FUCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bruh&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//osThreadDef_t<sp/>BMS_init_thread<sp/>=<sp/>{&quot;BMS_init&quot;,BMS_Init,osPriorityNormal,128,0};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__init__task__args" kindref="compound">uv_init_task_args</ref>*<sp/>BMS_init_args<sp/>=<sp/>uvMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structuv__init__task__args" kindref="compound">uv_init_task_args</ref>));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>BMS_init_args-&gt;<ref refid="structuv__init__task__args_1adec47e7a54822cacfb8fcfc35a22157f" kindref="member">init_info_queue</ref><sp/>=<sp/>init_validation_queue;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>BMS_init_args-&gt;<ref refid="structuv__init__task__args_1a61a9b579a1e65a3875a4edf3201a39f3" kindref="member">specific_args</ref><sp/>=<sp/>&amp;(<ref refid="uvfr__settings_8h_1a03566822d1b8893362970a459bd67daf" kindref="member">current_vehicle_settings</ref>-&gt;<ref refid="structuv__vehicle__settings_1a6cdca5b5474080f1dff4d19ef96435e1" kindref="member">bms_settings</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//BMS_init_args-&gt;meta_task_handle<sp/>=<sp/>osThreadCreate(&amp;BMS_init_thread,BMS_init_args);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>xTaskCreate(<ref refid="bms_8h_1aa9af83736568f74c94d41f3f16adf513" kindref="member">BMS_Init</ref>,</highlight><highlight class="stringliteral">&quot;BMS_init&quot;</highlight><highlight class="normal">,128,BMS_init_args,osPriorityAboveNormal,&amp;(BMS_init_args-&gt;<ref refid="structuv__init__task__args_1a3b81430245e7f832dc1112e53b0ef7ad" kindref="member">meta_task_handle</ref>));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FUCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bruh&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__init__task__args" kindref="compound">uv_init_task_args</ref>*<sp/>IMD_init_args<sp/>=<sp/>uvMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structuv__init__task__args" kindref="compound">uv_init_task_args</ref>));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>IMD_init_args-&gt;<ref refid="structuv__init__task__args_1adec47e7a54822cacfb8fcfc35a22157f" kindref="member">init_info_queue</ref><sp/>=<sp/>init_validation_queue;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>IMD_init_args-&gt;<ref refid="structuv__init__task__args_1a61a9b579a1e65a3875a4edf3201a39f3" kindref="member">specific_args</ref><sp/>=<sp/>&amp;(<ref refid="uvfr__settings_8h_1a03566822d1b8893362970a459bd67daf" kindref="member">current_vehicle_settings</ref>-&gt;<ref refid="structuv__vehicle__settings_1a5b56318f394bef60ff7da0b4995183e0" kindref="member">imd_settings</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>xTaskCreate(<ref refid="imd_8h_1a19b4fd879f065cfe6e1b7bb3400cd0c3" kindref="member">initIMD</ref>,</highlight><highlight class="stringliteral">&quot;BMS_init&quot;</highlight><highlight class="normal">,128,IMD_init_args,osPriorityAboveNormal,&amp;(IMD_init_args-&gt;<ref refid="structuv__init__task__args_1a3b81430245e7f832dc1112e53b0ef7ad" kindref="member">meta_task_handle</ref>));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FUCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bruh&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__init__task__args" kindref="compound">uv_init_task_args</ref>*<sp/>PDU_init_args<sp/>=<sp/>uvMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structuv__init__task__args" kindref="compound">uv_init_task_args</ref>));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>PDU_init_args-&gt;<ref refid="structuv__init__task__args_1adec47e7a54822cacfb8fcfc35a22157f" kindref="member">init_info_queue</ref><sp/>=<sp/>init_validation_queue;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>PDU_init_args-&gt;<ref refid="structuv__init__task__args_1a61a9b579a1e65a3875a4edf3201a39f3" kindref="member">specific_args</ref><sp/>=<sp/>&amp;(<ref refid="uvfr__settings_8h_1a03566822d1b8893362970a459bd67daf" kindref="member">current_vehicle_settings</ref>-&gt;<ref refid="structuv__vehicle__settings_1a5b56318f394bef60ff7da0b4995183e0" kindref="member">imd_settings</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>xTaskCreate(<ref refid="pdu_8h_1afaa6671d51bcd0687c87ac635ff70d95" kindref="member">initPDU</ref>,</highlight><highlight class="stringliteral">&quot;PDU_init&quot;</highlight><highlight class="normal">,128,PDU_init_args,osPriorityAboveNormal,&amp;(PDU_init_args-&gt;<ref refid="structuv__init__task__args_1a3b81430245e7f832dc1112e53b0ef7ad" kindref="member">meta_task_handle</ref>));<sp/></highlight><highlight class="comment">//pass<sp/>in<sp/>the<sp/>right<sp/>settings,<sp/>dumdum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval<sp/>!=<sp/>pdPASS){</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//FUCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bruh&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>ext_devices_status<sp/>=<sp/>0x000F;<sp/></highlight><highlight class="comment">//Tracks<sp/>which<sp/>devices<sp/>are<sp/>currently<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error_msg<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uvfr__utils_8c_1a92b5ac44171d49acd084c274385a043a" kindref="member">__uvInitPanic</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(BMS_init_args-&gt;<ref refid="structuv__init__task__args_1a3b81430245e7f832dc1112e53b0ef7ad" kindref="member">meta_task_handle</ref><sp/>==<sp/>NULL<sp/>||<sp/>MC_init_args-&gt;<ref refid="structuv__init__task__args_1a3b81430245e7f832dc1112e53b0ef7ad" kindref="member">meta_task_handle</ref><sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="uvfr__utils_8c_1a92b5ac44171d49acd084c274385a043a" kindref="member">__uvInitPanic</ref>();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structuv__init__task__response" kindref="compound">uv_init_task_response</ref><sp/>rx_response;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>TickType_t<sp/>last_time<sp/>=<sp/>xTaskGetTickCount();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;<sp/><ref refid="uvfr__utils_8h_1a40d625666ff5a3c5918ec7591f0628ed" kindref="member">MAX_INIT_TIME</ref>/<ref refid="uvfr__utils_8h_1a4808a3bb38a3243b37a3690b9a02eba7" kindref="member">INIT_CHECK_PERIOD</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelayUntil(&amp;last_time,pdMS_TO_TICKS(<ref refid="uvfr__utils_8h_1a4808a3bb38a3243b37a3690b9a02eba7" kindref="member">INIT_CHECK_PERIOD</ref>));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(xQueueReceive(init_validation_queue,&amp;rx_response,0)<sp/>==<sp/>pdPASS){</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rx_response.<ref refid="structuv__init__task__response_1a56b3df74c10cdc59e8e1b9d4c1f36af7" kindref="member">status</ref><sp/>==<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ext_devices_status<sp/>&amp;=<sp/>~(0x01&lt;&lt;rx_response.<ref refid="structuv__init__task__response_1adfcb943d08344e528ad3d49c5c428918" kindref="member">device</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_msg<sp/>=<sp/>rx_response.<ref refid="structuv__init__task__response_1af29fdddeaddc456d2028cc1ad471bae1" kindref="member">errmsg</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg_length<sp/>=<sp/>rx_response.<ref refid="structuv__init__task__response_1ab0bb4394cc62070f8d366ab3a55ff227" kindref="member">nchar</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ext_devices_status<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SUCCESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Set<sp/>vehicle<sp/>state<sp/>to<sp/>&quot;idle&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__state__engine__api_1gaa3ad3e8df75177c00265881c16563212" kindref="member">changeVehicleState</ref>(<ref refid="group__state__engine__api_1gga259abff5a03eaf908dc8f03d99f478e4a9ec1eef180c6208b25b08f0526dc5eb8" kindref="member">UV_READY</ref>)<sp/>==<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;Unable<sp/>To<sp/>Change<sp/>State<sp/>to<sp/>Ready&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//GTFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>we<sp/>get<sp/>here,<sp/>then<sp/>we<sp/>have<sp/>timed<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>initialisation_failure:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(MC_init_args-&gt;<ref refid="structuv__init__task__args_1a3b81430245e7f832dc1112e53b0ef7ad" kindref="member">meta_task_handle</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>uvFree(MC_init_args);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(BMS_init_args-&gt;<ref refid="structuv__init__task__args_1a3b81430245e7f832dc1112e53b0ef7ad" kindref="member">meta_task_handle</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>uvFree(BMS_init_args);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(IMD_init_args-&gt;<ref refid="structuv__init__task__args_1a3b81430245e7f832dc1112e53b0ef7ad" kindref="member">meta_task_handle</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>uvFree(IMD_init_args);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(PDU_init_args-&gt;<ref refid="structuv__init__task__args_1a3b81430245e7f832dc1112e53b0ef7ad" kindref="member">meta_task_handle</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>uvFree(PDU_init_args);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vQueueDelete(init_validation_queue);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(<ref refid="uvfr__utils_8c_1a142da7a698285a444ffffb0d1d791023" kindref="member">init_task_handle</ref>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="uvfr__utils_8c_1a11806db468fdae50664b98e619575425" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8c_1a11806db468fdae50664b98e619575425" kindref="member">uvSysResetDaemon</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>args){</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="uvfr__utils_8c_1a02781145b4802ebdc7001800bbe6d994" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9e" kindref="member">uv_status_t</ref><sp/><ref refid="uvfr__utils_8c_1a02781145b4802ebdc7001800bbe6d994" kindref="member">uvUtilsReset</ref>(){</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreate(<ref refid="uvfr__utils_8c_1a11806db468fdae50664b98e619575425" kindref="member">uvSysResetDaemon</ref>,</highlight><highlight class="stringliteral">&quot;reset&quot;</highlight><highlight class="normal">,128,NULL,5,&amp;<ref refid="uvfr__utils_8c_1a4e2f70766df64229ab99dfe80c0c012a" kindref="member">reset_handle</ref>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="uvfr__utils_8c_1ab80c00a024c34da7f7926212ce10ef01" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8c_1ab80c00a024c34da7f7926212ce10ef01" kindref="member">setup_extern_devices</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>argument){</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="uvfr__utils_8c_1a92b5ac44171d49acd084c274385a043a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8c_1a92b5ac44171d49acd084c274385a043a" kindref="member">__uvInitPanic</ref>(){<sp/></highlight><highlight class="comment">//Shit<sp/>is<sp/>so<sp/>fucked<sp/>up<sp/>the<sp/>thing<sp/>couldn&apos;t<sp/>properly<sp/>initialize<sp/>itself<sp/>even.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Ensure<sp/>vehicle<sp/>defaults<sp/>to<sp/>safe<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Kill<sp/>all<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Kill<sp/>the<sp/>scheduler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskEndScheduler();<sp/></highlight><highlight class="comment">//No<sp/>more<sp/>computer<sp/>lol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Stop<sp/>it,<sp/>get<sp/>some<sp/>help</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1){</highlight><highlight class="comment">//We<sp/>want<sp/>the<sp/>program<sp/>to<sp/>straight<sp/>up<sp/>hang<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="uvfr__utils_8c_1abc00b3cb1c3b54fe4490c08ef85a293a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="uvfr__utils_8c_1abc00b3cb1c3b54fe4490c08ef85a293a" kindref="member">__uvMallocCritSection</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memrequest){</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>oopsie_detected<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(memrequest<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskSuspendAll();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>malloc(memrequest);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ptr<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oopsie_detected<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTaskResumeAll()<sp/>==<sp/>pdTRUE){</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(oopsie_detected){</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="uvfr__utils_8c_1ad372aabf81974eb44819f326172a563b" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="uvfr__utils_8c_1ad372aabf81974eb44819f326172a563b" kindref="member">__uvFreeCritSection</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr){</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ptr<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight><highlight class="comment">//Cant<sp/>free<sp/>something<sp/>that<sp/>doesnt<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="uvfr__utils_8c_1a0186c036688c7852cf0ceaee96b343a3" kindref="member">uvIsPTRValid</ref>(ptr)!=<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskSuspendAll();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>free(ptr);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xTaskResumeAll()<sp/>!=<sp/>pdTRUE){</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="uvfr__utils_8c_1a498966c0f95bfa592d26b625a93fa1a3" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="uvfr__utils_8c_1a498966c0f95bfa592d26b625a93fa1a3" kindref="member">__uvMallocOS</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memrequest){</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(memrequest<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(memrequest<sp/>&gt;<sp/><ref refid="uvfr__global__config_8h_1a93d6d1e888beb1e52dcb61b2f1be2591" kindref="member">UV_MALLOC_LIMIT</ref>){</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Does<sp/>the<sp/>scheduler<sp/>actually<sp/>need<sp/>to<sp/>be<sp/>running<sp/>for<sp/>this?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Should<sp/>maybe<sp/>double<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>retval<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>pvPortMalloc(memrequest);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uvPanic(</highlight><highlight class="stringliteral">&quot;OS<sp/>Malloc<sp/>Failed&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="uvfr__utils_8c_1a0186c036688c7852cf0ceaee96b343a3" kindref="member">uvIsPTRValid</ref>(retval)<sp/>!=<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="uvfr__utils_8c_1a67fb0753300c33287657882ccff64e42" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="uvfr__utils_8c_1a67fb0753300c33287657882ccff64e42" kindref="member">__uvFreeOS</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr){</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ptr<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="uvfr__utils_8c_1a0186c036688c7852cf0ceaee96b343a3" kindref="member">uvIsPTRValid</ref>(ptr)<sp/>!=<sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>){</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>vPortFree(ptr);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="uvfr__utils_8c_1a0186c036688c7852cf0ceaee96b343a3" refkind="member"><highlight class="normal"><ref refid="can_8h_1aef3770e45bbacbf527fd93dd80eea9b9" kindref="member">uv_status</ref><sp/><ref refid="uvfr__utils_8c_1a0186c036688c7852cf0ceaee96b343a3" kindref="member">uvIsPTRValid</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr){</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ptr<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea87c01f9029276637a8c9568fd67efcac" kindref="member">UV_WARNING</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pval<sp/>=<sp/>(uint32_t)ptr;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>is_valid<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pval<sp/>&lt;<sp/>0x000FFFFF){<sp/></highlight><highlight class="comment">//Aliased<sp/>to<sp/>FLASH,<sp/>systmem<sp/>or<sp/>SRAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((pval<sp/>&gt;<sp/>0x08000000)&amp;&amp;<sp/>(pval<sp/>&lt;<sp/>0x080FFFFF)){<sp/></highlight><highlight class="comment">//Flash<sp/>be<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((pval<sp/>&gt;<sp/>0x10000000)&amp;&amp;(pval<sp/>&lt;<sp/>0x1000FFFF)){<sp/></highlight><highlight class="comment">//CCM<sp/>Data<sp/>RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((pval<sp/>&gt;<sp/>0x1FFF0000)&amp;&amp;(pval<sp/>&lt;<sp/>0x1FFF7A0F)){<sp/></highlight><highlight class="comment">//System<sp/>memory<sp/>+<sp/>OTP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((pval<sp/>&gt;<sp/>0x1FFFC000)&amp;&amp;(pval<sp/>&lt;<sp/>0x1FFFC007)){<sp/></highlight><highlight class="comment">//option<sp/>bytes<sp/>(should<sp/>these<sp/>be<sp/>user<sp/>accessable<sp/>under<sp/>any<sp/>circumstances?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea87c01f9029276637a8c9568fd67efcac" kindref="member">UV_WARNING</ref>;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((pval<sp/>&gt;<sp/>0x20000000)&amp;&amp;(pval<sp/>&lt;<sp/>0x2001FFFF)){<sp/></highlight><highlight class="comment">//SRAM<sp/>:)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((pval<sp/>&gt;<sp/>0x40000000)&amp;&amp;(pval<sp/>&lt;<sp/>0x40007FFF)){<sp/></highlight><highlight class="comment">//APB1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((pval<sp/>&gt;<sp/>0x40010000)&amp;&amp;(pval<sp/>&lt;<sp/>0x400157FF)){<sp/></highlight><highlight class="comment">//APB2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((pval<sp/>&gt;<sp/>0x40020000)&amp;&amp;(pval<sp/>&lt;<sp/>0x4007FFFF)){<sp/></highlight><highlight class="comment">//AHB1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((pval<sp/>&gt;<sp/>0x50000000)&amp;&amp;(pval<sp/>&lt;<sp/>0x50060BFF)){</highlight><highlight class="comment">//AHB2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((pval<sp/>&gt;<sp/>0x60000000)&amp;&amp;(pval<sp/>&lt;<sp/>0xA0000FFF)){</highlight><highlight class="comment">//AHB3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((pval<sp/>&gt;<sp/>0xE0000000)&amp;&amp;(pval<sp/>&lt;<sp/>0xE00FFFFF)){</highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea93b7493f003cb72e7b6138f2794b58e9" kindref="member">UV_OK</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="uvfr__utils_8h_1a71c52c44be11d0980910401cb9b5fb9ea480ef4e56d17703f0629bfe1e06bc4f0" kindref="member">UV_ERROR</ref>;</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Core/Src/uvfr_utils.c"/>
  </compounddef>
</doxygen>
